<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>hp12c</title>
 <link href="http://melborne.github.io/atom.xml" rel="self"/>
 <link href="http://melborne.github.io"/>
 <updated>2013-12-25T11:44:32+09:00</updated>
 <id>http://melborne.github.io</id>
 <author>
   <name>kyoendo</name>
   <email>postagie@gmail.com</email>
 </author>

 
 <entry>
   <title>電子書籍「Ruby入門パッケージ８ EPUB/MOBI版（500円）」売れてます！</title>
   <link href="http://melborne.github.io/2013/12/25/ruby-package-8-released"/>
   <updated>2013-12-25T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2013/12/25/ruby-package-8-released</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2013/12/24/why-not-start-ruby/&quot;&gt;前の記事&lt;/a&gt;でも紹介しましたが改めて。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;この度、「&lt;a href=&quot;http://melborne.github.io/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;」の2013年12月24日現在における全Ruby関連電子書籍８冊をパッケージングした「Ruby入門パッケージ８EPUB/MOBI版(500円)」の販売を開始しましたよ！個別購入（805円）に対し４割近い割引になっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/20131224ruby_pack8.html&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_pack8.png&quot; alt=&quot;ruby_pack8&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;書名：Ruby入門パッケージ８
内容：M&#39;ELBORNE BOOKSで現在（2013-12-24）までに販売されているRuby関連電子書籍全８冊を１つにパッケージしたもの
著者：kyoendo
フォーマット：EPUB / MOBI / DRMフリー
価格：500円
初版：2013年12月24日
含まれている電子書籍：
  1. これからRubyを始める人たちへ
  2. オブジェクトの理解から始めるRuby
  3. Rubyチュートリアル ～英文小説の最頻出ワードを見つけよう!
  4. irbから学ぶRubyの並列処理 ~ forkからWebSocketまで
  5. 知って得する！５５のRubyのトリビアな記法
  6. エラーメッセージから学ぶRack
  7. 30分のチュートリアルでJekyllを理解する
  8. Ruby脳が理解するJavaScriptのオブジェクト指向
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/WwoyT&quot; class=&quot;gumroad-button&quot;&gt;電子書籍「Ruby入門パッケージ８」EPUB/MOBI版&lt;/a&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;上のリンクはGumroadにおける商品購入リンクになっています。クリックすると、オーバーレイ・ウインドウが立ち上がって、この場でクレジットカード決済による購入が可能です。購入にはクレジット情報およびメールアドレスの入力が必要になります。購入すると、入力したメールアドレスにコンテンツのDLリンクが送られてきます。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;各書籍の概要についてはM&#39;ELBORNE BOOKSのトップページで確認するか、以下の記事を参考にしてください。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2013/12/24/why-not-start-ruby/&quot; title=&quot;僕が考えた最速・最小投資でRubyを学ぶ方法またはステマ乙&quot;&gt;僕が考えた最速・最小投資でRubyを学ぶ方法またはステマ乙&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;本パッケージに含まれるすべての電子書籍は、本ブログで公開している記事に対し、誤記の修正およびメディア向けの調整を行ったもので、実質的な内容についての追加・変更はありません。したがってテキストに関しお金を支払う価値は無いかもしれませんが、次の何れかの理由で興味を持たれる方が居られましたら、是非とも購入後検討の程宜しくお願い申し上げますm(__)m&lt;/p&gt;

&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;コンテンツに関心があるので、それが電子書籍の形態で読めるのはやはり便利だ。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コードのSyntax HighlightingをEPUBで実現したものをあまり見たことがない。どんなものかちょっと見てみたい。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EPUB生成ツール&lt;a href=&quot;http://melborne.github.io/2012/12/03/when-bloggers-become-publishers/&quot; title=&quot;maliq&quot;&gt;Maliq&lt;/a&gt;に関心がある。つまり自分もブログを電子書籍化したいので、その出力サンプルとして参考にしたい。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ブログの記事を読んだが参考になった。これが無料なんて申し訳なく思うから買ってあげたい。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ブログの記事は読んでないが、興味はあるのでどうせなら電子書籍で読んでみよう。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;なんか表紙が気に入ったからそれを眺めるために買ってみよう。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;このブログのネタは全体としてなかなか面白い。これからも継続して欲しいので寄付の気持ちで購入してもいいかな。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;タブレットを買ったばかりなので、いろいろな電子書籍を衝動買いしたい。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Merry Christmas!。最高の気分。だれでもいいから俺の500円受け取って。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;なお、M&#39;ELBORNE BOOKSにおける電子書籍販売の収益金はもっぱら私、merborneの電子書籍購入原資に当てられています ^ ^;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>僕が考えた最速・最小投資でRubyを学ぶ方法またはステマ乙</title>
   <link href="http://melborne.github.io/2013/12/24/why-not-start-ruby"/>
   <updated>2013-12-24T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2013/12/24/why-not-start-ruby</id>
   <content type="html">&lt;p&gt;そろそろ軽くRubyをやってみたいけどなんか情報多すぎてどこから手を付けたらいいかわからない、リファレンス的なものとか言語論的なものとかコミュニティー的なものとかの情報は結構あるけど、もっとカジュアルでかと言ってどの言語でも使いまわせる的な説明じゃなくRubyらしさが浮き出てるようなもので、しかもちょっとしたCLIツールとかWebアプリとかを作れる程度に理解の手助けをしてくれるものがほしいけど、今の段階で大枚叩きたくないしという人向けに僕がRubyの道案内を致します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/20131224ruby_pack8.html&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_pack8.png&quot; alt=&quot;ruby_pack8&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;ステップ１（所要時間：０〜１０分、投資額：０円）&lt;/h2&gt;

&lt;p&gt;あなたのコンピュータでRuby2系を使えるようにします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Macなひと =&gt; Mavericksをインストールする。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windowsなひと =&gt; &lt;a href=&quot;http://rubyinstaller.org/&quot; title=&quot;RubyInstaller for Windows&quot;&gt;RubyInstaller for Windows&lt;/a&gt;でRuby2系をインストールする。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linuxなひと =&gt; ご自由に。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ターミナルを開いて以下のようにして確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% ruby -v
ruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-darwin12.2.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同時に&lt;code&gt;irb&lt;/code&gt;という対話型実行環境が導入されているはずです。ためしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% irb
irb(main):001:0&amp;gt; 123 ** 100
=&amp;gt; 97838805977257474352566705351629014033137938449734350966526074342064414099511156930426773522415958061389200997320437636836296142253482249885877442849062074323416253749444792245426920843456133929113701176246001
irb(main):002:0&amp;gt; Math.sqrt 5
=&amp;gt; 2.23606797749979
irb(main):003:0&amp;gt; puts &quot;hello, world!&quot;
hello, world!
=&amp;gt; nil
irb(main):004:0&amp;gt; [&quot;Madrid&quot;, &quot;Tokyo&quot;, &quot;Istanbul&quot;].find {|city| city.start_with?(&quot;T&quot;)}
=&amp;gt; &quot;Tokyo&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2&gt;ステップ２（所要時間：５分、投資額：０円）&lt;/h2&gt;

&lt;p&gt;以下のスライドを見ながら自らもirbを叩いて、Rubyのオブジェクト指向を感じる。&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;50432e8fd956d50002024bc2&quot; data-ratio=&quot;1.2945638432364097&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;Web版はこちらを。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://learn-ruby-from-one.herokuapp.com/#1&quot; title=&quot;Learn Ruby from One&quot;&gt;「１から始めるRuby」 on Heroku&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2&gt;ステップ３（所要時間：30分、投資額：100円）&lt;/h2&gt;

&lt;p&gt;上のスライドを見てRubyに興味を持てたなら、M&#39;ELBORNE出版&lt;sup id=&#39;fnref:1&#39;&gt;&lt;a href=&#39;#fn:1&#39; rel=&#39;footnote&#39;&gt;1&lt;/a&gt;&lt;/sup&gt;から出ている以下の電子書籍を買って読みます:-)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;/books/20121201start_ruby.html&quot;&gt;
  &lt;img src=&quot;/assets/images/2012/start_ruby.jpg&quot; alt=&quot;start_ruby&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gum.co/RjRO&quot; class=&quot;gumroad-button&quot;&gt;電子書籍「これからRubyを始める人たちへ」EPUB版&lt;/a&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad-button.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;上のリンクはGumroadにおける商品購入リンクになっています。クリックすると、オーバーレイ・ウインドウが立ち上がって、この場でクレジットカード決済による購入が可能です。購入にはクレジット情報およびメールアドレスの入力が必要になります。購入すると、入力したメールアドレスにコンテンツのDLリンクが送られてきます。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文庫本にして50頁ほどの短い本ですが、そのなかで簡単なRubyスクリプトの作成、Webアプリの作成、Rubyにおけるクラス構造の説明、メタプログラミングについてちょっと、オススメ紙本の紹介と欲張りな内容となっています。&lt;/p&gt;

&lt;p&gt;事前に内容を確かめたい方、100円が大枚だという方はこちらへ。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2012/04/09/to-newbie/&quot; title=&quot;これからRubyを始める人たちへ&quot;&gt;これからRubyを始める人たちへ&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;電子本で読みたいけど、&lt;a href=&quot;http://www.amazon.co.jp/Amazon-53-000955-Kindle-Paperwhite%EF%BC%88%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%A2%E3%83%87%E3%83%AB%EF%BC%89/dp/B00CTUMNAO&quot; title=&quot;Kindle Paperwhite&quot;&gt;Kindle Paperwhite&lt;/a&gt;をお持ちでない方はこちらをインストールして。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/feature.html/ref=amb_link_361458882_3?ie=UTF8&amp;amp;docId=1000493771&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=center-6&amp;amp;pf_rd_r=0MKXT4XT3WDHGDFHQS4R&amp;amp;pf_rd_t=1401&amp;amp;pf_rd_p=1354791822&amp;amp;pf_rd_i=1000464931&quot; title=&quot;Amazon.com: Free Kindle Reading Apps&quot;&gt;Amazon.com: Free Kindle Reading Apps&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;ステップ４（所要時間：30分、投資額：100円）&lt;/h2&gt;

&lt;p&gt;上の書籍を読んでRubyにさらに興味が出てRubyでオブジェクト指向したいと思ったら、M&#39;ELBORNE出版から出ている以下の電子書籍を買って読みます:-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/20130207understand_ruby_object.html&quot;&gt;
  &lt;img src=&quot;/assets/images/2013/02/ruby_object_cover.png&quot; alt=&quot;ruby_object&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gum.co/zxUk&quot; class=&quot;gumroad-button&quot;&gt;電子書籍「オブジェクトの理解から始めるRuby」EPUB版&lt;/a&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad-button.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;文庫本にして50頁ほどの短い本ですが、Rubyにおけるクラス、モジュール、オブジェクトの基本的事項をやさしく楽しい例と共に学べる内容になっています。&lt;/p&gt;

&lt;p&gt;事前に内容を確かめたい方、100円が大枚だという方はこちらへ。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2013/02/07/understand-ruby-object/&quot; title=&quot;Rubyを始めたけど今ひとつRubyのオブジェクト指向というものが掴めないという人、ここに来て見て触って！&quot;&gt;Rubyを始めたけど今ひとつRubyのオブジェクト指向というものが掴めないという人、ここに来て見て触って！&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;ステップ５（所要時間：50分、投資額：100円）&lt;/h2&gt;

&lt;p&gt;上の書籍を読んでRubyやりたいからなんか簡単なチュートリアルがほしいと思ったら、M&#39;ELBORNE出版から出ている以下の電子書籍を買って読みます:-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/20130426ruby_tutorial.html&quot;&gt;
  &lt;img src=&quot;/assets/images/2013/04/ruby_tutorial_cover.png&quot; alt=&quot;ruty_tutorial&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gum.co/DBgJ&quot; class=&quot;gumroad-button&quot;&gt;電子書籍「Rubyチュートリアル ～英文小説の最頻出ワードを見つけよう!」EPUB/MOBI版&lt;/a&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad-button.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;文庫本にして170頁ほどの短い本ですが、英文小説の最頻出ワードを見つけるプログラムの作成を通してRubyの基礎を楽しく学ぶチュートリアルです。最初のプログラムの改善（ときには改悪）をこれでもかこれでもかと繰り返し（バージョン1〜29）その過程でRubyの書き方を学ぶものとなっています。&lt;/p&gt;

&lt;p&gt;チュートリアルなげーよという方は、Rubyの特徴の説明が書かれた１章は読んで２章のチュートリアルは適当に切り上げて次のステップ６へどうぞ。&lt;/p&gt;

&lt;p&gt;事前に内容を確かめたい方、100円が大枚だという方はこちらへ。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2013/04/26/find-most-frequently-words-with-ruby/&quot; title=&quot;Rubyチュートリアル ─ 英文小説の最頻出ワードを見つけよう! ─&quot;&gt;Rubyチュートリアル ─ 英文小説の最頻出ワードを見つけよう! ─&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;ステップ６（所要時間：30分、投資額：100円）&lt;/h2&gt;

&lt;p&gt;上の書籍を読んでRubyいいよでも遅いよねと思っているなら、M&#39;ELBORNE出版から出ている以下の電子書籍を買って読みます:-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/20121213ruby_parallelize.html&quot;&gt;
  &lt;img src=&quot;/assets/images/2012/ruby_parallel_cover.png&quot; alt=&quot;ruby_parallel&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gum.co/PjVk&quot; class=&quot;gumroad-button&quot;&gt;電子書籍「irbから学ぶRubyの並列処理 ~ forkからWebSocketまで」EPUB版 &lt;/a&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad-button.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;文庫本にして30頁ほどの短い本ですが、チュートリアルに沿ってRubyの並列処理の基礎を理解する内容になっています。本書を読めばRubyのfork、Thread、Reactor、EventMachine、WebSocketの基本的な使い方を学べます。&lt;/p&gt;

&lt;p&gt;事前に内容を確かめたい方、100円が大枚だという方はこちらへ。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2011/09/29/irb-Ruby-fork-WebSocket/&quot; title=&quot;irbから学ぶRubyの並列処理 ~ forkからWebSocketまで&quot;&gt;irbから学ぶRubyの並列処理 ~ forkからWebSocketまで&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;ステップ７（所要時間：40分、投資額：100円）&lt;/h2&gt;

&lt;p&gt;上の書籍を読んでRubyやるやるTipsも知りたいよと思っているなら、M&#39;ELBORNE出版から出ている以下の電子書籍を買って読みます:-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/20130304ruby_trivia.html&quot;&gt;
  &lt;img src=&quot;/assets/images/2013/03/ruby_trivia_cover.png&quot; alt=&quot;trivia&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gum.co/owIqH&quot; class=&quot;gumroad-button&quot;&gt;電子書籍「知って得する！５５のRubyのトリビアな記法」EPUB/MOBI版&lt;/a&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad-button.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;文庫本にして120頁ほどの短い本ですが、実用的なTips、役に立たないトリビアを次から次へと紹介して読者を「へぇ」とか「ほぅ」とか言わせる内容になっています。&lt;/p&gt;

&lt;p&gt;事前に内容を確かめたい方、100円が大枚だという方はこちらへ。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2013/03/04/ruby-trivias-you-should-know-4/&quot; title=&quot;知って得する！５５のRubyのトリビアな記法&quot;&gt;知って得する！５５のRubyのトリビアな記法&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;ステップ８（所要時間：50分、投資額：100円）&lt;/h2&gt;

&lt;p&gt;上の書籍を読んでRubyでWebアプリやりたいと思っているなら、M&#39;ELBORNE出版から出ている以下の電子書籍を買って読みます:-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/20121224lerning_rack.html&quot;&gt;
  &lt;img src=&quot;/assets/images/2012/rack_cover.png&quot; alt=&quot;rack&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gum.co/ZqRt&quot; class=&quot;gumroad-button&quot;&gt;電子書籍「エラーメッセージから学ぶRack」EPUB版 &lt;/a&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad-button.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;RackはRailsやSinatraなどのWebフレームワークでも採用されている、WebサーバーとWebアプリを繋ぐ重要なコンポーネントです。本書は文庫本にして145頁ほどの短い本ですが、rackupコマンドの実行に対するエラー出力を追っていきながら、Rackを学ぶチュートリアルになっています。&lt;/p&gt;

&lt;p&gt;事前に内容を確かめたい方、100円が大枚だという方はこちらへ。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2012/08/02/build-your-own-web-framework-with-rack/&quot; title=&quot;エラーメッセージから学ぶRack - 最初の一歩&quot;&gt;エラーメッセージから学ぶRack - 最初の一歩&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;ステップ９（所要時間：30分、投資額：105円）&lt;/h2&gt;

&lt;p&gt;上の書籍を読んでRackで動的サイトもいいけどブログとかには簡単に構築できる静的サイトがいいよねと思っているなら、M&#39;ELBORNE出版から出ている以下の電子書籍を買って読みます:-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/20121207jekyll.html&quot;&gt;
  &lt;img src=&quot;/assets/images/2013/05/jk/jekyll_cover.png&quot; alt=&quot;rack&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gum.co/xfJY&quot; class=&quot;gumroad-button&quot;&gt;電子書籍「30分のチュートリアルでJekyllを理解する」EPUB/MOBI版&lt;/a&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Jekyllはブログのような静的サイトを構築するためのRuby製ファイルジェネレータです。本書は文庫本にして75頁ほどの短い本ですが、ブログサイトの構築を通してJekyllの基礎を学ぶチュートリアルになっています。ちなみに本ブログもJekyllを使ってgithub上に構築されています。&lt;/p&gt;

&lt;p&gt;事前に内容を確かめたい方、100円が大枚だという方はこちらへ。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2013/05/20/now-the-time-to-start-jekyll/&quot; title=&quot;Jekyllいつやるの？ジキやルの？今でしょ！&quot;&gt;Jekyllいつやるの？ジキやルの？今でしょ！&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;ステップ１０（所要時間：40分、投資額：100円）&lt;/h2&gt;

&lt;p&gt;上の書籍を読んでRubyもいいけどWebアプリやってるとJavaScriptの理解も大事だよねと思っているなら、M&#39;ELBORNE出版から出ている以下の電子書籍を買って読みます:-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/20121215js_oop.html&quot;&gt;
  &lt;img src=&quot;/assets/images/2012/js_oop_cover.png&quot; alt=&quot;js_oop&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gum.co/wNxf&quot; class=&quot;gumroad-button&quot;&gt;電子書籍「Ruby脳が理解するJavaScriptのオブジェクト指向」EPUB版 &lt;/a&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad-button.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;本書は文庫本にして115頁ほどの短い本ですが、Rubyにおけるオブジェクト指向と対比しながらJavaScriptのオブジェクト指向を学ぶチュートリアルになっています。&lt;/p&gt;

&lt;p&gt;事前に内容を確かめたい方、100円が大枚だという方はこちらへ。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2012/09/09/understand-js-oop-with-ruby-brain/&quot; title=&quot;Ruby脳が理解するJavaScriptのオブジェクト指向&quot;&gt;Ruby脳が理解するJavaScriptのオブジェクト指向&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;ステップ１１（所要時間：３００分、投資額：500円）&lt;/h2&gt;

&lt;p&gt;ここまで読んでRubyはやる気があるけど言う通りにやったらお前に８００円も払わなならんのか気に食わんと思ったなら、M&#39;ELBORNE出版から出ている先の８冊をパッケージにした「電子書籍「Ruby入門パッケージ８」EPUB/MOBI版」(500円)を買って読みます:-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/20131224ruby_pack8.html&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_pack8.png&quot; alt=&quot;ruby_pack8&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gum.co/WwoyT&quot; class=&quot;gumroad-button&quot;&gt;電子書籍「Ruby入門パッケージ８」EPUB/MOBI版&lt;/a&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2&gt;ステップ１２（所要時間：∞分、投資額：∞円）&lt;/h2&gt;

&lt;p&gt;ここまで読んでRubyやるけどもっとまともな電子書籍ないのと思ってるなら、僕が１年前に書いた以下の記事を読みます:-)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2012/12/25/ebooks-for-learning-ruby/&quot; title=&quot;今年の冬休みに電子書籍であなたがRubyを習得しなければいけないたった一つの理由&quot;&gt;今年の冬休みに電子書籍であなたがRubyを習得しなければいけないたった一つの理由&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;ステップ１３（所要時間：60分、投資額：０〜Amazon出品者の気分円）&lt;/h2&gt;

&lt;p&gt;ここまで読んで本気でRubyやりたいからRubyの言語仕様の要点を端的に正確にちょっと古くてもいいから知りたいと思ってるなら、青木峰郎さんが書かれた以下の絶版本（通称RHG）の第１章と第８章を読みます。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://i.loveruby.net/ja/rhg/book/&quot; title=&quot;Rubyソースコード完全解説&quot;&gt;Rubyソースコード完全解説&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://i.loveruby.net/ja/rhg/book/minimum.html&quot; title=&quot;第1章 Ruby言語ミニマム&quot;&gt;第1章 Ruby言語ミニマム&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://i.loveruby.net/ja/rhg/book/spec.html&quot; title=&quot;第8章 Ruby言語の詳細&quot;&gt;第8章 Ruby言語の詳細&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/Rubyソースコード完全解説-青木-峰郎/dp/4844317210?SubscriptionId=06WK2XPKDH9TJJ979P02&amp;tag=keyesblog05-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=4844317210&quot;&gt;&lt;img class=&quot;amazon&quot; src=&quot;http://ecx.images-amazon.com/images/I/51MQAYG70TL._SL160_.jpg&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.amazon.co.jp/Rubyソースコード完全解説-青木-峰郎/dp/4844317210?SubscriptionId=06WK2XPKDH9TJJ979P02&amp;tag=keyesblog05-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=4844317210&quot;&gt;Rubyソースコード完全解説&lt;/a&gt; by 青木 峰郎&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;僕からは以上です。&lt;/p&gt;

&lt;p&gt;Merry Christmas!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
    &lt;ol&gt;
        &lt;li id=&#39;fn:1&#39;&gt;M&#39;ELBORNE出版はブログの記事を電子書籍化して販売する僕の実験的プロジェクトです。 &lt;a href=&#39;#fnref:1&#39; rev=&#39;footnote&#39;&gt;↩&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/div&gt;



</content>
 </entry>
 
 <entry>
   <title>「Macのターミナルで雪が降る」をカラー化した。翻訳した。</title>
   <link href="http://melborne.github.io/2013/12/13/translate-let-it-snow-in-the-terminal"/>
   <updated>2013-12-13T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2013/12/13/translate-let-it-snow-in-the-terminal</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/RyoAnna/20131211/1386769871&quot; title=&quot;Macのターミナルで雪が降る ～ 最後のホワイトクリスマス - #RyoAnnaBlog&quot;&gt;こちらの記事&lt;/a&gt;でターミナルで雪を降らせるRubyスクリプトを知る。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://osxdaily.com/2013/12/06/snow-terminal-mac-os-x-command/&quot; title=&quot;Let it Snow in the Terminal of Mac OS X with This Command&quot;&gt;Let it Snow in the Terminal of Mac OS X with This Command&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;そのスクリプト。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &#39;C=`stty size`.scan(/\d+/)[1].to_i;S=[&quot;2743&quot;.to_i(16)].pack(&quot;U*&quot;);a={};puts &quot;\033[2J&quot;;loop{a[rand(C)]=0;a.each{|x,o|;a[x]+=1;print &quot;\033[#{o};#{x}H \033[#{a[x]};#{x}H#{S} \033[0;0H&quot;};$stdout.flush;sleep 0.1}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;感動した。&lt;/p&gt;

&lt;p&gt;カラー化した。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &#39;C=`stty size`.scan(/\d+/)[1].to_i;S=[&quot;2743&quot;.to_i(16)].pack(&quot;U*&quot;);a={};puts &quot;\033[2J&quot;;loop{a[rand(C)]=0;a.each{|x,o|;a[x]+=1;print &quot;\033[#{o};#{x}H \033[#{[*31..37].sample}m \033[#{a[x]};#{x}H#{S} \033[0;0H \033[0m&quot;};$stdout.flush;sleep 0.1}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://gifzo.net/7WE3pRFQzH.gif&quot; alt=&quot;snow noshadow&quot; /&gt;
Hosted by &lt;a href=&quot;http://gifzo.net/&quot; title=&quot;Gifzo - 宇宙一簡単なスクリーンキャスト共有&quot;&gt;Gifzo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;雪じゃない。&lt;/p&gt;

&lt;p&gt;翻訳もした。&lt;/p&gt;

&lt;div&gt;&lt;script src=&#39;https://gist.github.com/7928434.js?file=&#39;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;You are being &amp;lt;a href=&amp;quot;https://github.com/gist/7928434&amp;quot;&amp;gt;redirected&amp;lt;/a&amp;gt;.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;



</content>
 </entry>
 
 <entry>
   <title>Ruby製WebSocketアプリを最速でHerokuにデプロイする５つのステップ</title>
   <link href="http://melborne.github.io/2013/12/13/minimum-step-for-deplying-websocket-app-to-heroku"/>
   <updated>2013-12-13T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2013/12/13/minimum-step-for-deplying-websocket-app-to-heroku</id>
   <content type="html">&lt;p&gt;「テレビ放送が駄目になった」と言われて久しいですがその理由ははっきりしています。それは放送というものがリアルタイム・コンテンツを扱う媒体だからです。リアルタイム・コンテンツはユーザの自由を奪います。ある番組を見るためにユーザはその時間テレビの前に固定化されます。録画放送番組は字義的にはバッファード・コンテンツ&lt;sup id=&#39;fnref:1&#39;&gt;&lt;a href=&#39;#fn:1&#39; rel=&#39;footnote&#39;&gt;1&lt;/a&gt;&lt;/sup&gt;と言えますが、ユーザがそのコントロール権を持っていないつまりその視聴タイミングの制御を製作者側が持っているので、これはリアルタイム・コンテンツなのです。ユーザの唯一の武器はDVDレコーダによる制約の中のローカルバファリングのみです。&lt;/p&gt;

&lt;p&gt;現在の&lt;strong&gt;Web&lt;/strong&gt;は主としてバッファード・コンテンツを扱う媒体です。バッファード・コンテンツの世界ではユーザは好きな時間に好きなだけコンテンツを視聴できるという自由が与えられます。コンテンツの製作者側・提供者側にそのタイミングをコントロールする自由はありません。ユーザがコンテンツのコントロール権を持っている世界、それが&lt;strong&gt;Web&lt;/strong&gt;なのです。&lt;/p&gt;

&lt;p&gt;その一方でWebにも変化が訪れています。&lt;strong&gt;体験の共有&lt;/strong&gt;に対する回帰です。リアルタイム・コンテンツの消費からバッファード・コンテンツの消費への移行でユーザが失ったもの、それが&lt;strong&gt;体験の共有&lt;/strong&gt;です。体験の共有はコンテンツに対する消費の同時性つまりリアルタイム性を要求します。前述のようにこれはユーザにとっての制約です。しかしユーザは今、この制約の一部を受け入れてでもWeb上での体験の共有を求めるようになってきています。その結果としてWeb上のコンテンツもバッファード・コンテンツから偽リアルタイム・コンテンツにその一部が変質しつつあります。テキストコンテンツは頁という概念を失い、リアルタイム・コミュニケーションのために140文字の言葉のかけらに圧縮されました。&lt;/p&gt;

&lt;p&gt;この変化をWebがすべてを飲み込んでいると見ることもできるでしょう。結局、この世界では誰もコントロール権など持っていない（いらない）、そう理解するのが正しいのかもしれません。&lt;/p&gt;

&lt;p&gt;とか。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;そんなわけで、WebSocketです。WebSocketはWebの世界で真のリアルタイムを実現します。そしてその準備は整いつつあります。&lt;/p&gt;

&lt;p&gt;まずは体験です。さあ、次のリンクをクリックして真のリアルタイムの世界を、体験の共有を味わってください！&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://typewr.herokuapp.com/&quot; title=&quot;Typewr&quot;&gt;Typewr&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;使い方の説明はこちら。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;/2013/12/10/is-this-chat-or-typewriter/&quot; title=&quot;チャット？　タイプライター？　音？　何？&quot;&gt;チャット？　タイプライター？　音？　何？&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;スイマセン...遊びに来てくれる人が少なくて...宣伝...。&lt;/p&gt;

&lt;p&gt;まあ、でもこれがWebSocketによるリアルタイムWebの一サンプルです。リアルタイムWebの世界は未開拓の地です。発想次第でユニークなものが生まれる可能性があります。&lt;/p&gt;

&lt;h2&gt;Ruby製WebSocketアプリを最速でHerokuにデプロイする５つのステップ&lt;/h2&gt;

&lt;p&gt;さて、ここからが本題です。ふぅ。&lt;/p&gt;

&lt;p&gt;Herokuでは現在試験的機能として、WebSocketを可能にするオプションが用意されています。これを使うと&lt;a href=&quot;http://pusher.com/&quot; title=&quot;Pusher | HTML5 WebSocket Powered Realtime Messaging Service&quot;&gt;Pusher&lt;/a&gt;などの外部サービスに頼らずに、HerokuでホスティングされるWebアプリ上でWebSocketの機能を実現できるようになります。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-labs-websockets&quot; title=&quot;Heroku Labs: WebSockets | Heroku Dev Center&quot;&gt;Heroku Labs: WebSockets | Heroku Dev Center&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;加えて、HerokuはRuby（Sinatra）でWebSocketを使ったチャットシステムのサンプル＆デモも公開しています。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/ruby-websockets#deploy&quot; title=&quot;Using WebSockets on Heroku with Ruby | Heroku Dev Center&quot;&gt;Using WebSockets on Heroku with Ruby | Heroku Dev Center&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;で、この記事に従えばWebSocketのアプリを作って公開することが簡単にできるのですが、それでもやっぱり定型的なコードを一つずつ用意するのには骨が折れます。SinatraにはRailsのようなGeneratorもないですし。&lt;/p&gt;

&lt;p&gt;そんなわけで...。&lt;/p&gt;

&lt;p&gt;SinatraでWebSocketを作る際のスケルトンを生成する&lt;code&gt;Sinatra-websocket-template&lt;/code&gt;というGemを作りました:-)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/sinatra_websocket_template&quot; title=&quot;sinatra_websocket_template | RubyGems.org | your community gem host&quot;&gt;sinatra_websocket_template | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/melborne/sinatra-websocket-template&quot; title=&quot;melborne/sinatra-websocket-template&quot;&gt;melborne/sinatra-websocket-template&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Sinatra-websocket-template&lt;/code&gt;は、&lt;code&gt;bundle gem PROJECT&lt;/code&gt;で生成されるファイル群に加えて、上記記事を参考にしたWebSocketに必要なファイル群を生成、出力します。ファイルにはWebSocketを実現するサンプルコードが載っているので、コードを一行も書くこと無くWebSocketの体験ができます。&lt;/p&gt;

&lt;p&gt;以下では、このGemを使ってWebSocketアプリを作る手順および作ったWebアプリをHerokuにデプロイする手順を説明します。&lt;/p&gt;

&lt;h2&gt;STEP1: Sinatra-websocket-templateのインストール&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Sinatra-websocket-template&lt;/code&gt;をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% gem install sinatra_websocket_template
Fetching: sinatra_websocket_template-0.0.1.gem (100%)
Successfully installed sinatra_websocket_template-0.0.1
1 gem installed
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;STEP2: プロジェクトの生成&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sinatra_websocket_template&lt;/code&gt;コマンドを実行してサブコマンドを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sinatra_websocket_template
Commands:
  sinatra_websocket_template help [COMMAND]  # Describe available commands or one specific command
  sinatra_websocket_template new PROJECT     # Creates a skeleton for your project
  sinatra_websocket_template version         # Prints the SinatraWebsocketTemplate&#39;s version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;new&lt;/code&gt;サブコマンドにプロジェクトの名前を渡して、プロジェクトのスケルトンを生成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sinatra_websocket_template new hello_chat
      create  hello_chat/Procfile
      create  hello_chat/config.ru
      create  hello_chat/lib/app.rb
      create  hello_chat/lib/views/index.haml
      create  hello_chat/lib/public/css/main.css
      create  hello_chat/lib/public/js/application.js
      create  hello_chat/lib/hello_chat/backend.rb
      create  hello_chat/Gemfile
      create  hello_chat/Rakefile
      create  hello_chat/LICENSE.txt
      create  hello_chat/README.md
      create  hello_chat/.gitignore
      create  hello_chat/hello_chat.gemspec
      create  hello_chat/lib/hello_chat.rb
      create  hello_chat/lib/hello_chat/version.rb
Initializating git repo in /Users/keyes/Dropbox/playground/hello_chat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクトのディレクトリに移動して、生成されたファイル群を確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cd hello_chat
/hello_chat% tree
.
├── Gemfile
├── LICENSE.txt
├── Procfile
├── README.md
├── Rakefile
├── config.ru
├── hello_chat.gemspec
└── lib
    ├── app.rb
    ├── hello_chat
    │   ├── backend.rb
    │   └── version.rb
    ├── hello_chat.rb
    ├── public
    │   ├── css
    │   │   └── main.css
    │   └── js
    │       └── application.js
    └── views
        └── index.haml

6 directories, 14 files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;折角だから、「&lt;a href=&quot;https://rubygems.org/gems/dir_friend&quot; title=&quot;dir_friend&quot;&gt;dir_friend&lt;/a&gt;」を使って、ビジュアライズもします:-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% dir_friend dot .
&#39;a.dot&#39; created in the current directory.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/12/hello_chat1.png&quot; alt=&quot;hello chat noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（参考：&lt;a href=&quot;/2013/10/31/there-is-a-beauty-in-your-computer/&quot; title=&quot;あなたはファイルシステムに美を見るか？&quot;&gt;あなたはファイルシステムに美を見るか？&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;この中でWebSocketを実現する重要なファイルは、&lt;code&gt;lib/hello_chat/backend.rb&lt;/code&gt;と&lt;code&gt;lib/public/js/application.js&lt;/code&gt;です。中身は後で確認するとして、先に進みます。&lt;/p&gt;

&lt;h2&gt;STEP3: ローカルでのプロジェクトの起動&lt;/h2&gt;

&lt;p&gt;まずは&lt;code&gt;bundle install&lt;/code&gt;します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/hello_chat% bundle install
Fetching gem metadata from https://rubygems.org/...........
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
Using rake (10.1.0)
Using bundler (1.3.5)
Using dotenv (0.9.0)
Using eventmachine (1.0.3)
Using websocket-driver (0.3.1)
Using faye-websocket (0.7.1)
Using thor (0.18.1)
Using foreman (0.63.0)
Using tilt (1.4.1)
Using haml (4.0.4)
Using rack (1.5.2)
Using puma (2.7.1)
Using rack-protection (1.5.1)
Using sinatra (1.4.4)
Using hello_chat (0.0.1) from source at /Users/keyes/Dropbox/playground/hello_chat
hello_chat at /Users/keyes/Dropbox/playground/hello_chat did not have a valid gemspec.
This prevents bundler from installing bins or native extensions, but that may not affect its functionality.
The validation message from Rubygems was:
  &quot;FIXME&quot; or &quot;TODO&quot; is not a description

Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリケーションに必要なGemsがインストールされました。プロセスマネージャのforemanを通してアプリを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/hello_chat% bundle exec foreman start
13:37:24 web.1  | started with pid 18722
13:37:27 web.1  | Puma starting in single mode...
13:37:27 web.1  | * Version 2.7.1, codename: Earl of Sandwich Partition
13:37:27 web.1  | * Min threads: 0, max threads: 16
13:37:27 web.1  | * Environment: development
13:37:27 web.1  | * Listening on tcp://0.0.0.0:5000
13:37:27 web.1  | Use Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5000番ポートでサーバが起動したので、２つのブラウザを起動してアクセスします。&lt;/p&gt;

&lt;p&gt;それぞれのブラウザでページ上のHello!ボタンを交互に押してみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/12/hello_chat2.png&quot; alt=&quot;hello chat noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WebSocketによる通信が成功しています。これでSinatra-websocket-templateで生成されるスケルトンで一応WebSocketが実現できることが確認できました。&lt;/p&gt;

&lt;h2&gt;STEP4: プロジェクトのコードを書く&lt;/h2&gt;

&lt;p&gt;生成されたスケルトンを土台にしてプロジェクトに必要なコードを書きます。あなたの出番です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt;で準備が完了しました。&lt;/p&gt;

&lt;h2&gt;STEP5: Herokuへデプロイ&lt;/h2&gt;

&lt;p&gt;プロジェクトが完成したのでHerokuにアプリを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% heroku create hellochat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Heroku上のWebSocketの機能を有効にします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% heroku labs:enable websockets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デプロイです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% git push heroku master
% heroku open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで完了です。&lt;/p&gt;

&lt;h2&gt;backend.rbとapplication.jsの中身&lt;/h2&gt;

&lt;p&gt;スケルトンにおける&lt;code&gt;backend.rb（WebSocketにおけるサーバー側）&lt;/code&gt;と&lt;code&gt;application.js（クライアント側）&lt;/code&gt;の中身だけ確認してみます。&lt;/p&gt;

&lt;p&gt;backend.rbはRackのミドルウェアとして構成されています。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# backend.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;faye/websocket&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;HelloChat&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Backend&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;KEEPALIVE_TIME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@clients&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Faye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:WebSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;websocket?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Faye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:WebSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KEEPALIVE_TIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@clients&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:message&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:close&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rack_response&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;クライアント側からの通信がWebSocketに係る場合、Backend#callでそのイベントをソケット側にハイジャックし（Faye::WebSocket.websocket?(env)）、ここでそのイベントに応じた処理を返します。例えば、クライアント側からWebSocketに係るメッセージが送信されてきた場合は、これを&lt;code&gt;ws.on :message&lt;/code&gt;で受けて、そのメッセージを全クライントにブロードキャストしています。また、クライアントが立ち上げられたときは、これを&lt;code&gt;ws.on :open&lt;/code&gt;で受けて、そのクライアントに自身の識別ID（object_id）を返すと共に、クライアントの総数をブロードキャストしています。&lt;/p&gt;

&lt;p&gt;次に、&lt;code&gt;application.js&lt;/code&gt;のコードを見ます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// application.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counterRefresh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#user-counter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appendMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#message-box&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;div class=&amp;#39;message&amp;#39;&amp;gt;&amp;lt;span class=&amp;#39;user-id&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;:&amp;lt;/span&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#count-button&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^http/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ws&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;myid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;my-message&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;appendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counterRefresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;クライアント側では、WebSocketオブジェクトを生成して&lt;code&gt;ws.onmessage&lt;/code&gt;にサーバー側からのメッセージを受けたときの処理を登録しています。そして受信データに含まれるプロパティに応じて処理を切り分けています。また、&lt;code&gt;Hello!&lt;/code&gt;ボタンがクリックされたときに,&lt;code&gt;ws.send(data)&lt;/code&gt;でサーバー側にメッセージを送信します。&lt;/p&gt;

&lt;p&gt;以上で、説明は終わりです。&lt;/p&gt;

&lt;p&gt;是非とも&lt;code&gt;Sinatra-websocket-template&lt;/code&gt;をベースに何か面白いものを作ってくださいね。&lt;/p&gt;

&lt;hr /&gt;

&lt;p style=&#39;color:red&#39;&gt;=== Ruby関連電子書籍100円で好評発売中！ ===&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/2012/ruby_parallel_cover.png&quot; alt=&quot;ruby_parallel&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/2012/rack_cover.png&quot; alt=&quot;rack&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/2012/js_oop_cover.png&quot; alt=&quot;js_oop&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
    &lt;ol&gt;
        &lt;li id=&#39;fn:1&#39;&gt;今勝手に考えた造語です。ユーザがランダムアクセス可能なリソースをイメージしています。 &lt;a href=&#39;#fnref:1&#39; rev=&#39;footnote&#39;&gt;↩&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/div&gt;



</content>
 </entry>
 
 <entry>
   <title>チャット？　タイプライター？　音？　何？</title>
   <link href="http://melborne.github.io/2013/12/10/is-this-chat-or-typewriter"/>
   <updated>2013-12-10T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2013/12/10/is-this-chat-or-typewriter</id>
   <content type="html">&lt;p&gt;前の記事でチャットのようなタイプライターのようなリアルタイムWebアプリ「&lt;a href=&quot;http://typewr.herokuapp.com/&quot; title=&quot;Typewr&quot;&gt;Typewr&lt;/a&gt;」を紹介しました。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2013/12/09/typewr-new-style-chat-with-websocket/&quot; title=&quot;WebSocketで実現する未来型チャットシステム?!&quot;&gt;WebSocketで実現する未来型チャットシステム?!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://typewr.herokuapp.com/&quot; title=&quot;Typewr&quot;&gt;Typewr&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;で、今回これにタイプ音を付けてみましたのでお知らせします。タイプライター経験者も未経験者も是非ともその感覚を味わってください。&lt;/p&gt;

&lt;p&gt;一応、使い方と注意点を書いておきます。&lt;/p&gt;

&lt;h2&gt;Typewrの使い方と注意点&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ブラウザ上でタイプするとタイプ音とともに一つの表示領域に文字が入力されていきます。タイプした文字はそのページを開いている他のユーザの表示領域にも同じように表示されます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;複数のユーザからの入力があると文字が混在して先の表示領域に入力されていきます。ユーザ毎に異なる文字色が使われるので、それによって辛うじてユーザ単位の入力が識別できます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vimperatorなどのキー入力を奪うExtensionを使っている場合は、これをOFFにする必要があります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文字を消すにはBackSpace（delete）キーを押します。BackSpaceを押し続けると他の人の入力を含めて文字が一つづつ消されていきます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ChromeではBackSpaceは「戻る」に固定され、変更できません。自分の環境（Mac）では代わりに&lt;code&gt;Ctrl+h&lt;/code&gt;が使えているのですが、使えない人もいるようです。解決策は今のところありません。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FireFoxでもBackSpaceは「戻る」ですが、設定でこれを無効にすることができます。設定方法は以下の記事が参考になります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SafariではBackSpaceもCtrl+hも効いています。IEについてはわかりません。ごめんなさい。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://mozilla-remix.seesaa.net/article/128191783.html&quot; title=&quot;Mozilla Re-Mix: Firefoxで[Backspace]キーを押したときの挙動を変更する方法。&quot;&gt;Mozilla Re-Mix: Firefoxで[Backspace]キーを押したときの挙動を変更する方法。&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>WebSocketで実現する未来型チャットシステム?!</title>
   <link href="http://melborne.github.io/2013/12/09/typewr-new-style-chat-with-websocket"/>
   <updated>2013-12-09T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2013/12/09/typewr-new-style-chat-with-websocket</id>
   <content type="html">&lt;p&gt;Herokuで&lt;a href=&quot;http://pusher.com/&quot; title=&quot;Pusher | HTML5 WebSocket Powered Realtime Messaging Service&quot;&gt;Pusher&lt;/a&gt;を使わずにWebSocketが利用できるということを知ったので&lt;a href=&quot;https://devcenter.heroku.com/articles/ruby-websockets&quot; title=&quot;Using WebSockets on Heroku with Ruby | Heroku Dev Center&quot;&gt;ここ&lt;/a&gt;を参考に面白いものできないかと弄ってたらなんか不思議なチャットシステム？が出来上がったので暇で誰か知らない人と匿名でチャットというかタイピングのやりとりというか邪魔し合いというかまあ恐らく未体験な人と人との繋がりの類を経験したい方居られましたら是非とも来て見て触ってみてできたら感想などをTwitterとかでつぶやいてくれたら大変にうれしく思います。VimperatorとかのExtensionをOFFにして。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://typewr.herokuapp.com/&quot; title=&quot;Typewr&quot;&gt;Typewr&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ソースはこちら。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/melborne/typewr&quot; title=&quot;melborne/typewr&quot;&gt;melborne/typewr&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;併せて、Server-sent Eventsを使った姉妹品もどうぞよろしく。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2013/12/06/come-join-ototwe/&quot; title=&quot;つぶやきで合奏したいだと？そんなやつは一昨日（おとつい）きやがれ！&quot;&gt;つぶやきで合奏したいだと？そんなやつは一昨日（おとつい）きやがれ！&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p style=&#39;color:red&#39;&gt;=== Ruby関連電子書籍100円で好評発売中！ ===&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/2012/ruby_parallel_cover.png&quot; alt=&quot;ruby_parallel&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/2012/rack_cover.png&quot; alt=&quot;rack&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/2012/js_oop_cover.png&quot; alt=&quot;js_oop&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>つぶやきで合奏したいだと？そんなやつは一昨日（おとつい）きやがれ！</title>
   <link href="http://melborne.github.io/2013/12/06/come-join-ototwe"/>
   <updated>2013-12-06T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2013/12/06/come-join-ototwe</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.adventar.org/calendars/95&quot;&gt;FuniSaya Advent Calendar 2013&lt;/a&gt;６日目です。昨日は&lt;a href=&quot;http://www.adventar.org/users/1306&quot; title=&quot;あるる 日下部 - Adventar&quot;&gt;あるる 日下部&lt;/a&gt;さんの&lt;a href=&quot;http://arlerlyeh.blog.fc2.com/blog-entry-12.html&quot;&gt;海底都市 冬コミ&lt;/a&gt;でした。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;音楽を作る才能には恵まれなかったので楽器を作ることにしました。「おとつい（OtoTwe）」という楽器です。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://ototwe.herokuapp.com/&quot; title=&quot;OtoTwe&quot;&gt;OtoTwe : http://ototwe.herokuapp.com/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;OtoTweの楽しみ方&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;コンピュータにヘッドホンを繋いで耳に当てる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「&lt;a href=&quot;http://ototwe.herokuapp.com/&quot; title=&quot;OtoTwe&quot;&gt;OtoTwe&lt;/a&gt;」をChromeかFirefoxかSafariで開く。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;いつも使っているTwitterクライアントを起動する（iPhoneとかのもので構いません）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Twitterクライアントで「これが俺の叫びだ！ #ototwe #C3」などと打ち込む。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OtoTweにおける&lt;code&gt;Audiences&lt;/code&gt;の数を横目で確認しつつ&lt;sup id=&#39;fnref:1&#39;&gt;&lt;a href=&#39;#fn:1&#39; rel=&#39;footnote&#39;&gt;1&lt;/a&gt;&lt;/sup&gt;、つぶやきをツイートする。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OtoTweから流れる音に耳を傾ける（表示されるつぶやきを見ながら）。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;または&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;上記1, 2に同じ。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;誰かが上記3〜5に従いツイートするのを辛抱強く待つ。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上記６に同じ。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;または&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;適当な楽曲の適当な小節を選ぶ。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;選んだ小節内の音数に相応する暇な友人を見つける。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小節内の各音を各友人に割り当てる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;楽曲のテンポに基づき各友人のツイート時間を決定する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全員の時計を合わせて指定時間でのツイートを依頼する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;今まで築いてきた友人との信頼関係を信じつつOtoTweの前で時間が来るのを待つ。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;※期待通りの結果が得られないことがあります。&lt;/p&gt;

&lt;h2&gt;ツイートの作法&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;OtoTweで音を鳴らすには、ツイートに二種類のハッシュタグを入れる必要があります。１つはOtoTweを指定する&lt;code&gt;#ototwe&lt;/code&gt;タグです。もう一つは音高を指定するタグです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;音高を指定するタグは、A〜Gの大文字アルファベットと数字の組で表現します。「#A4」は440Hzのラの音を出力します。半音は間に&lt;code&gt;b&lt;/code&gt;を挟んで「#Eb2」のように半音下げて表現します（シャープは使えません）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出力できる音域はG1〜C4です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;音の種類としてはピアノかホルンの音がランダムで出力されます。たまにMusicBox(?)の音も出ます。音の種類を指定したい場合は、音高タグの数字の後にp(ピアノ)かh(ホルン)を付けます（ex. #C3p #A3h）。m(MusicBox)も有効ですが、音域はC3〜C4の幹音に限られています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「#C3Eb3G3」などと複数の音を一度に渡すと、和音や連音が気まぐれで再生されます（実装が悪いためです）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ハッシュタグ以外のツイートの内容は音に影響しませんが、スクリーンネームと共にOtoTwe上で5秒程度晒されます。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;OtoTweのしくみ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/12/ototwe1.png&quot; alt=&quot;ototwe noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OtoTweはHTML5における&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Server-sent_events&quot; title=&quot;Server-sent events | MDN&quot;&gt;Server-sent events&lt;/a&gt;というしくみを使っています。Server-sent eventsでは、サーバーとクライアントのコネクションは維持され、これによりクライアントからのリクエストを待たずに任意のタイミングでサーバー側からデータを投げられるようになります。OtoTweではTwitterのStreaming APIからデータが送られてきたタイミングで全クライアントに向けてデータをブロードキャストしています。&lt;/p&gt;

&lt;p&gt;音の再生はWeb Audio APIを使ってmp3またはoggファイルを読みだして再生しています。もっとスムーズな再生を実現するにはここを工夫する必要があるんでしょうね（JavaScriptむずかしぃ...）。音は初めてのGarageBandでシコシコと作りました。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;ソースは以下にあります。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/melborne/ototwe&quot; title=&quot;melborne/ototwe&quot;&gt;melborne/ototwe&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;どれくらいのコネクションを捌けるのか全くわかりませんけど、固まってたらゴメンナサイ！&lt;/p&gt;

&lt;p&gt;そんなわけで...&lt;/p&gt;

&lt;p&gt;つぶやきで合奏したい人は「&lt;a href=&quot;http://ototwe.herokuapp.com/&quot; title=&quot;OtoTwe&quot;&gt;OtoTwe&lt;/a&gt;」に来てくださいね :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://www.adventar.org/calendars/95&quot;&gt;FuniSaya Advent Calendar 2013&lt;/a&gt; 明日は&lt;a href=&quot;http://www.adventar.org/users/974&quot; title=&quot;りひにー - Adventar&quot;&gt;りひにー&lt;/a&gt;さんです！&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
    &lt;ol&gt;
        &lt;li id=&#39;fn:1&#39;&gt;離席したユーザの更新に著しい遅延があります.. &lt;a href=&#39;#fnref:1&#39; rev=&#39;footnote&#39;&gt;↩&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/div&gt;



</content>
 </entry>
 
 <entry>
   <title>iTuneの音楽ライブラリにアクセスしてCSV化できる「iTunesTrack」の紹介</title>
   <link href="http://melborne.github.io/2013/11/20/introduce-itunestrack-gem"/>
   <updated>2013-11-20T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2013/11/20/introduce-itunestrack-gem</id>
   <content type="html">&lt;p&gt;前の記事では&lt;code&gt;iTunesTrack&lt;/code&gt;を使ってiTunesから音楽データを抽出しWebアプリ化する手順を説明しました。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;/2013/11/19/build-a-database-for-itunes-music-data/&quot; title=&quot;iTunes.appの音楽ライブラリを最速でWebアプリにするたった３つのステップ&quot;&gt;iTunes.appの音楽ライブラリを最速でWebアプリにするたった３つのステップ&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ここでは&lt;code&gt;iTunesTrack&lt;/code&gt;の詳細を説明します。対象バージョンは0.0.1です。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/itunes_track&quot; title=&quot;itunes_track | RubyGems.org | your community gem host&quot;&gt;itunes_track | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/melborne/itunes_track&quot; title=&quot;melborne/itunes_track&quot;&gt;melborne/itunes_track&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;ターミナルでの使い方&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gem install itunes_track&lt;/code&gt;でインストールすると、&lt;code&gt;itunes_track&lt;/code&gt;ターミナルコマンドが使えるようになります。サブコマンドを渡さなければそのヘルプが表示されます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;% itunes_track
Commands:
  itunes_track csv PATH        &lt;span class=&quot;c&quot;&gt;# Create CSV file from tracks data&lt;/span&gt;
  itunes_track &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;COMMAND&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Describe available commands or one specific command&lt;/span&gt;
  itunes_track size &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ARTIST&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# Show track size for ARTIST match&lt;/span&gt;
  itunes_track tracks          &lt;span class=&quot;c&quot;&gt;# Show tracks&lt;/span&gt;
  itunes_track version         &lt;span class=&quot;c&quot;&gt;# Show ItunesTrack version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;size&lt;/code&gt;サブコマンドは、引数で渡したARTISTにマッチするトラックの数を返します。引数を省略すると全楽曲数が返ります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;% itunes_track size sixpence
47
% itunes_track size
1091
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;tracks&lt;/code&gt;サブコマンドは楽曲一覧を表示するもので、&lt;code&gt;--artist&lt;/code&gt;と&lt;code&gt;--album&lt;/code&gt;というオプションを取れます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;% itunes_track &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;tracks
Usage:
  itunes_track tracks

Options:
  -a, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--artist&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ARTIST&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  -l, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--album&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ALBUM&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

Show tracks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;pre&gt;&lt;code&gt;% itunes_track tracks -a sixpence -l &#39;Best Of&#39;
 Kiss Me 3:29 Sixpence None The Richer The Best Of Sixpence None The Richer 36
 Loser Like Me 3:33 Sixpence None The Richer The Best Of Sixpence None The Richer 53
 Need To Be Next To You 4:07 Sixpence None The Richer The Best Of Sixpence None The Richer 51
 Breathe 4:05 Sixpence None The Richer The Best Of Sixpence None The Richer 53
 Dancing Queen 4:02 Sixpence None The Richer The Best Of Sixpence None The Richer 46
 Melody Of You 4:50 Sixpence None The Richer The Best Of Sixpence None The Richer 42
 I Can&#39;t Catch You 4:12 Sixpence None The Richer The Best Of Sixpence None The Richer 38
 I Just Wasn&#39;t Made For These Times 3:02 Sixpence None The Richer The Best Of Sixpence None The Richer 57
 There She Goes 2:43 Sixpence None The Richer The Best Of Sixpence None The Richer 44
 Don&#39;t Dream It&#39;s Over 4:02 Sixpence None The Richer The Best Of Sixpence None The Richer 45
 I Need Love 4:12 Sixpence None The Richer The Best Of Sixpence None The Richer 54
 Breathe Your Name 3:56 Sixpence None The Richer The Best Of Sixpence None The Richer 37
 Us 4:22 Sixpence None The Richer The Best Of Sixpence None The Richer 42
 The Ground You Shook 4:18 Sixpence None The Richer The Best Of Sixpence None The Richer 42
 Too Far Gone 6:37 Sixpence None The Richer The Best Of Sixpence None The Richer 45
 Waiting On The Sun 2:52 Sixpence None The Richer The Best Of Sixpence None The Richer 46
 Brighten My Heart 4:38 Sixpence None The Richer The Best Of Sixpence None The Richer 44
 Trust 3:21 Sixpence None The Richer The Best Of Sixpence None The Richer 44
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;現状、カラー化できていないので非常に見づらいものとなっています^ ^;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csv&lt;/code&gt;サブコマンドは、抽出したトラックデータをCSVファイルに保存するためのコマンドです。対象フィールドを指定する&lt;code&gt;--fields&lt;/code&gt;とアーティストを特定する&lt;code&gt;--artist&lt;/code&gt;オプションがあります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;% itunes_track &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;csv
Usage:
  itunes_track csv PATH

Options:
  -f, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--fields&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;FIELDS&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
                         &lt;span class=&quot;c&quot;&gt;# Default: name,time,artist,album,genre,rating,played_count,year,composer,track_count,track_number,disc_count,disc_number,lyrics&lt;/span&gt;
  -a, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--artist&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ARTIST&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

Create CSV file from tracks data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次のように使います。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;% itunes_track csv sixpence.csv -a sixpence -f name,artist,album,year
I am working on csv...
CSV file successfully created at sixpence.csv.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下のようなファイルが出来上がります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name,artist,album,year
Kiss Me,Sixpence None The Richer,The Best Of Sixpence None The Richer,1999
Loser Like Me,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
Need To Be Next To You,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
Breathe,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
Dancing Queen,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
Melody Of You,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
I Can&#39;t Catch You,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
I Just Wasn&#39;t Made For These Times,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
There She Goes,Sixpence None The Richer,The Best Of Sixpence None The Richer,1997
Don&#39;t Dream It&#39;s Over,Sixpence None The Richer,The Best Of Sixpence None The Richer,2002
I Need Love,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
Breathe Your Name,Sixpence None The Richer,The Best Of Sixpence None The Richer,2002
Us,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
The Ground You Shook,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
Too Far Gone,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
Waiting On The Sun,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
Brighten My Heart,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
Trust,Sixpence None The Richer,The Best Of Sixpence None The Richer,2004
 .
 .
 .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Rubyスクリプトでの使い方&lt;/h2&gt;

&lt;p&gt;ItunesTrackクラスは次のようなクラスメソッドを持っています。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;sx&quot;&gt;% irb &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ritunes_track&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;IRB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruby2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ItunesTrack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [:build, :full_build, :tracks, :itunes, :itunes_tracks, :size, :track_properties, :to_csv]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;.size&lt;/code&gt;メソッドは楽曲数を返しますが、条件を指定したブロックを取ることができます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ItunesTrack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/jazz/i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 66&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ItunesTrack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/hello/i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;rb-appscript&lt;/code&gt;の仕様上、メソッドの最後で&lt;code&gt;get&lt;/code&gt;する必要があります（イケてない）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.build&lt;/code&gt;メソッドは対象のタグ（フィールド）を指定して、ブロックで渡した条件のトラックのリストを生成し&lt;code&gt;tracks&lt;/code&gt;変数に格納します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ItunesTrack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Adele&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;ItunesTrack::Track name=&amp;quot;Daydreamer&amp;quot;, time=&amp;quot;3:40&amp;quot;, artist=&amp;quot;Adele&amp;quot;&amp;gt;, #&amp;lt;ItunesTrack::Track name=&amp;quot;Best For Last&amp;quot;, time=&amp;quot;4:18&amp;quot;, artist=&amp;quot;Adele&amp;quot;&amp;gt;, #&amp;lt;ItunesTrack::Track name=&amp;quot;Chasing Pavements&amp;quot;, time=&amp;quot;3:30&amp;quot;, artist=&amp;quot;Adele&amp;quot;&amp;gt;, #&amp;lt;ItunesTrack::Track name=&amp;quot;Cold Shoulder&amp;quot;, time=&amp;quot;3:11&amp;quot;, artist=&amp;quot;Adele&amp;quot;&amp;gt;, #&amp;lt;ItunesTrack::Track name=&amp;quot;Crazy For You&amp;quot;, time=&amp;quot;3:28&amp;quot;, artist=&amp;quot;Adele&amp;quot;&amp;gt;, #&amp;lt;ItunesTrack::Track name=&amp;quot;Melt My Heart To Stone&amp;quot;, time=&amp;quot;3:23&amp;quot;, artist=&amp;quot;Adele&amp;quot;&amp;gt;, #&amp;lt;ItunesTrack::Track name=&amp;quot;First Love&amp;quot;, time=&amp;quot;3:10&amp;quot;, artist=&amp;quot;Adele&amp;quot;&amp;gt;, #&amp;lt;ItunesTrack::Track name=&amp;quot;Right As Rain&amp;quot;, time=&amp;quot;3:17&amp;quot;, artist=&amp;quot;Adele&amp;quot;&amp;gt;, ... ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;引数を省略した場合、name, time, artist, album, genre, rating, played_count, year, composer, track_count, track_number, disc_count, disc_number, lyricsを対象にリストを生成します。&lt;code&gt;rb-appscript&lt;/code&gt;でアクセス可能なすべてのタグを取得したい場合は&lt;code&gt;build&lt;/code&gt;に代えて&lt;code&gt;full_build&lt;/code&gt;メソッドを使います。楽曲数が多い場合、生成に時間がかかることを覚悟します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.to_csv&lt;/code&gt;メソッドはbuildしたデータをcsvファイルに保存します。第２引数でCSV化するフィールドを更に限定することもできます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ItunesTrack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;adele.csv&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:album&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大体以上です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p style=&#39;color:red&#39;&gt;=== Ruby関連電子書籍100円で好評発売中！ ===&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/2013/02/ruby_object_cover.png&quot; alt=&quot;ruby_object&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/2013/04/ruby_tutorial_cover.png&quot; alt=&quot;ruby_tutorial&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/2013/03/ruby_trivia_cover.png&quot; alt=&quot;ruby_trivia&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 
</feed>

