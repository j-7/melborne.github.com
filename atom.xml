<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>hp12c</title>
 <link href="http://melborne.github.io/atom.xml" rel="self"/>
 <link href="http://melborne.github.io"/>
 <updated>2014-03-01T21:22:48+09:00</updated>
 <id>http://melborne.github.io</id>
 <author>
   <name>kyoendo</name>
   <email>postagie@gmail.com</email>
 </author>

 
 <entry>
   <title>「単語が目に飛び込んできてすごい速度で文章を..」ってやつをRubyで..を改良すると...</title>
   <link href="http://melborne.github.io/2014/03/01/spritz-with-ruby-oneliner-2"/>
   <updated>2014-03-01T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/03/01/spritz-with-ruby-oneliner-2</id>
   <content type="html">&lt;p&gt;動体視力が鍛えられるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &#39;trap(:INT){print&quot;\e[?25h\e[0;0H&quot;;exit(0)};x,y=[`tput lines`,`tput cols`].map{|n|n.to_i/2};print&quot;\e[?25l&quot;;ARGF.read.scan(/\w+/).unshift(*%w(3 2 1 0 Go!)).cycle{|w|c=w.size/2;w=w.dup;cw=w[c];w[c]=&quot;\e[#{rand 31..37}m#{cw}\e[0m&quot;;print&quot;\e[2J\e[#{x+rand(-x/2..x/2)};#{y-c+rand(-y/2..y/2)}H&quot;,w;sleep(0.3)}&#39; TEXT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://gifzo.net/39mml0oplv.gif&quot; alt=&quot;spritz noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hosted by &lt;a href=&quot;http://gifzo.net/&quot; title=&quot;Gifzo - 宇宙一簡単なスクリーンキャスト共有&quot;&gt;Gifzo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;TEXT&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.

Ruby is a language of careful balance. Its creator, Yukihiro “Matz” Matsumoto, blended parts of his favorite languages (Perl, Smalltalk, Eiffel, Ada, and Lisp) to form a new language that balanced functional programming with imperative programming.

He has often said that he is “trying to make Ruby natural, not simple,” in a way that mirrors life.
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/2014/03/01/spritz-with-ruby-oneliner/&quot; title=&quot;「単語が目に飛び込んできてすごい速度で文章を..」ってやつをRubyでやると...&quot;&gt;「単語が目に飛び込んできてすごい速度で文章を..」ってやつをRubyでやると...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;a href=&quot;http://gigazine.net/news/20140228-spritz/&quot; title=&quot;単語が目に飛び込んできてすごい速度で文章を読めるようになる「Spritz」 - GIGAZINE&quot;&gt;単語が目に飛び込んできてすごい速度で文章を読めるようになる「Spritz」 - GIGAZINE&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>「単語が目に飛び込んできてすごい速度で文章を..」ってやつをRubyでやると...</title>
   <link href="http://melborne.github.io/2014/03/01/spritz-with-ruby-oneliner"/>
   <updated>2014-03-01T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/03/01/spritz-with-ruby-oneliner</id>
   <content type="html">&lt;p&gt;こんな感じかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &#39;trap(:INT){print&quot;\e[?25h\e[0;0H&quot;;exit(0)};x,y=[`tput lines`,`tput cols`].map{|n|n.to_i/2};print&quot;\e[?25l&quot;;ARGF.read.scan(/[\w.]+/).unshift(*%w(3 2 1 0 Go!)).cycle{|w|c=w.size/2;w=w.dup;cw=w[c];w[c]=&quot;\e[31m#{cw}\e[0m&quot;;print&quot;\e[2J\e[#{x};#{y-c}H&quot;,w;sleep(0.3)}&#39; TEXT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://gifzo.net/MfXomB9dli.gif&quot; alt=&quot;spritz noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hosted by &lt;a href=&quot;http://gifzo.net/&quot; title=&quot;Gifzo - 宇宙一簡単なスクリーンキャスト共有&quot;&gt;Gifzo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;TEXT&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.

Ruby is a language of careful balance. Its creator, Yukihiro “Matz” Matsumoto, blended parts of his favorite languages (Perl, Smalltalk, Eiffel, Ada, and Lisp) to form a new language that balanced functional programming with imperative programming.

He has often said that he is “trying to make Ruby natural, not simple,” in a way that mirrors life.
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;関連記事：&lt;a href=&quot;/2014/03/01/spritz-with-ruby-oneliner-2/&quot; title=&quot;「単語が目に飛び込んできてすごい速度で文章を..」ってやつをRubyで..を改良すると...&quot;&gt;「単語が目に飛び込んできてすごい速度で文章を..」ってやつをRubyで..を改良すると...&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;a href=&quot;http://gigazine.net/news/20140228-spritz/&quot; title=&quot;単語が目に飛び込んできてすごい速度で文章を読めるようになる「Spritz」 - GIGAZINE&quot;&gt;単語が目に飛び込んできてすごい速度で文章を読めるようになる「Spritz」 - GIGAZINE&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gvizの目次 - Rubyの世界からGraphvizの世界にこんにちは！</title>
   <link href="http://melborne.github.io/2014/02/27/gviz-posts"/>
   <updated>2014-02-27T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/02/27/gviz-posts</id>
   <content type="html">&lt;p&gt;このブログにはGvizに関する大量の記述があるのだけれどもまともにタグ付けされてないサイト検索もできないと非常にアクセスビリティの悪い有り様でまあ本来なら気合を入れてひとつその全体解説たる記事を書き下ろしてここに公開！と宣言してついでにEPUBにまとめて一攫千金と相成りたいところ如何せん筆がぁ筆がぁっつって一向に気持ちがそちら方面に向かわずにおるわけで。&lt;/p&gt;

&lt;p&gt;そこで代わりといってはなんですが「&lt;strong&gt;Gvizの目次 - Rubyの世界からGraphvizの世界にこんにちは！&lt;/strong&gt;」と題して過去の記事をここにまとめて一覧できるように致しましたのでGvizをご利用頂いていていままで右往左往させられていた方あるいは使い方がわからん何が描けるのかわからん全く意味がわからんという方あるいは将来においてGvizに興味を持たれる可能性のある方居られましたら是非ともこのページを基点として各ページに飛んで頂きたくお願い申し上げます。&lt;/p&gt;

&lt;p&gt;っていってそれじゃあまりにあまりお前のゆーざふれんどり精神あるいはおもてなしの心どこいったという精神内紛が勃発惹起されてしまったので仕方なく前置きくらいは書いておくかと書き始めてみたら筆がぁ筆がぁって走りだしてそれなりに長い記事になりましたが最後までお付き合いのほどよろしくね。&lt;/p&gt;

&lt;h2&gt;Graphvizって何？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.graphviz.org/&quot; title=&quot;Graphviz | Graphviz - Graph Visualization Software&quot;&gt;Graphviz&lt;/a&gt;はAT&amp;amp;T研究所が開発したオープンソースのグラフ描画ツールパッケージです。ここでいうグラフはExcelでいうところのグラフではなくグラフ理論でいうところのグラフです。ノードという玉とエッジという線を繋いだ体のもので、依然「&lt;strong&gt;?&lt;/strong&gt;」な人はフローチャートや家系図をイメージしてください。Excelのグラフは数字を比較可能にビジュアライズします。一方で、Graphvizのグラフは「物事の関係性」をビジュアライズします。&lt;/p&gt;

&lt;p&gt;Graphvizは、&lt;a href=&quot;http://ja.wikipedia.org/wiki/DOT%E8%A8%80%E8%AA%9E&quot; title=&quot;DOT言語 - Wikipedia&quot;&gt;&lt;strong&gt;DOT言語&lt;/strong&gt;&lt;/a&gt;という専用言語で記述された物事の関係性を読み込んで、これを描画出力します。png, jpeg, bmp, pdf, svgなど&lt;a href=&quot;http://www.graphviz.org/content/output-formats&quot; title=&quot;Output Formats | Graphviz - Graph Visualization Software&quot;&gt;多様な画像フォーマット&lt;/a&gt;への変換機能を持っています。プラットフォームに合ったものを&lt;a href=&quot;http://www.graphviz.org/Download..php&quot; title=&quot;Download. | Graphviz - Graph Visualization Software&quot;&gt;ここから&lt;/a&gt;ダウンロードして、エディタで以下のようなファイルを書きます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;/* sample.dot */
digraph G {
  GrandpaA -&amp;gt; Papa;
  GrandmaA -&amp;gt; Papa;
  GrandpaB -&amp;gt; Mama;
  GrandmaB -&amp;gt; Mama;
  Papa -&amp;gt; You;
  Mama -&amp;gt; You;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ファイルを開くと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% open sample.dot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Graphvizソフトが立ち上がって、次のような出力が得られます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/graphviz01.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;任意の画像フォーマットへの変換は&lt;a href=&quot;http://www.graphviz.org/content/command-line-invocation&quot; title=&quot;Command-line Invocation | Graphviz - Graph Visualization Software&quot;&gt;コマンドラインツール&lt;/a&gt;でも、Graphvizソフトのexport機能を使ってもできます。&lt;/p&gt;

&lt;p&gt;Graphvizの最大の特徴は、例のように関係性を記述すればその配置はGraphviz側でよしなにやってくれることです。一方でそれがGraphvizの最大の弱点にもなっています。個々のノードの配置を望み通りにコントロールするのは困難です。しかし手段がないわけではありません。&lt;/p&gt;

&lt;h3&gt;ノードの配置その１&lt;/h3&gt;

&lt;p&gt;Graphvizはその大枠としてのレイアウトの指定ができます。デフォルトは&lt;code&gt;dot&lt;/code&gt;ですが、&lt;code&gt;fdp&lt;/code&gt;, &lt;code&gt;neato&lt;/code&gt;, &lt;code&gt;circo&lt;/code&gt;, &lt;code&gt;osage&lt;/code&gt;などその名前からは配置が全く想像できないwレイアウトが使えます。&lt;/p&gt;

&lt;p&gt;layoutに&lt;code&gt;neato&lt;/code&gt;を指定してみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;digraph G {
  layout=neato;  /* レイアウトの指定 */
  GrandpaA -&amp;gt; Papa;
  GrandmaA -&amp;gt; Papa;
  GrandpaB -&amp;gt; Mama;
  GrandmaB -&amp;gt; Mama;
  Papa -&amp;gt; You;
  Mama -&amp;gt; You;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出力は以下のように変わります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/graphviz02.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;ノードの配置その２&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rankdir&lt;/code&gt;属性でレイアウトの向きというのを変えることができます。&lt;/p&gt;

&lt;p&gt;左から右（LR）を指定してみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;digraph G {
  rankdir=LR; // 左から右へ
  GrandpaA -&amp;gt; Papa;
  GrandmaA -&amp;gt; Papa;
  GrandpaB -&amp;gt; Mama;
  GrandmaB -&amp;gt; Mama;
  Papa -&amp;gt; You;
  Mama -&amp;gt; You;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/graphviz03.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;ノードの配置その３&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rank&lt;/code&gt;属性でレイアウトにおけるノードの並び順位を指定できます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;digraph G {
  GrandpaA -&amp;gt; Papa;
  GrandmaA -&amp;gt; Papa;
  GrandpaB -&amp;gt; Mama;
  GrandmaB -&amp;gt; Mama;
  Papa -&amp;gt; You;
  Mama -&amp;gt; You;
  { rank=same; Papa; GrandmaA } // これらを同じランクに
  { rank=same; Mama; GrandmaB }
  { rank=min; You } // 最小ランクに
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/graphviz04.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;ノードの配置その４&lt;/h3&gt;

&lt;p&gt;究極の配置手段として絶対位置指定&lt;code&gt;pos&lt;/code&gt;属性があります。これは&lt;code&gt;fdp&lt;/code&gt;, &lt;code&gt;neato&lt;/code&gt;などのレイアウトで有効になります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;digraph G {
  layout=neato;
  GrandpaA -&amp;gt; Papa;
  GrandmaA -&amp;gt; Papa;
  GrandpaB -&amp;gt; Mama;
  GrandmaB -&amp;gt; Mama;
  Papa -&amp;gt; You;
  Mama -&amp;gt; You;
  You [pos=&amp;quot;0,0!&amp;quot;];
  Papa [pos=&amp;quot;100,100!&amp;quot;];
  Mama [pos=&amp;quot;0,-100!&amp;quot;];
  GrandmaA [pos=&amp;quot;100,0!&amp;quot;];
  GrandmaB [pos=&amp;quot;-100,0!&amp;quot;];
  GrandpaB [pos=&amp;quot;100,-100!&amp;quot;];
  GrandpaA [pos=&amp;quot;-100,100!&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/graphviz05.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;属性指定&lt;/h3&gt;

&lt;p&gt;Graphvizのもう一つの大きな特徴は、多様な属性指定ができることです。グラフ全体、ノード、エッジなどに対して細かい属性指定が可能です。&lt;/p&gt;

&lt;p&gt;先のグラフにいろいろと属性を指定してみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;digraph G {
  bgcolor=&amp;quot;cornsilk&amp;quot;;
  node [shape=egg];
  GrandpaA -&amp;gt; Papa [style=dotted];
  GrandmaA -&amp;gt; Papa [arrowhead=&amp;quot;odiamond&amp;quot;];
  GrandpaB -&amp;gt; Mama;
  GrandmaB -&amp;gt; Mama [color=&amp;quot;red&amp;quot;];
  Papa -&amp;gt; You;
  Mama -&amp;gt; You;
  You [shape=doublecircle, style=filled, fillcolor=&amp;quot;orange&amp;quot;];
  Papa [shape=house, style=&amp;quot;filled&amp;quot;, color=&amp;quot;purple&amp;quot;, fontcolor=&amp;quot;white&amp;quot;, label=&amp;quot;パパ&amp;quot;];
  Mama [shape=invhouse, style=&amp;quot;filled&amp;quot;, color=&amp;quot;pink&amp;quot;, label=&amp;quot;ママ&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/graphviz06.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;色&lt;/h3&gt;

&lt;p&gt;上で見たようにGraphvizではノード、エッジ、背景に自由に色を付けられます。簡単にかつ美しい色付けをしたい場合は&lt;code&gt;colorscheme&lt;/code&gt;属性が便利です。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;digraph G {
  node [style=filled, colorscheme=rdpu3];
  GrandpaA -&amp;gt; Papa;
  GrandmaA -&amp;gt; Papa;
  GrandpaB -&amp;gt; Mama;
  GrandmaB -&amp;gt; Mama;
  Papa -&amp;gt; You;
  Mama -&amp;gt; You;
  You [style=filled, fillcolor=1];
  Papa [style=filled, fillcolor=2];
  Mama [style=filled, fillcolor=2];
  GrandmaA [style=filled, fillcolor=3];
  GrandmaB [style=filled, fillcolor=3];
  GrandpaB [style=filled, fillcolor=3];
  GrandpaA [style=filled, fillcolor=3];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/graphviz07.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;文献&lt;/h3&gt;

&lt;p&gt;使えるレイアウト、属性、色などの情報は本家サイトのドキュメントを見るのが早いです。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://www.graphviz.org/Documentation.php&quot; title=&quot;Documentation | Graphviz - Graph Visualization Software&quot;&gt;Documentation | Graphviz - Graph Visualization Software&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;まとまった資料としては以下のPDF（英語版）があります。2006年版ということでちょっと古いです。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://www.graphviz.org/Documentation/dotguide.pdf&quot; title=&quot;dotguide.pdf&quot;&gt;dotguide.pdf&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;さらに古い2003年版を対象にしたものですが、日本語版を作られた方がいます。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://www.cbrc.jp/%7Etominaga/translations/graphviz/dotguide.pdf&quot; title=&quot;dotguide.pdf&quot;&gt;dotguide.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cbrc.jp/%7Etominaga/translations/index.html#dot&quot; title=&quot;日本語訳の文章: GSL, plotutils, etc.&quot;&gt;日本語訳の文章: GSL, plotutils, etc.&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Gvizって何？&lt;/h2&gt;

&lt;p&gt;GvizはDOT言語を使わずにRubyのコード（DSL）を書くことでGraphvizによるグラフ描画を可能にするライブラリ＆コマンドラインツールです。つまりRubyのコードをDOT言語によるコードに変換するコンバータです。DOT言語は制御構造を持っていないので、ノード数の多い複雑なグラフやプログラムに読み込めるデータに基づくグラフを描画する場合には、Gvizを使ったほうが圧倒的に早く仕事を終わらせられます。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/Gviz/&quot; title=&quot;Gviz&quot;&gt;Gvizのサイト&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Rubyによる同種のプログラムは多数存在します。古くからあって最も人気のあるものは「&lt;a href=&quot;https://rubygems.org/gems/ruby-graphviz&quot; title=&quot;ruby-graphviz | RubyGems.org | your community gem host&quot;&gt;ruby-graphviz&lt;/a&gt;」です。比較的新しくて人気のあるものにRyan Davisの「&lt;a href=&quot;https://rubygems.org/gems/graph&quot; title=&quot;graph | RubyGems.org | your community gem host&quot;&gt;graph&lt;/a&gt;」があります。Gvizはgraphにインスパイアされて作りました。私見ですがruby-graphvizはRuby成分が少なくgraphはtoo much DSLなので、Gvizは「&lt;strong&gt;ほどよいDSL&lt;/strong&gt;」のインタフェースを目指しました。最新バージョンは0.3.4、Rubyは2.0.0以上が必要です。&lt;/p&gt;

&lt;h2&gt;Gvizの使い方&lt;/h2&gt;

&lt;p&gt;２種類の使い方、つまりプログラムからの使い方とコマンドラインインタフェース（CLI）を通しての使い方があります。まずは&lt;code&gt;gem install gviz&lt;/code&gt;します。&lt;/p&gt;

&lt;h3&gt;プログラムから&lt;/h3&gt;

&lt;p&gt;この記事の最初のサンプルをrubyで書いてみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# sample.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;gviz&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gviz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GrandpaA&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GrandmaA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Papa&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GrandpaB&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GrandmaB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Mama&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Papa&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:You&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:png&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;add&lt;/code&gt;メソッド（またはroute）にHashを渡してノード同士のつなぎを指定します。各ノード名はSymbolの必要があります。渡されるHashのキー、バリュとしてこのように配列を指定できます。ここではaddを3回呼んでいますが、すべてのつなぎを一つのaddに渡しても構いません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;save&lt;/code&gt;メソッドの第１引数に出力ファイル名を、第２引数に画像フォーマットを渡します。第２引数を省略した場合はdotファイルだけが出力されます。&lt;/p&gt;

&lt;p&gt;このファイルを実行すれば、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% ruby sample.rb
% open sample.dot #または sample.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次の出力が得られます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/graphviz01.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gvizは&lt;code&gt;Graph&lt;/code&gt;というトップレベルのショートカット関数を持っているので、上のコードは次のようにDSLを使ってより簡潔に記述できます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# sample.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;gviz&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GrandpaA&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GrandmaA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Papa&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GrandpaB&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GrandmaB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Mama&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Papa&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:You&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:png&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;CLIから&lt;/h3&gt;

&lt;p&gt;Gvizをインストールするとターミナルで&lt;code&gt;gviz&lt;/code&gt;コマンドが使えるようになります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;% gviz
Gviz is a tool &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;generating graphviz dot data with simple Ruby&lt;span class=&quot;s1&quot;&gt;&amp;#39;s syntax.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;It works with a graph spec file (defaulting to load &amp;#39;&lt;/span&gt;graph.ru&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.

Example of graph.ru:

  route :main &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:init, :parse, :cleanup, :printf&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  route :init &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; :make, :parse &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; :execute
  route :execute &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:make, :compare, :printf&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

  save&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:sample, :png&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Commands:
  gviz build &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FILE&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# Build a graphviz dot data based on a file&lt;/span&gt;
  gviz &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;COMMAND&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Describe available commands or one specific command&lt;/span&gt;
  gviz man &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;NAME&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# Show available attributes, constants, colors for graphviz&lt;/span&gt;
  gviz version         &lt;span class=&quot;c&quot;&gt;# Show Gviz version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;graph.ru&lt;/code&gt;という名前で次のように記述します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#graph.ru&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GrandpaA&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GrandmaA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Papa&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GrandpaB&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GrandmaB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Mama&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Papa&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:You&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:png&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ファイルのディレクトリで&lt;code&gt;gviz build&lt;/code&gt;コマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% gviz build
% open sample.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;省略しますが同様の結果が得られます。&lt;/p&gt;

&lt;p&gt;先の属性を指定した例も示します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#graph.ru&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;bgcolor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cornsilk&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;egg&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GrandpaA&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GrandmaA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Papa&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GrandpaB&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GrandmaB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Mama&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Papa&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:You&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:You&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;doublecircle&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;filled&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fillcolor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Papa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;house&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;filled&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;purple&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fontcolor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;パパ&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Mama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;invhouse&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;filled&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pink&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ママ&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:GrandpaA_Papa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dotted&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:GrandmaA_Papa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;arrowhead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;odiamond&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:GrandmaB_Mama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sample&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;global&lt;/code&gt;メソッドでグラフ全体の属性を指定します。&lt;code&gt;nodes&lt;/code&gt;メソッドでノード全体の、またここでは出てきませんが&lt;code&gt;edges&lt;/code&gt;メソッドでエッジ全体の属性を指定します。&lt;/p&gt;

&lt;p&gt;各ノード、エッジの属性指定はそれぞれ&lt;code&gt;node&lt;/code&gt;, &lt;code&gt;edge&lt;/code&gt;メソッドを使います。第１引数はidでありlabel属性がなければラベルとしても使われます。idはSymbolでなければならず、エッジのidはノードのidを&lt;code&gt;_&lt;/code&gt;（アンダーバー）で結んだものになります。ここでは使われていませんが、&lt;code&gt;Object#to_id&lt;/code&gt;を使って任意のオブジェクトからidを生成することができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/graphviz06.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Rubyの図&lt;/h3&gt;

&lt;p&gt;Rubyらしい図も書いてみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;klasses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fixnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bignum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;box3d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;colorscheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blues8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;filled&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;klasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ancestors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fillcolor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;maroon&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:png&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Module#ancestorsを使ってRubyのメソッド探索ルートをグラフ化します。普通にRubyのコードが書けます。&lt;/p&gt;

&lt;p&gt;出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/graphviz09.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;いいですね。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Gvizの他の機能やどんなグラフや図が描けるのかについては、以下の記事一覧から辿って該当記事を読んでください。&lt;/p&gt;

&lt;h2&gt;ブログ記事一覧&lt;/h2&gt;

&lt;p&gt;このブログにおいてGvizに関連する記事は以下になります（時系列昇順）。現時点で28件ありますが今後も新しい記事が書かれた際はここに追加します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2012/09/25/ruby-plus-graphviz-should-eql-gviz/&quot; title=&quot;Yet Another Ruby Graphviz Interfaceを作ったからみんなで大量のグラフを作って遊ぼうよ！&quot;&gt;Yet Another Ruby Graphviz Interfaceを作ったからみんなで大量のグラフを作って遊ぼうよ！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2012/09/27/usstates-map-data-vasualization-with-gviz/&quot; title=&quot;Ruby Graphvizラッパー「Gviz」でアメリカ合衆国をデータビジュアライズしよう！&quot;&gt;Ruby Graphvizラッパー「Gviz」でアメリカ合衆国をデータビジュアライズしよう！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2012/10/02/draw-metro-map-with-gviz/&quot; title=&quot;東京の地下鉄をGviz（Ruby Graphviz Wrapper）で描く&quot;&gt;東京の地下鉄をGviz（Ruby Graphviz Wrapper）で描く&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2012/10/03/draw-metro-logos-with-gviz/&quot; title=&quot;東京の地下鉄の路線サインをGviz（Ruby Graphviz Wrapper）で描く&quot;&gt;東京の地下鉄の路線サインをGviz（Ruby Graphviz Wrapper）で描く&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2012/10/03/draws-color-sign-of-programming-languages-with-gviz/&quot; title=&quot;プログラミング言語にも案内サインシステムを！&quot;&gt;プログラミング言語にも案内サインシステムを！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2012/10/07/meet-prime-with-fibonacci/&quot; title=&quot;素数とフィボナッチ数の出会いをGviz（Ruby Graphviz Wrapper）で描く&quot;&gt;素数とフィボナッチ数の出会いをGviz（Ruby Graphviz Wrapper）で描く&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2012/10/16/add-gviz-command-to-gviz-gem/&quot; title=&quot;GvizでAKB48をビジュアライズするよ！&quot;&gt;GvizでAKB48をビジュアライズするよ！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2012/10/20/get-graphviz-attributes-from-gviz/&quot; title=&quot;GvizでGraphvizのノードの形とかエッジの形とか使える色の名前とかの属性情報をゲットするよ！&quot;&gt;GvizでGraphvizのノードの形とかエッジの形とか使える色の名前とかの属性情報をゲットするよ！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2012/11/07/play-gviz-with-colorable/&quot; title=&quot;Rubyライブラリ「Colorable」とGvizを使ってGraphvizで綺麗なリングを描く&quot;&gt;Rubyライブラリ「Colorable」とGvizを使ってGraphvizで綺麗なリングを描く&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2012/12/04/simple-ruby-logo-with-gviz/&quot; title=&quot;GraphvizでRubyのロゴは描けますか？&quot;&gt;GraphvizでRubyのロゴは描けますか？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/03/22/map-of-japan/&quot; title=&quot;Graphvizで作る、私たちの国「日本」の本当の姿かたち&quot;&gt;Graphvizで作る、私たちの国「日本」の本当の姿かたち&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/03/25/map-of-japan-2/&quot; title=&quot;Graphvizで作る、私たちの国「日本」の今度こそ本当の姿かたち&quot;&gt;Graphvizで作る、私たちの国「日本」の今度こそ本当の姿かたち&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/03/25/this-is-another-world-of-graphviz/&quot; title=&quot;これもまた、Graphvizなんです。&quot;&gt;これもまた、Graphvizなんです。&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/03/28/space-invader-invade-graphviz-kingdom/&quot; title=&quot;スペースインベーダー、Graphviz侵略ス&quot;&gt;スペースインベーダー、Graphviz侵略ス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/04/02/graphviz-layouts/&quot; title=&quot;Graphvizレイアウトサンプル&quot;&gt;Graphvizレイアウトサンプル&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/04/23/map-of-national-flags-with-graphviz/&quot; title=&quot;Graphvizで作る国旗の類似度世界地図&quot;&gt;Graphvizで作る国旗の類似度世界地図&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/08/09/now-pikmin-come-to-graphviz/&quot; title=&quot;ピクミンがGraphvizにやって来た！&quot;&gt;ピクミンがGraphvizにやって来た！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/10/18/visualize-ruby-tree-with-graphviz/&quot; title=&quot;RubyユニバースをGraphvizで視覚化する&quot;&gt;RubyユニバースをGraphvizで視覚化する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/10/19/visualize-rubinius-tree/&quot; title=&quot;Rubiniusユニバースも視覚化してみる&quot;&gt;Rubiniusユニバースも視覚化してみる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/10/20/visualize-jruby-tree/&quot; title=&quot;JRubyユニバースも視覚化してみる&quot;&gt;JRubyユニバースも視覚化してみる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/10/21/visualize-ruby-files-with-graphviz/&quot; title=&quot;Rubyのソースディレクトリも視覚化してみる&quot;&gt;Rubyのソースディレクトリも視覚化してみる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/10/28/visualize-your-directory/&quot; title=&quot;あなたのプロジェクトを美しく視覚化する&quot;&gt;あなたのプロジェクトを美しく視覚化する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2013/10/31/there-is-a-beauty-in-your-computer/&quot; title=&quot;あなたはファイルシステムに美を見るか？&quot;&gt;あなたはファイルシステムに美を見るか？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2014/01/08/graphviz-is-a-tool-for-drawing/&quot; title=&quot;Graphvizがドローイングソフトになってしまった件について&quot;&gt;Graphvizがドローイングソフトになってしまった件について&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2014/01/09/discover-beauty-of-sine-curves-through-graphviz/&quot; title=&quot;Rubyでサインカーブを描いて癒やされる&quot;&gt;Rubyでサインカーブを描いて癒やされる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2014/01/14/matreska-is-rack-for-every-rubyist/&quot; title=&quot;Rack以外でRackしたいRubyistのためのMatreska&quot;&gt;Rack以外でRackしたいRubyistのためのMatreska&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2014/02/03/build-table-nodes-with-html-like-labels-in-graphviz/&quot; title=&quot;Graphvizで表そして気になる都知事選2014のゆくえ&quot;&gt;Graphvizで表そして気になる都知事選2014のゆくえ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2014/02/26/edges-between-clusters-now-enabled-with-gviz/&quot; title=&quot;Gviz（Graphviz ruby wrapper）でクラスタエッジとか無向グラフとか&quot;&gt;Gviz（Graphviz ruby wrapper）でクラスタエッジとか無向グラフとか&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;各記事の概要説明&lt;/h2&gt;

&lt;p&gt;記事の検索性を上げるためその概要も書いておきます。あらためて、なんというかGraphvizの本来の使い方とかけ離れた使い方ばかりで...。あまり参考にならないかもしれません。&lt;/p&gt;

&lt;h3&gt;1. &lt;a href=&quot;/2012/09/25/ruby-plus-graphviz-should-eql-gviz/&quot; title=&quot;Yet Another Ruby Graphviz Interfaceを作ったからみんなで大量のグラフを作って遊ぼうよ！&quot;&gt;Yet Another Ruby Graphviz Interfaceを作ったからみんなで大量のグラフを作って遊ぼうよ！&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事ではGvizを公開したこと、その基本機能の説明およびサンプルとして次のような日本地図を描きました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pref4.png&quot; alt=&quot;pref4 noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;2. &lt;a href=&quot;/2012/09/27/usstates-map-data-vasualization-with-gviz/&quot; title=&quot;Ruby Graphvizラッパー「Gviz」でアメリカ合衆国をデータビジュアライズしよう！&quot;&gt;Ruby Graphvizラッパー「Gviz」でアメリカ合衆国をデータビジュアライズしよう！&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事ではアメリカ合衆国の各州の統合年、面積および人口を、ノードの色、大きさおよび多角形の辺の数を使ってビジュアライズしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/usa6.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;3. &lt;a href=&quot;/2012/10/02/draw-metro-map-with-gviz/&quot; title=&quot;東京の地下鉄をGviz（Ruby Graphviz Wrapper）で描く&quot;&gt;東京の地下鉄をGviz（Ruby Graphviz Wrapper）で描く&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、&lt;a href=&quot;http://www.ekidata.jp/index.html&quot;&gt;『駅データ．ｊｐ』&lt;/a&gt;が提供する路線情報を使って、東京の地下鉄路線図をビジュアライズしました。ここでは駅の緯度・経度情報から正しい位置に駅ノードを配置しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2012/metro6.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;4. &lt;a href=&quot;/2012/10/03/draw-metro-logos-with-gviz/&quot; title=&quot;東京の地下鉄の路線サインをGviz（Ruby Graphviz Wrapper）で描く&quot;&gt;東京の地下鉄の路線サインをGviz（Ruby Graphviz Wrapper）で描く&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、東京の地下鉄の路線サインを描画しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2012/metrologo.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;5. &lt;a href=&quot;/2012/10/03/draws-color-sign-of-programming-languages-with-gviz/&quot; title=&quot;プログラミング言語にも案内サインシステムを！&quot;&gt;プログラミング言語にも案内サインシステムを！&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、地下鉄の路線サインにヒントを得て、プログラミング言語のサインを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2012/langlogo.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2012/langlogo2.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;6. &lt;a href=&quot;/2012/10/07/meet-prime-with-fibonacci/&quot; title=&quot;素数とフィボナッチ数の出会いをGviz（Ruby Graphviz Wrapper）で描く&quot;&gt;素数とフィボナッチ数の出会いをGviz（Ruby Graphviz Wrapper）で描く&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、Rubyで素数とフィボナッチ数を出力してそれが交わる様子をグラフ化してみました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2012/number4.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;7. &lt;a href=&quot;/2012/10/16/add-gviz-command-to-gviz-gem/&quot; title=&quot;GvizでAKB48をビジュアライズするよ！&quot;&gt;GvizでAKB48をビジュアライズするよ！&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、Gvizに追加された（１）Gvizコマンド、（２）multiple edge指定、（３）Object#idの機能の紹介と、AKB48のメンバー名をグラフ化した例を載せました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2012/akb5.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;8. &lt;a href=&quot;/2012/10/20/get-graphviz-attributes-from-gviz/&quot; title=&quot;GvizでGraphvizのノードの形とかエッジの形とか使える色の名前とかの属性情報をゲットするよ！&quot;&gt;GvizでGraphvizのノードの形とかエッジの形とか使える色の名前とかの属性情報をゲットするよ！&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、Gvizに追加された（１）&lt;code&gt;gviz man&lt;/code&gt;コマンド、（２）Graphvizの属性情報定数の紹介と、属性情報定数を使った属性情報サンプルのグラフ化をしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2012/attr3.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;9. &lt;a href=&quot;/2012/11/07/play-gviz-with-colorable/&quot; title=&quot;Rubyライブラリ「Colorable」とGvizを使ってGraphvizで綺麗なリングを描く&quot;&gt;Rubyライブラリ「Colorable」とGvizを使ってGraphvizで綺麗なリングを描く&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、Rubyで色を扱うライブラリ「&lt;a href=&quot;https://rubygems.org/gems/colorable&quot; title=&quot;colorable | RubyGems.org | your community gem host&quot;&gt;colorable&lt;/a&gt;」の紹介と、これをGvizと組合せて作ったカラーリングについて書きました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2012/color4.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;10. &lt;a href=&quot;/2012/12/04/simple-ruby-logo-with-gviz/&quot; title=&quot;GraphvizでRubyのロゴは描けますか？&quot;&gt;GraphvizでRubyのロゴは描けますか？&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、Gvizで簡単にRubyのロゴが描けるか挑戦しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2012/rubylogo7.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;イマイチでした。&lt;/p&gt;

&lt;h3&gt;11. &lt;a href=&quot;/2013/03/22/map-of-japan/&quot; title=&quot;Graphvizで作る、私たちの国「日本」の本当の姿かたち&quot;&gt;Graphvizで作る、私たちの国「日本」の本当の姿かたち&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、@antlaboさんが公開されている&lt;a href=&quot;http://d.hatena.ne.jp/antlabo/20121029/1351520444&quot; title=&quot;wikipediaの隣接市区町村の記載をデータベース化したものをcsvで公開 - 蟻の実験工房（別館ラボ）&quot;&gt;隣接市区町村のCSVデータ&lt;/a&gt;を使って、日本地図の描画に挑戦しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/03/jpmap_color.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ええ、これが私たちの住む&lt;strong&gt;日本&lt;/strong&gt;です。&lt;/p&gt;

&lt;h3&gt;12. &lt;a href=&quot;/2013/03/25/map-of-japan-2/&quot; title=&quot;Graphvizで作る、私たちの国「日本」の今度こそ本当の姿かたち&quot;&gt;Graphvizで作る、私たちの国「日本」の今度こそ本当の姿かたち&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、先の記事を見て@antlaboさんが全国市町村の位置情報データを公開してくれたので、これに基いて日本地図の描画にリベンジした様子を書いています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/03/japanmap_color.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;13. &lt;a href=&quot;/2013/03/25/this-is-another-world-of-graphviz/&quot; title=&quot;これもまた、Graphvizなんです。&quot;&gt;これもまた、Graphvizなんです。&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事は、&lt;code&gt;osage&lt;/code&gt;というレイアウトを使ってカラーサンプルを描画しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/03/tile1.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;14. &lt;a href=&quot;/2013/03/28/space-invader-invade-graphviz-kingdom/&quot; title=&quot;スペースインベーダー、Graphviz侵略ス&quot;&gt;スペースインベーダー、Graphviz侵略ス&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事は、&lt;code&gt;osage&lt;/code&gt;レイアウトを使ってスペースインベーダーの描画に挑戦した様子を書いています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/03/invader5.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ええ、これもGraphvizで書いてるんです。&lt;/p&gt;

&lt;h3&gt;15. &lt;a href=&quot;/2013/04/02/graphviz-layouts/&quot; title=&quot;Graphvizレイアウトサンプル&quot;&gt;Graphvizレイアウトサンプル&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、名前からはその形が皆目検討がつかないというGraphvizのレイアウトのサンプルを描画しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/04/neato.png&quot; alt=&quot;usa noshadow&quot; /&gt;
&lt;img src=&quot;/assets/images/2013/04/tree_fdp.png&quot; alt=&quot;usa noshadow&quot; /&gt;
&lt;img src=&quot;/assets/images/2013/04/tree_circo.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;16. &lt;a href=&quot;/2013/04/23/map-of-national-flags-with-graphviz/&quot; title=&quot;Graphvizで作る国旗の類似度世界地図&quot;&gt;Graphvizで作る国旗の類似度世界地図&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、これまた@antlaboさんが公開されている国旗の類似度データを使って、グラフ上で類似度の分布が現れるかに挑戦しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/04/flag2.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;17. &lt;a href=&quot;/2013/08/09/now-pikmin-come-to-graphviz/&quot; title=&quot;ピクミンがGraphvizにやって来た！&quot;&gt;ピクミンがGraphvizにやって来た！&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、Gvizコマンドの仕様の変更（Thorの利用）の紹介とピクミンの描画に挑戦しています。ピクミンはpng画像データから画素情報を抽出し、間引きを行って各画素をノードとしてGraphvizによる画像化をしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/08/gv_red_pikmin.png&quot; alt=&quot;noshadow&quot; style=&quot;width:100px&quot; /&gt;
&lt;img src=&quot;/assets/images/2013/08/gv_blue_pikmin.png&quot; alt=&quot;noshadow&quot; style=&quot;width:100px&quot; /&gt;
&lt;img src=&quot;/assets/images/2013/08/gv_yellow_pikmin.png&quot; alt=&quot;noshadow&quot; style=&quot;width:100px&quot; /&gt;
&lt;img src=&quot;/assets/images/2013/08/gv_rock_pikmin.png&quot; alt=&quot;noshadow&quot; style=&quot;width:100px&quot; /&gt;
&lt;img src=&quot;/assets/images/2013/08/gv_pink_pikmin.png&quot; alt=&quot;noshadow&quot; style=&quot;width:100px&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;18. &lt;a href=&quot;/2013/10/18/visualize-ruby-tree-with-graphviz/&quot; title=&quot;RubyユニバースをGraphvizで視覚化する&quot;&gt;RubyユニバースをGraphvizで視覚化する&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、Rubyのクラス階層をグラフ化しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/10/ruby_tree7.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;19. &lt;a href=&quot;/2013/10/19/visualize-rubinius-tree/&quot; title=&quot;Rubiniusユニバースも視覚化してみる&quot;&gt;Rubiniusユニバースも視覚化してみる&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、今度はRubiniusのクラス階層をグラフ化しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/10/ruby_tree8.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;20. &lt;a href=&quot;/2013/10/20/visualize-jruby-tree/&quot; title=&quot;JRubyユニバースも視覚化してみる&quot;&gt;JRubyユニバースも視覚化してみる&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、更にJRubyのクラス階層をグラフ化しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/10/ruby_tree11.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;21. &lt;a href=&quot;/2013/10/21/visualize-ruby-files-with-graphviz/&quot; title=&quot;Rubyのソースディレクトリも視覚化してみる&quot;&gt;Rubyのソースディレクトリも視覚化してみる&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、Rubyのソースディレクトリのグラフ化に挑戦しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/10/ruby_dir10.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;22. &lt;a href=&quot;/2013/10/28/visualize-your-directory/&quot; title=&quot;あなたのプロジェクトを美しく視覚化する&quot;&gt;あなたのプロジェクトを美しく視覚化する&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事ではディレクトリ構造を簡単にビジュアライズする「&lt;a href=&quot;https://rubygems.org/gems/dir_friend&quot; title=&quot;dir_friend | RubyGems.org | your community gem host&quot;&gt;dir_friend&lt;/a&gt;」というツールの紹介をしています。dir_friendは内部でGvizを使っています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/10/prj_tree2.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;23. &lt;a href=&quot;/2013/10/31/there-is-a-beauty-in-your-computer/&quot; title=&quot;あなたはファイルシステムに美を見るか？&quot;&gt;あなたはファイルシステムに美を見るか？&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、dir_friendでテーマを設定できる機能紹介をしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2013/10/theme_tree3.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;24. &lt;a href=&quot;/2014/01/08/graphviz-is-a-tool-for-drawing/&quot; title=&quot;Graphvizがドローイングソフトになってしまった件について&quot;&gt;Graphvizがドローイングソフトになってしまった件について&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、Gvizに追加されたDrawライクなメソッド群の紹介およびそのサンプルについて書いています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/01/gviz_draw2.png&quot; alt=&quot;usa noshadow&quot; /&gt;
&lt;img src=&quot;/assets/images/2014/01/gviz_draw3.png&quot; alt=&quot;usa noshadow&quot; /&gt;
&lt;img src=&quot;/assets/images/2014/01/gviz_batman.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;25. &lt;a href=&quot;/2014/01/09/discover-beauty-of-sine-curves-through-graphviz/&quot; title=&quot;Rubyでサインカーブを描いて癒やされる&quot;&gt;Rubyでサインカーブを描いて癒やされる&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事ではGvizのDraw系メソッドを使ってサインカーブのいろいろなバラエティを描画しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/01/sine3.png&quot; alt=&quot;usa noshadow&quot; /&gt;
&lt;img src=&quot;/assets/images/2014/01/sine5.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;26. &lt;a href=&quot;/2014/01/14/matreska-is-rack-for-every-rubyist/&quot; title=&quot;Rack以外でRackしたいRubyistのためのMatreska&quot;&gt;Rack以外でRackしたいRubyistのためのMatreska&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、アダプタブルなマルチフィルターバンドラー「&lt;a href=&quot;https://rubygems.org/gems/matreska&quot; title=&quot;matreska | RubyGems.org | your community gem host&quot;&gt;matreska&lt;/a&gt;」の紹介と、これとGvizを組合せてアニメーションGIFを作る例を紹介しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/01/anpan.gif&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;27. &lt;a href=&quot;/2014/02/03/build-table-nodes-with-html-like-labels-in-graphviz/&quot; title=&quot;Graphvizで表そして気になる都知事選2014のゆくえ&quot;&gt;Graphvizで表そして気になる都知事選2014のゆくえ&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、@otahiさんからのPull Requestから実現したHTML風ラベルの機能紹介と、そのサンプルについて書いています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/html_label2.png&quot; alt=&quot;usa noshadow&quot; /&gt;
&lt;img src=&quot;/assets/images/2014/02/html_label4.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;28. &lt;a href=&quot;/2014/02/26/edges-between-clusters-now-enabled-with-gviz/&quot; title=&quot;Gviz（Graphviz ruby wrapper）でクラスタエッジとか無向グラフとか&quot;&gt;Gviz（Graphviz ruby wrapper）でクラスタエッジとか無向グラフとか&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;この記事では、@k1LoWさんからのリクエストで実現したsubgraph（cluster）同士の連結および無向グラフの機能についての紹介をしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/gviz_subgraph03.png&quot; alt=&quot;usa noshadow&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上、「Gvizの目次 - Rubyの世界からGraphvizの世界にこんにちは！」でした。ふぅ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p style=&#39;color:red&#39;&gt;=== Ruby関連電子書籍100円〜で好評発売中！ ===&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/rack_cover.png&quot; alt=&quot;rack&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_pack8.png&quot; alt=&quot;pack8&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_parallel_cover.png&quot; alt=&quot;ruby_parallel&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gviz（Graphviz ruby wrapper）でクラスタエッジとか無向グラフとか</title>
   <link href="http://melborne.github.io/2014/02/26/edges-between-clusters-now-enabled-with-gviz"/>
   <updated>2014-02-26T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/02/26/edges-between-clusters-now-enabled-with-gviz</id>
   <content type="html">&lt;p&gt;Twitterで@k1LoWさんから、次のような質問というかリクエストを頂きました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/gviz_subgraph01.png&quot; alt=&quot;Alt title &quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/k1LoW/status/437877575839268864&quot; title=&quot;Twitter / k1LoW: @merborne 突然すみません質問です!Givzでsub ...&quot;&gt;Twitter / k1LoW: @merborne 突然すみません質問です!Givzでsub ...&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Graphvizではfdpレイアウトにおいて、subgraph（cluster）を結ぶエッジをそれらの名前を使って作ることができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/gviz_subgraph02.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://www.graphviz.org/content/fdpclust&quot; title=&quot;Graphviz Example: Undirected Graph Clusters | Graphviz - Graph Visualization Software&quot;&gt;Graphviz Example: Undirected Graph Clusters | Graphviz - Graph Visualization Software&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Gvizでは、subgraphの名前は自動で付けられてしまう（cluster+0からの連番）のでこれができませんでした。またこの検証に際して、無向グラフ（undirected graph）にもちゃんと対応していなかったことも発覚しました。これは実に有難いリクエストになりました。&lt;/p&gt;

&lt;p&gt;そんなわけで...&lt;/p&gt;

&lt;p&gt;早々これらに対応したversion0.3.4をリリースしました。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/gviz&quot; title=&quot;gviz | RubyGems.org | your community gem host&quot;&gt;gviz | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/melborne/Gviz&quot; title=&quot;melborne/Gviz&quot;&gt;melborne/Gviz&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Gvizで先のグラフを再現するには次のようにします。&lt;/p&gt;

&lt;div&gt;&lt;script src=&#39;https://gist.github.com/9221580.js?file=&#39;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;You are being &amp;lt;a href=&amp;quot;https://github.com/gist/9221580&amp;quot;&amp;gt;redirected&amp;lt;/a&amp;gt;.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;


&lt;p&gt;Graphメソッドの第２引数に&lt;code&gt;:graph&lt;/code&gt;を指定することにより無向グラフが描画されます。クラスタエッジを実現するにはlayoutに&lt;code&gt;fdp&lt;/code&gt;を指定します。&lt;code&gt;subgraph&lt;/code&gt;メソッドに任意の名前を渡します。&lt;code&gt;route&lt;/code&gt;メソッドを使ってそれらの名前を結びます。&lt;/p&gt;

&lt;p&gt;実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% ruby sample.rb
% open sample.dot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次のようなグラフが得られます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/gviz_subgraph03.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;いいみたいですね。&lt;/p&gt;

&lt;hr /&gt;

&lt;p style=&#39;color:red&#39;&gt;=== Ruby関連電子書籍100円〜で好評発売中！ ===&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/rack_cover.png&quot; alt=&quot;rack&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_pack8.png&quot; alt=&quot;pack8&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_parallel_cover.png&quot; alt=&quot;ruby_parallel&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>翻訳ドキュメント作成支援ツールTogglateで翻訳要らず？</title>
   <link href="http://melborne.github.io/2014/02/25/togglate-meets-mymemory"/>
   <updated>2014-02-25T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/02/25/togglate-meets-mymemory</id>
   <content type="html">&lt;p&gt;翻訳ドキュメント作成支援ツール「&lt;code&gt;togglate&lt;/code&gt;」というものがありまして。これは単に、翻訳ドキュメント内に原文をそのセンテンスごとに埋め込んで、翻訳ドキュメントを作るためのベースとなるものを出力するだけの極めて単純なミニツールです。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/togglate&quot; title=&quot;togglate | RubyGems.org | your community gem host&quot;&gt;togglate | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/melborne/togglate&quot; title=&quot;melborne/togglate&quot;&gt;melborne/togglate&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;基本的にはmarkdownで書かれた原文を基にHTMLの訳文を作る、以下のようなプロセスで使われることを想定しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/togglate1.png&quot; alt=&quot;togglate noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;詳しくは以下の記事を読んでください。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;/2014/02/17/update-togglate-for-renewed-proposal-to-translation/&quot; title=&quot;英語圏のオープンソースプロジェクトにおける翻訳ドキュメントの問題点とその解決のための一方策（仕切り直し版）&quot;&gt;英語圏のオープンソースプロジェクトにおける翻訳ドキュメントの問題点とその解決のための一方策（仕切り直し版）&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;図において、「&lt;strong&gt;You!&lt;/strong&gt;」と書かれたところが翻訳者の手仕事になります。&lt;/p&gt;

&lt;p&gt;ここで世界全自動化信奉者としては「&lt;strong&gt;You!&lt;/strong&gt;」のところを何とかしたい、と考えるわけです。&lt;/p&gt;

&lt;p&gt;そんなわけで...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;togglate create&lt;/code&gt;サブコマンドに&lt;code&gt;translate&lt;/code&gt;オプションを付けました（version 0.1.1）。&lt;/p&gt;

&lt;p&gt;なお、togglateは本バージョンよりRuby2.1.0以降が必要になります（Refinmentsしたかったもので..）。&lt;/p&gt;

&lt;h2&gt;translateオプション&lt;/h2&gt;

&lt;p&gt;togglateはその出力において、原文の各センテンスの前には訳を書く位置を示す&lt;code&gt;[translation here]&lt;/code&gt;という文字列を挿入します。&lt;code&gt;translate&lt;/code&gt;オプションを利用すると、この文字列に代えて機械翻訳による原文対応訳が挿入されることになります。翻訳は&lt;a href=&quot;http://mymemory.translated.net/doc/spec.php&quot; title=&quot;MyMemory API technical specifications&quot;&gt;MyMemory translated.net&lt;/a&gt;のAPIを通して取得しています（APIの制約などについては後述します）。&lt;/p&gt;

&lt;p&gt;このオプションはハッシュを取るので以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% togglate create README.md --translate=from:en to:ja &amp;gt; README.ja.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;to&lt;/code&gt;は省略できませんが&lt;code&gt;from&lt;/code&gt;を省略した場合はen(English)からの翻訳として解釈されます。&lt;/p&gt;

&lt;h2&gt;出力サンプル その１&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;translate&lt;/code&gt;オプションを実際に使ってみます。RailsのREADME.mdから翻訳ドキュメントを作るとします。各センテンスが500文字以下になるように加工します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;## Welcome to Rails

Rails is a web-application framework that includes everything needed to
create database-backed web applications according to the
[Model-View-Controller (MVC)](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)
pattern.

Understanding the MVC pattern is key to understanding Rails. MVC divides your
application into three layers, each with a specific responsibility.

The _Model layer_ represents your domain model (such as Account, Product,
Person, Post, etc.) and encapsulates the business logic that is specific to
your application. In Rails, database-backed model classes are derived from
`ActiveRecord::Base`.

Active Record allows you to present the data from
database rows as objects and embellish these data objects with business logic
methods. Although most Rails models are backed by a database, models can also
be ordinary Ruby classes, or Ruby classes that implement a set of interfaces
as provided by the Active Model module. You can read more about Active Record
in its [README](activerecord/README.rdoc).

The _Controller layer_ is responsible for handling incoming HTTP requests and
providing a suitable response. Usually this means returning HTML, but Rails controllers
can also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and
manipulate models, and render view templates in order to generate the appropriate HTTP response.

In Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and
controller classes are derived from `ActionController::Base`. Action Dispatch and Action Controller
are bundled together in Action Pack. You can read more about Action Pack in its
[README](actionpack/README.rdoc).

The _View layer_ is composed of &amp;quot;templates&amp;quot; that are responsible for providing
appropriate representations of your application&amp;#39;s resources. Templates can
come in a variety of formats, but most view templates are HTML with embedded
Ruby code (ERB files). Views are typically rendered to generate a controller response,
or to generate the body of an email. In Rails, View generation is handled by Action View.
You can read more about Action View in its [README](actionview/README.rdoc).

Active Record, Action Pack, and Action View can each be used independently outside Rails.
In addition to them, Rails also comes with Action Mailer ([README](actionmailer/README.rdoc)), a library
to generate and send emails; and Active Support ([README](activesupport/README.rdoc)), a collection of
utility classes and standard library extensions that are useful for Rails, and may also be used
independently outside Rails.

## Getting Started

1. Install Rails at the command prompt if you haven&amp;#39;t yet:

        gem install rails

2. At the command prompt, create a new Rails application:

        rails new myapp

   where &amp;quot;myapp&amp;quot; is the application name.

3. Change directory to `myapp` and start the web server:

        cd myapp
        rails server

   Run with `--help` or `-h` for options.

4. Using a browser, go to `http://localhost:3000` and you&amp;#39;ll see:
&amp;quot;Welcome aboard: You&amp;#39;re riding Ruby on Rails!&amp;quot;

5. Follow the guidelines to start developing your application. You may find
   the following resources handy:
    * [Getting Started with Rails](http://guides.rubyonrails.org/getting_started.html)
    * [Ruby on Rails Guides](http://guides.rubyonrails.org)
    * [The API Documentation](http://api.rubyonrails.org)
    * [Ruby on Rails Tutorial](http://ruby.railstutorial.org/ruby-on-rails-tutorial-book)

## Contributing

We encourage you to contribute to Ruby on Rails! Please check out the
[Contributing to Ruby on Rails guide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for guidelines about how to proceed. [Join us!](http://contributors.rubyonrails.org)

## Code Status

* [![Build Status](https://travis-ci.org/rails/rails.png?branch=master)](https://travis-ci.org/rails/rails)

## License

Ruby on Rails is released under the [MIT License](http://www.opensource.org/licenses/MIT).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/master/README.md&quot; title=&quot;rails/README.md at master · rails/rails&quot;&gt;rails/README.md at master · rails/rails&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;このドキュメントに対し次のコマンドを適用し&lt;code&gt;README.ja.md&lt;/code&gt;を得ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% togglate create README.md --translate=to:ja --code-block --no-embed-code &amp;gt; README.ja.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは&lt;code&gt;--code-block&lt;/code&gt;オプションによりコードブロックを翻訳対象外とし、&lt;code&gt;--no-embed-code&lt;/code&gt;で原文を表示・非表示させるJavaScriptコードを挿入しないようにしています。&lt;/p&gt;

&lt;p&gt;出力はこのようになります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;レールに＃＃ようこそ

&amp;lt;!--original
## Welcome to Rails
--&amp;gt;

Railsは、[モデル - ビュー - コントローラ（MVC）]（http://en.wikipedia.org/wiki/Model％E2％80％に従ってデータベース支援のWebアプリケーションを作成するために必要なすべてが含まれていたWebアプリケーションフレームワークです93view％のE2％80％93controller）パターン。

&amp;lt;!--original
Rails is a web-application framework that includes everything needed to
create database-backed web applications according to the
[Model-View-Controller (MVC)](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)
pattern.
--&amp;gt;

MVCパターンを理解することは、レールを理解するうえで重要です。 MVCは3層、具体的な責任を持って、それぞれにアプリケーションを分割します。

&amp;lt;!--original
Understanding the MVC pattern is key to understanding Rails. MVC divides your
application into three layers, each with a specific responsibility.
--&amp;gt;

_modelのlayer_は（などのアカウント、製品、人物、ポストなど）ドメインモデルを表しており、アプリケーションに固有のもので、ビジネスロジックをカプセル化します。 Railsでは、データベース支援のモデルクラスは `のActiveRecord :: Baseの`から派生しています。

&amp;lt;!--original
The _Model layer_ represents your domain model (such as Account, Product,
Person, Post, etc.) and encapsulates the business logic that is specific to
your application. In Rails, database-backed model classes are derived from
`ActiveRecord::Base`.
--&amp;gt;

[translation here]

&amp;lt;!--original
Active Record allows you to present the data from
database rows as objects and embellish these data objects with business logic
methods. Although most Rails models are backed by a database, models can also
be ordinary Ruby classes, or Ruby classes that implement a set of interfaces
as provided by the Active Model module. You can read more about Active Record
in its [README](activerecord/README.rdoc).
--&amp;gt;

_controllerのlayer_は受信HTTP要求を処理し、適切な応答を提供する責任があります。通常、これはHTMLを返すことを意味するが、コントローラはまた、XML、JSON、PDFファイル、携帯電話固有のビューなどを生成することができますRailsの。コントローラ負荷やモデルを操作し、適当なHTTP応答を生成するために、ビューテンプレートをレンダリングする。

&amp;lt;!--original
The _Controller layer_ is responsible for handling incoming HTTP requests and
providing a suitable response. Usually this means returning HTML, but Rails controllers
can also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and
manipulate models, and render view templates in order to generate the appropriate HTTP response.
--&amp;gt;

Railsでは、着信要求を適切なコントローラにアクションディスパッチによってルーティングされ、コントローラクラスは `ActionController :: Baseの`から派生しています。行動発送、アクションコントローラはアクションパックに一緒にバンドルされています。あなたはその[READMEを]（actionpack / README.rdoc）でアクションパックについての詳細を読むことができます。

&amp;lt;!--original
In Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and
controller classes are derived from `ActionController::Base`. Action Dispatch and Action Controller
are bundled together in Action Pack. You can read more about Action Pack in its
[README](actionpack/README.rdoc).
--&amp;gt;

_Viewのlayer_は、アプリケーションのリソースの適切な表現を提供する責任がある「テンプレート」で構成されている。テンプレートには、さまざまな形式で来ることができるが、ほとんどのビューテンプレートは、埋め込まれたRubyコード（ERBファイル）をHTML形式である。ビューは、通常、コントローラの応答を生成するために、または電子メールの本文を生成するためにレンダリングされる。 Railsでは、ビュー生成は、アクションビューによって処理されます。あなたは、その[READMEを]でアクションの表示についての詳細を読むことができます（はActionView / README.rdoc）。

&amp;lt;!--original
The _View layer_ is composed of &amp;quot;templates&amp;quot; that are responsible for providing
appropriate representations of your application&amp;#39;s resources. Templates can
come in a variety of formats, but most view templates are HTML with embedded
Ruby code (ERB files). Views are typically rendered to generate a controller response,
or to generate the body of an email. In Rails, View generation is handled by Action View.
You can read more about Action View in its [README](actionview/README.rdoc).
--&amp;gt;

アクティブレコード、アクションパック、およびアクションビューには、各レールの外に独立して使用することができます。それらに加えて、Railsはまた、アクションメーラー（[READMEを]（のActionMailer / README.rdoc））、電子メールを生成して送信するためのライブラリが付属しています。とアクティブサポート（[READMEを]（activesupportの/ README.rdoc））、コレクションユーティリティクラスとRailsのために有用である標準ライブラリの拡張の、またRailsの外で独立して使用することができる。

&amp;lt;!--original
Active Record, Action Pack, and Action View can each be used independently outside Rails.
In addition to them, Rails also comes with Action Mailer ([README](actionmailer/README.rdoc)), a library
to generate and send emails; and Active Support ([README](activesupport/README.rdoc)), a collection of
utility classes and standard library extensions that are useful for Rails, and may also be used
independently outside Rails.
--&amp;gt;

はじめに

&amp;lt;!--original
## Getting Started
--&amp;gt;

1。あなたは、まだいない場合は、コマンドプロンプトでレールを取り付けます。

&amp;lt;!--original
1. Install Rails at the command prompt if you haven&amp;#39;t yet:
--&amp;gt;

        gem install rails

2。コマンドプロンプトで、新しいRailsアプリケーションを作成します。

&amp;lt;!--original
2. At the command prompt, create a new Rails application:
--&amp;gt;

        rails new myapp

「myappのは、「アプリケーション名です。

&amp;lt;!--original
   where &amp;quot;myapp&amp;quot; is the application name.
--&amp;gt;

3。 `myappに &amp;amp;#39;にディレクトリを変更し、Webサーバーを起動します。

&amp;lt;!--original
3. Change directory to `myapp` and start the web server:
--&amp;gt;

        cd myapp
        rails server

オプションのヘルプ `や`-H &amp;amp;#39; -  `で実行されます。

&amp;lt;!--original
   Run with `--help` or `-h` for options.
--&amp;gt;

4。ブラウザを使用して、 `http://localhost:3000に`に移動し、あなたが表示されます。「乗っようこそ！あなたはRuby on Railsで乗っている」

&amp;lt;!--original
4. Using a browser, go to `http://localhost:3000` and you&amp;#39;ll see:
&amp;quot;Welcome aboard: You&amp;#39;re riding Ruby on Rails!&amp;quot;
--&amp;gt;

5。アプリケーションの開発を開始するためのガイドラインに従ってください。あなたが便利な以下のリソースを見つけることができます：*（http://guides.rubyonrails.org/getting_started.html）[Railsの入門] * [Railsのガイドのルビー]（http://guides.rubyonrails.org）* [ APIドキュメント]（http://api.rubyonrails.org）* [ルビーon Railsのチュートリアル]（http://ruby.railstutorial.org/ruby-on-rails-tutorial-book）

&amp;lt;!--original
5. Follow the guidelines to start developing your application. You may find
   the following resources handy:
    * [Getting Started with Rails](http://guides.rubyonrails.org/getting_started.html)
    * [Ruby on Rails Guides](http://guides.rubyonrails.org)
    * [The API Documentation](http://api.rubyonrails.org)
    * [Ruby on Rails Tutorial](http://ruby.railstutorial.org/ruby-on-rails-tutorial-book)
--&amp;gt;

＃＃貢献

&amp;lt;!--original
## Contributing
--&amp;gt;

私たちはRuby on Railsでに貢献することをお勧めします！進め方についてのガイドラインについては、[案内レール上のRubyへの貢献]（http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html）をチェックしてみてください。 [ご参加！]（http://contributors.rubyonrails.org）

&amp;lt;!--original
We encourage you to contribute to Ruby on Rails! Please check out the
[Contributing to Ruby on Rails guide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for guidelines about how to proceed. [Join us!](http://contributors.rubyonrails.org)
--&amp;gt;

＃＃コードステータス

&amp;lt;!--original
## Code Status
--&amp;gt;

* [！[ステータスのビルド]（https://travis-ci.org/rails/rails.png?branch=master）]（https://travis-ci.org/rails/rails）

&amp;lt;!--original
* [![Build Status](https://travis-ci.org/rails/rails.png?branch=master)](https://travis-ci.org/rails/rails)
--&amp;gt;

ライセンス

&amp;lt;!--original
## License
--&amp;gt;

Ruby on Railsはは[MITライセンス]（http://www.opensource.org/licenses/MIT）の下でリリースされている。

&amp;lt;!--original
Ruby on Rails is released under the [MIT License](http://www.opensource.org/licenses/MIT).
--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;「乗っようこそ！あなたはRuby on Railsで乗っている」&lt;/p&gt;

&lt;p&gt;想像以上の良い結果が得られました。&lt;/p&gt;

&lt;h2&gt;出力サンプル その２&lt;/h2&gt;

&lt;p&gt;日本語から英語の翻訳も試してみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;Ruby（ルビー）は、まつもとゆきひろ（通称 Matz）により開発されたオブジェクト指向スクリプト言語であり、スクリプト言語が用いられてきた領域でのオブジェクト指向プログラミングを実現する。

概要
Ruby は当初1993年2月24日に生まれ、1995年12月にfj上で発表された。名称の Ruby は、プログラミング言語 Perl が6月の誕生石である Pearl（真珠）と同じ発音をすることから、まつもとの同僚の誕生石（7月）のルビーを取って名付けられた。

機能として、クラス定義、ガベージコレクション、強力な正規表現処理、マルチスレッド、例外処理、イテレータ、クロージャ、Mixin、演算子オーバーロードなどがある。Perl を代替可能であることが初期の段階から重視されている。Perlと同様にグルー言語としての使い方が可能で、C言語プログラムやライブラリを呼び出す拡張モジュールを組み込むことができる。

Ruby 処理系は、主にインタプリタとして実装されている（詳しくは#実装を参照）。
可読性を重視した構文となっている。Ruby においては整数や文字列なども含めデータ型はすべてがオブジェクトであり、純粋なオブジェクト指向言語といえる。

長らく言語仕様が明文化されず、まつもとによる実装が言語仕様に準ずるものとして扱われて来たが、2010年6月現在、JRuby や Rubinius といった互換実装の作者を中心に機械実行可能な形で明文化する RubySpec という試みが行われている。公的規格としては2011年3月22日にJIS規格（JIS X 3017）が制定され、その後2012年4月1日に日本発のプログラム言語では初めてISO/IEC規格（ISO/IEC 30170）として承認された [2]。

フリーソフトウェアとして Ruby ライセンス（Ruby License や Ruby&amp;#39;sと表記されることもある。GPLかArtisticに似た独自ライセンスを選択するデュアルライセンス。）で配布されている。
設計思想

開発者のまつもとゆきひろは、「Rubyの言語仕様策定において最も重視しているのはストレスなくプログラミングを楽しむことである (enjoy programming)」と述べている。（ただし、まつもとによる明文化された言語仕様は存在しない。）

Perlのモットー「やり方はいろいろある (There&amp;#39;s More Than One Way To Do It; TMTOWTDI)」は「多様性は善 (Diversity is Good)」というスローガンで Ruby に引き継がれてはいるものの最重要なものではないとも述べており、非推奨な手法も可能にするとともに、そのような手法を言語仕様により使いにくくすることによって自粛を促している。これは言語仕様が「望ましい」習慣の押し付けを行うということであり、洗脳言語（Babel-17）と言われる一面でもある。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://ja.wikipedia.org/wiki/Ruby&quot; title=&quot;Ruby - Wikipedia&quot;&gt;Ruby - Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;コマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% togglate create RUBY.txt --translate=from:ja to:en --no-embed-code &amp;gt; RUBY.en.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は次のようになりました。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;Ruby （ Ruby ） to provide object-oriented programming in object-oriented scripting language developed by Hiromi （ a.k.a. Matz ） Matz, and scripting language has been used.

&amp;lt;!--original
Ruby（ルビー）は、まつもとゆきひろ（通称 Matz）により開発されたオブジェクト指向スクリプト言語であり、スクリプト言語が用いられてきた領域でのオブジェクト指向プログラミングを実現する。
--&amp;gt;

About Ruby initially was born in 2/24/1993, was announced on the fj 12/1995. Named, taking the Ruby Birthstone name Ruby is from that sounded similar to the programming language Perl in the June birthstone Pearl （ Pearl ） Matsumoto and colleagues (July).

&amp;lt;!--original
概要
Ruby は当初1993年2月24日に生まれ、1995年12月にfj上で発表された。名称の Ruby は、プログラミング言語 Perl が6月の誕生石である Pearl（真珠）と同じ発音をすることから、まつもとの同僚の誕生石（7月）のルビーを取って名付けられた。
--&amp;gt;

As a function, a class definition, garbage collection, powerful regular expression processing, multithreading, exception processing, iterators, closures, Mixin, operator overloading, etc. Perl have been emphasizing from the early stages that alternate. You can incorporate the extension module allows use as a glue language similar to Perl and C programs and libraries to call.

&amp;lt;!--original
機能として、クラス定義、ガベージコレクション、強力な正規表現処理、マルチスレッド、例外処理、イテレータ、クロージャ、Mixin、演算子オーバーロードなどがある。Perl を代替可能であることが初期の段階から重視されている。Perlと同様にグルー言語としての使い方が可能で、C言語プログラムやライブラリを呼び出す拡張モジュールを組み込むことができる。
--&amp;gt;

Ruby processing system is implemented primarily as an interpreter （ for details # implementing ）. Has been emphasizing human-readable syntax. Ruby integer and string data types including the all objects in a pure object-oriented language can be said.

&amp;lt;!--original
Ruby 処理系は、主にインタプリタとして実装されている（詳しくは#実装を参照）。
可読性を重視した構文となっている。Ruby においては整数や文字列なども含めデータ型はすべてがオブジェクトであり、純粋なオブジェクト指向言語といえる。
--&amp;gt;

Long language specification does not stipulate, Matz and by implementing other equivalent language specification has been named RubySpec came is treated as a 6/2010 now, the author-compatible implementations like JRuby and Rubinius is written mainly machinery available in. 3/22/2011 to JIS （ JIS X 3017 ） enacted as public standards, then 2012 April 1 in Japan from programming languages for the first time as an ISO/IEC standard （ ISO/IEC 30170 ） approved [2].

&amp;lt;!--original
長らく言語仕様が明文化されず、まつもとによる実装が言語仕様に準ずるものとして扱われて来たが、2010年6月現在、JRuby や Rubinius といった互換実装の作者を中心に機械実行可能な形で明文化する RubySpec という試みが行われている。公的規格としては2011年3月22日にJIS規格（JIS X 3017）が制定され、その後2012年4月1日に日本発のプログラム言語では初めてISO/IEC規格（ISO/IEC 30170）として承認された [2]。
--&amp;gt;

Ruby&amp;#39;s license as a free software （ may be referred to as Ruby License and Ruby&amp;#39;s. Dual license to choose their own licenses like the GPL or Artistic.
） in have been distributed. Design philosophy

&amp;lt;!--original
フリーソフトウェアとして Ruby ライセンス（Ruby License や Ruby&amp;#39;sと表記されることもある。GPLかArtisticに似た独自ライセンスを選択するデュアルライセンス。）で配布されている。
設計思想
--&amp;gt;

Matz of the developer does, &amp;#39; is very important in the Ruby language specification is enjoy the programming without the stress that (enjoy programming)&amp;quot;and said. （ Matsumoto, however, and by the written language specification does not exist. ）

&amp;lt;!--original
開発者のまつもとゆきひろは、「Rubyの言語仕様策定において最も重視しているのはストレスなくプログラミングを楽しむことである (enjoy programming)」と述べている。（ただし、まつもとによる明文化された言語仕様は存在しない。）
--&amp;gt;

Perl&amp;#39;s motto &amp;#39; there are various ways (There&amp;#39;s More Than One Way To Do It; TMTOWTDI) &amp;#39; is says, is not taken over Ruby in the slogan that diversity is good (Diversity is Good), but the most important ones and also a non-recommended to refrain from urging by cumbersome language specification techniques so that the method also enables you to. Also one side doing language specification is desirable habits are pushing this, and said to brainwash language （ Babel-17 ）.

&amp;lt;!--original
Perlのモットー「やり方はいろいろある (There&amp;#39;s More Than One Way To Do It; TMTOWTDI)」は「多様性は善 (Diversity is Good)」というスローガンで Ruby に引き継がれてはいるものの最重要なものではないとも述べており、非推奨な手法も可能にするとともに、そのような手法を言語仕様により使いにくくすることによって自粛を促している。これは言語仕様が「望ましい」習慣の押し付けを行うということであり、洗脳言語（Babel-17）と言われる一面でもある。
--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なかなか上出来です。でも、まつもとさんが海外で「&lt;strong&gt;Hiromi&lt;/strong&gt;」って呼ばれてるの、初めて知りましたよw&lt;/p&gt;

&lt;h2&gt;MyMemory Translated.netの利用について&lt;/h2&gt;

&lt;p&gt;MyMemoryはWebから利用できる&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E7%BF%BB%E8%A8%B3%E3%83%A1%E3%83%A2%E3%83%AA&quot; title=&quot;翻訳メモリ - Wikipedia&quot;&gt;Translation Memory(翻訳メモリ)&lt;/a&gt;のサービスで、翻訳結果を取得するREST APIが公開されています。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://mymemory.translated.net/doc/spec.php&quot; title=&quot;MyMemory API technical specifications&quot;&gt;MyMemory API technical specifications&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;このAPIにアクセスするRuby gem「&lt;a href=&quot;https://github.com/spaghetticode/mymemory&quot; title=&quot;spaghetticode/mymemory&quot;&gt;spaghetticode/mymemory&lt;/a&gt;」が公開されており、togglateではこれを利用しています。&lt;/p&gt;

&lt;h3&gt;アクセスの制約&lt;/h3&gt;

&lt;p&gt;MyMemoryは無料で認証手続きも不要なので直ぐに利用できることが利点です。一方で、一日のAPIコールが&lt;strong&gt;100回&lt;/strong&gt;までという制約があります。Togglateを使って日に100回を超えるアクセスをした場合、翻訳結果の代わりに次のメッセージが挿入されることになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MYMEMORY WARNING: YOU USED ALL AVAILABLE FREE TRANSLATION FOR TODAY. CONTACT ALBERTO@TRANSLATED.NET TO TRANSLATE MORE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このメッセージにあるようにMyMemory側にコンタクトしてメールアドレスを登録すれば、1000 requests/dayまで利用できるようになるようです。自分はまだ試していませんが、登録したメールアドレスを&lt;code&gt;--translate&lt;/code&gt;に渡すことで一応対応できるようにはなっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% togglate create README.md --translate=to:ja email:user@yourdomain.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;現在のtogglateの実装では、各センテンスブロックごとにAPIコールを発するというユーザ＆APIフレンドリ&lt;strong&gt;でない&lt;/strong&gt;ものになっているので、項目数の多いドキュメントを対象にすると直ぐにリミットに達してしまいます。必要に応じて、短いセンテンスをまとめるなどして対応してください。&lt;/p&gt;

&lt;p&gt;一方で、一つのセンテンスが500文字を超えると、アクセスは拒否され代わりに次のメッセージが挿入されることになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QUERY LENGTH LIMIT EXCEDEED. MAX ALLOWED QUERY : 500 CHARS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;センテンスを分割して対応してください。&lt;/p&gt;

&lt;p&gt;この辺はtogglate側でよしなにやってくれるべきですよねー。&lt;/p&gt;

&lt;p&gt;また、各アクセスは5秒でタイムアウトするようになっています。その場合は代わりに&lt;code&gt;[translation here]&lt;/code&gt;が挿入されます。先のサンプルでも一箇所タイムアウトしたところがあったようです。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;そんなわけで、&lt;code&gt;togglate create&lt;/code&gt;に&lt;code&gt;translate&lt;/code&gt;オプションを付けたよ、という話でした。&lt;/p&gt;

&lt;hr /&gt;

&lt;p style=&#39;color:red&#39;&gt;=== Ruby関連電子書籍100円〜で好評発売中！ ===&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/rack_cover.png&quot; alt=&quot;rack&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_pack8.png&quot; alt=&quot;pack8&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_parallel_cover.png&quot; alt=&quot;ruby_parallel&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Togglateを使ってRuby Quizを作ったよ！</title>
   <link href="http://melborne.github.io/2014/02/19/build-ruby-quiz-with-togglate"/>
   <updated>2014-02-19T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/02/19/build-ruby-quiz-with-togglate</id>
   <content type="html">&lt;p&gt;翻訳ドキュメント作成支援ツール「&lt;code&gt;togglate&lt;/code&gt;」というものを作ったのですが、これはWeb単語帳とか問題集とかの、一部を見せたり隠したりするページを作るのにも使えるのです。&lt;/p&gt;

&lt;p&gt;それで早速「&lt;strong&gt;Ruby Quiz&lt;/strong&gt;」なるものを作ってみたので、時間が許す人は挑戦してください。まあどれもRubyの基礎的な他愛のない問題なので、時間の無駄になるかもしれませんが。「答え」をクリックすると答えと簡単な解説が表示されます。&lt;/p&gt;

&lt;p&gt;問題の作り方は下のほうに書きましたので、問題づくりに興味のある方はどうぞ。&lt;/p&gt;

&lt;h2&gt;Ruby Quiz&lt;/h2&gt;

&lt;p&gt;Rubyバージョンは2.1。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;問１．xの値は何か。&lt;/p&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;x = [1,2,3].push *[4,*[5,*[6,7]]]
&lt;/code&gt;&lt;/pre&gt;




&lt;!--original
答え：[1, 2, 3, 4, 5, 6, 7]
解説：*(splat)により配列が展開されて、Array#pushには複数の引数として渡される。
--&gt;




&lt;p&gt;問２．xの値は何か。&lt;/p&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;x = [1,2,3] * ([4, 5] * &amp;#39;6&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;




&lt;!--original
答え：&quot;146524653&quot;
解説：Array#*にStringオブジェクトを渡すと#joinとして機能する。
--&gt;




&lt;p&gt;問３．xの値は何か。&lt;/p&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;x = (&amp;#39;a&amp;#39;..&amp;#39;c&amp;#39;).size == (&amp;#39;c&amp;#39;..&amp;#39;f&amp;#39;).size
&lt;/code&gt;&lt;/pre&gt;




&lt;!--original
答え：true
解説：(&#39;a&#39;..&#39;c&#39;).sizeはnilになる。
--&gt;




&lt;p&gt;問４．xの値は何か。&lt;/p&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;x = 3
x = *x..x**2
&lt;/code&gt;&lt;/pre&gt;




&lt;!--original
答え：[3, 4, 5, 6, 7, 8, 9]
解説：範囲式..は式を取れる。
--&gt;




&lt;p&gt;問５．xの値は何か。&lt;/p&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;a = (a=[1,2,3]).push a
x = a[3][3][3][0]
&lt;/code&gt;&lt;/pre&gt;




&lt;!--original
答え：1
解説：配列aの第4要素の値は再帰的にaになる。
--&gt;




&lt;p&gt;問６．xの値は何か。&lt;/p&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;a = (a=[1,2,3]).push *a
x = a[3][3][3][0]
&lt;/code&gt;&lt;/pre&gt;




&lt;!--original
答え：0
解説：配列aの第4要素の値は1であり、それ以降はFixnum#[]が呼ばれる。
--&gt;




&lt;p&gt;問７．xの値は何か。&lt;/p&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;x = !:false.!
&lt;/code&gt;&lt;/pre&gt;




&lt;!--original
答え：true
解説：:falseはfalse,nil以外の値でtrueと評価される。
--&gt;




&lt;p&gt;問８．xの値は何か。&lt;/p&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;x = :-&amp;gt;:+, :======:===
&lt;/code&gt;&lt;/pre&gt;




&lt;!--original
答え：[true, true]
解説：Symbol#&gt;, Symbol#===でシンボル値を比較している。
--&gt;




&lt;p&gt;問９．xの値は何か。&lt;/p&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;x = send(def d(n); n * 2 end, 3)
&lt;/code&gt;&lt;/pre&gt;




&lt;!--original
答え：6
解説：メソッド定義はメソッド名をシンボルで返す。
--&gt;




&lt;p&gt;問１０．xの値は何か。&lt;/p&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;x = &amp;quot;R&amp;quot; &amp;lt;&amp;lt; 117 &amp;lt;&amp;lt; 98 &amp;lt;&amp;lt; 121
&lt;/code&gt;&lt;/pre&gt;




&lt;!--original
答え：&quot;Ruby&quot;
解説：String#&lt;&lt;は引数が整数ならそのASCII文字を追加する。
--&gt;




&lt;script src=&quot;http://code.jquery.com/jquery-1.11.0.min.js&quot;&gt;&lt;/script&gt;




&lt;script&gt;
$(function() {
  $(&quot;*&quot;).contents().filter(function() {
    return this.nodeType==8 &amp;&amp; this.nodeValue.match(/^original/);
  }).each(function(i, e) {
    var tooltips = e.nodeValue.replace(/^original *[\n\r]|[\n\r]$/g, &#39;&#39;);
    var link = &quot;&lt;span&gt;&lt;a href=&#39;#&#39; onclick=&#39;javascript:return false;&#39; class=&#39;toggleLink&#39;&gt;&quot; + &quot;答え&quot; + &quot;&lt;/a&gt;&lt;/span&gt;&quot;;
    $(this).prev().next().append(link);
    $(this).prev().next().after(&quot;&lt;pre style=&#39;display:none&#39;&gt;&quot;+ tooltips + &quot;&lt;/pre&gt;&quot;);
  });

  $(&#39;.toggleLink&#39;).click(
    function() {
      if ($(this).text()==&quot;答え&quot;) {
       $(this).parent().parent().next(&#39;pre&#39;).slideDown(200);
       $(this).text(&quot;隠す&quot;);
      } else {
        $(this).parent().parent().next(&#39;pre&#39;).slideUp(200);
        $(this).text(&quot;答え&quot;);
      };
    });
});
&lt;/script&gt;


&lt;p&gt;全問正解しましたか？ええ、もちろんそうでしょうとも！&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2&gt;Togglateを使った問題の作り方&lt;/h2&gt;

&lt;p&gt;まず、&lt;code&gt;ruby_quiz_original.md&lt;/code&gt;として以下のようなファイルを用意します。各問は前に4スペース空けます（コメントブロックで囲まれないようにするため）。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;    問１．xの値は何か。

```ruby
x = [1,2,3].push *[4,*[5,*[6,7]]]
```

答え：[1, 2, 3, 4, 5, 6, 7]
解説：*(splat)により配列が展開されて、Array#pushには複数の引数として渡される。

    問２．xの値は何か。

```ruby
x = [1,2,3] * ([4, 5] * &amp;#39;6&amp;#39;)
```

答え：&amp;quot;146524653&amp;quot;
解説：Array#*にStringオブジェクトを渡すと#joinとして機能する。

（以下省略）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;gem install togglate&lt;/code&gt;でtogglateをインストールすると、&lt;code&gt;togglate&lt;/code&gt;コマンドが使えるようになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;togglate create&lt;/code&gt;サブコマンドにいくつかのオプションを適用して、結果の出力を&lt;code&gt;ruby_quiz.md&lt;/code&gt;に格納します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % togglate create ruby_quiz_original.md -m=toggle -c --toggle-link-text &#39;答え&#39; &#39;隠す&#39; &amp;gt; ruby_quiz.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-c&lt;/code&gt;オプション(--code-block)はコードブロックをコメントで囲まないようにします。次のような&lt;code&gt;ruby_quiz.md&lt;/code&gt;ファイルが得られます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;    問１．xの値は何か。

```ruby
x = [1,2,3].push *[4,*[5,*[6,7]]]
```

[translation here]

&amp;lt;!--original
答え：[1, 2, 3, 4, 5, 6, 7]
解説：*(splat)により配列が展開されて、Array#pushには複数の引数として渡される。
--&amp;gt;

    問２．xの値は何か。

```ruby
x = [1,2,3] * ([4, 5] * &amp;#39;6&amp;#39;)
```

[translation here]

&amp;lt;!--original
答え：&amp;quot;146524653&amp;quot;
解説：Array#*にStringオブジェクトを渡すと#joinとして機能する。
--&amp;gt;

（中略）

 &amp;lt;script src=&amp;quot;http://code.jquery.com/jquery-1.11.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script&amp;gt;
 $(function() {
   $(&amp;quot;*&amp;quot;).contents().filter(function() {
     return this.nodeType==8 &amp;amp;&amp;amp; this.nodeValue.match(/^original/);
   }).each(function(i, e) {
     var tooltips = e.nodeValue.replace(/^original *[\n\r]|[\n\r]$/g, &amp;#39;&amp;#39;);
     var link = &amp;quot;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;#39;#&amp;#39; onclick=&amp;#39;javascript:return false;&amp;#39; class=&amp;#39;toggleLink&amp;#39;&amp;gt;&amp;quot; + &amp;quot;答え&amp;quot; + &amp;quot;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;quot;;
     $(this).prev().append(link);
     $(this).prev().after(&amp;quot;&amp;lt;pre style=&amp;#39;display:none&amp;#39;&amp;gt;&amp;quot;+ tooltips + &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;);
   });
 
   $(&amp;#39;.toggleLink&amp;#39;).click(
     function() {
       if ($(this).text()==&amp;quot;答え&amp;quot;) {
        $(this).parent().parent().next(&amp;#39;pre&amp;#39;).slideDown(200);
        $(this).text(&amp;quot;隠す&amp;quot;);
       } else {
         $(this).parent().parent().next(&amp;#39;pre&amp;#39;).slideUp(200);
         $(this).text(&amp;quot;答え&amp;quot;);
       };
     });
 });
 &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答えのブロックがコメントで囲まれ、末尾にそれをトグルするコードが追加されます。&lt;/p&gt;

&lt;p&gt;このファイルに対して、各問いの前のスペースと、&lt;code&gt;[translation here]&lt;/code&gt;の文字を削除します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;問１．xの値は何か。

```ruby
x = [1,2,3].push *[4,*[5,*[6,7]]]
```

&amp;lt;!--original
答え：[1, 2, 3, 4, 5, 6, 7]
解説：*(splat)により配列が展開されて、Array#pushには複数の引数として渡される。
--&amp;gt;

問２．xの値は何か。

```ruby
x = [1,2,3] * ([4, 5] * &amp;#39;6&amp;#39;)
```

&amp;lt;!--original
答え：&amp;quot;146524653&amp;quot;
解説：Array#*にStringオブジェクトを渡すと#joinとして機能する。
--&amp;gt;

（以下省略）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;gem install github-markdown&lt;/code&gt;して、&lt;code&gt;gfm&lt;/code&gt;コマンドを使ってこのMarkdownファイルをHTMLに変換します（gfmコマンドはパスを通す必要があります）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% gfm ruby_quiz.md &amp;gt; ruby_quiz.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で先のRuby Quizが出来上がります。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/togglate&quot; title=&quot;togglate | RubyGems.org | your community gem host&quot;&gt;togglate | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/melborne/togglate&quot; title=&quot;melborne/togglate&quot;&gt;melborne/togglate&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;関連記事： &lt;a href=&quot;http://melborne.github.io/2014/02/17/update-togglate-for-renewed-proposal-to-translation/&quot; title=&quot;英語圏のオープンソースプロジェクトにおける翻訳ドキュメントの問題点とその解決のための一方策（仕切り直し版）&quot;&gt;英語圏のオープンソースプロジェクトにおける翻訳ドキュメントの問題点とその解決のための一方策（仕切り直し版）&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p style=&#39;color:red&#39;&gt;=== Ruby関連電子書籍100円〜で好評発売中！ ===&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/rack_cover.png&quot; alt=&quot;rack&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_pack8.png&quot; alt=&quot;pack8&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_parallel_cover.png&quot; alt=&quot;ruby_parallel&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>英語圏のオープンソースプロジェクトにおける翻訳ドキュメントの問題点とその解決のための一方策（仕切り直し版）</title>
   <link href="http://melborne.github.io/2014/02/17/update-togglate-for-renewed-proposal-to-translation"/>
   <updated>2014-02-17T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/02/17/update-togglate-for-renewed-proposal-to-translation</id>
   <content type="html">&lt;p&gt;(追記：2014-2-26) 自動翻訳機能を追加しました。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;/2014/02/25/togglate-meets-mymemory/&quot; title=&quot;翻訳ドキュメント作成支援ツールTogglateで翻訳要らず？&quot;&gt;翻訳ドキュメント作成支援ツールTogglateで翻訳要らず？&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;少し前にオープンソースプロジェクトにおける翻訳ドキュメントの作成における問題点とその解決案について記事を書いたんだけど、要は翻訳ドキュメント内に原文をそのセンテンスごとに埋め込んで、原文と訳文の対応付けを保証しつつこれをトグル表示させることで原文が翻訳ドキュメントの表示上の邪魔にならないようにするといったもので、そのときに併せてこれをスクリプトで実現した&lt;code&gt;togglate&lt;/code&gt;というツールも作ってそのツールとgithub向けmarkdownのパーサーである&lt;code&gt;github-markdown&lt;/code&gt;を使ってmarkdownによるオリジナルドキュメントからhtmlによる翻訳ドキュメントを生成するプロセスについても解説したんだ。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;/2014/02/11/problem-and-proposal-for-tranlated-documents/&quot; title=&quot;英語圏のオープンソースプロジェクトにおける翻訳ドキュメントの問題点とその解決のための一方策&quot;&gt;英語圏のオープンソースプロジェクトにおける翻訳ドキュメントの問題点とその解決のための一方策&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;それでそのときのtogglateのデフォルトの仕様としては原文をセンテンスごとに特別なコードブロック&lt;code&gt;```original&lt;/code&gt;, &lt;code&gt;```&lt;/code&gt;で囲み、そのブロックをトグル表示させるJavaScriptのコードをmarkdownに埋め込むものとなっていたんだけれど、これに対して&lt;code&gt;togglate&lt;/code&gt;のissueの方に&lt;code&gt;Pro Git&lt;/code&gt;の日本語訳をされている@harupongさんから、原文をコードブロックで囲むこともJavaScriptコードを埋め込むことも本家プロジェクト側では受け入れ難いだろうから原文をコードブロックではなくHTMLコメントタグで囲みJavaScriptコードを埋め込まないオプションがあったほうがいいという提案をもらって、提案を頂けただけでも嬉しかったんだけどその提案がまた正にその通りでまあ辛うじてオプションでできなくはなかったんだけど基本設計としてコードブロックどうなのよと思い至ったので、togglateの仕様を見直して上記点を反映させたversion0.03を公開したのでここであらためて紹介しますので今後ともどうぞよろしくお願いします。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/togglate&quot; title=&quot;togglate | RubyGems.org | your community gem host&quot;&gt;togglate | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/melborne/togglate&quot; title=&quot;melborne/togglate&quot;&gt;melborne/togglate&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;なお@harupongさんらによるPro Git日本語版電子書籍は以下より入手可能です。ほんと素晴らしい仕事です。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://progit-ja.github.io/&quot; title=&quot;Pro Git 日本語版電子書籍公開サイト&quot;&gt;Pro Git 日本語版電子書籍公開サイト&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;togglateの仕様&lt;/h2&gt;

&lt;p&gt;togglateはRubyによるスクリプトですがターミナルで実行できる&lt;code&gt;togglate create&lt;/code&gt;コマンドを持っています。&lt;code&gt;togglate create&lt;/code&gt;コマンドにオリジナルドキュメントを渡すと、オリジナルドキュメント内の原文をセンテンスごとにHTMLコメント化し、文末にこれを表示させるためのJavaScriptのコードを埋め込んだものを出力します。表示方法としてはマウスオーバーツールチップによる方法(hover)とトグルによる方法(toggle)が&lt;code&gt;--method&lt;/code&gt;オプションで選べます。JavaScriptのコードは&lt;code&gt;--no-embed-code&lt;/code&gt;オプションで埋め込まない選択ができます。また原文におけるコードブロックをHTMLコメント化しないオプション&lt;code&gt;--no-code-block&lt;/code&gt;も選べます。&lt;code&gt;togglate help create&lt;/code&gt;を参照してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% togglate help create
Usage:
  togglate create FILE

Options:
  -m, [--method=METHOD]                   # Select a display method: &#39;hover&#39; or &#39;toggle&#39;
                                          # Default: hover
  -e, [--embed-code]                      # Enable code embeding to false
                                          # Default: true
      [--toggle-link-text=one two three]
                                          # Default: [&quot;*&quot;, &quot;hide&quot;]
  -c, [--code-block]                      # Enable code blocks not to be wrapped

Create a base file for translation from a original file
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;チュートリアル&lt;/h2&gt;

&lt;p&gt;翻訳ドキュメントの作成プロセスを、簡単な例で試してみます。&lt;/p&gt;

&lt;h3&gt;準備&lt;/h3&gt;

&lt;p&gt;ここではこの目的のために作成した&lt;a href=&quot;https://rubygems.org/gems/togglate&quot; title=&quot;togglate&quot;&gt;togglate&lt;/a&gt;というツールと、Github社謹製&lt;a href=&quot;https://rubygems.org/gems/github-markdown&quot; title=&quot;github-markdown&quot;&gt;github-markdown(gfm)&lt;/a&gt;というツールを使います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github-markdown&lt;/code&gt;は、Github向けMarkdown(GFM)ファイルをHTMLファイルに変換するツールです（ &lt;a href=&quot;https://help.github.com/articles/github-flavored-markdown&quot; title=&quot;GitHub Flavored Markdown · GitHub Help&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;翻訳ドキュメントの生成プロセスを図にすると以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/02/togglate1.png&quot; alt=&quot;togglate noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;togglate&lt;/code&gt;、&lt;code&gt;github-markdown&lt;/code&gt;ともにgem化されているので、インストールは簡単です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% gem install togglate
% gem install github-markdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これにより&lt;code&gt;togglate&lt;/code&gt;というコマンドと&lt;code&gt;gfm&lt;/code&gt;というコマンドが使えるようになりますが、&lt;code&gt;gfm&lt;/code&gt;は以下のようにして手動でパスを通す必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% ln -s .rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/github-markdown-0.6.4/bin/gfm /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;オリジナルドキュメント&lt;/h3&gt;

&lt;p&gt;次のような英語で書かれたmarkdownファイル(README.md)があると仮定します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;## AwesomeTool

AwesomeTools is a DSL for quickly creating awesome tools in Ruby.

```ruby
# mytool.rb
require &amp;#39;awesome_tool&amp;#39;

awesome &amp;#39;nhk&amp;#39; do |name|
  &amp;#39;You are awesome, #{name}!&amp;#39;
end
```

install the gem:

    gem install awesome_tool

And run with:

    awesome nhk &amp;#39;charlie&amp;#39;

Turn on the TV, select NHK.
You will see `You are awesome, charlie!` message on the screen.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;翻訳ベースドキュメントの生成&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;togglate create&lt;/code&gt;コマンドで、&lt;code&gt;README.md&lt;/code&gt;から翻訳のベースとなるドキュメント(README.ja.md)を生成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% togglate create README.md &amp;gt; README.ja.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これにより次のような&lt;code&gt;README.ja.md&lt;/code&gt;が生成されます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;[translation here]

&amp;lt;!--original
## AwesomeTool
--&amp;gt;

[translation here]

&amp;lt;!--original
AwesomeTools is a DSL for quickly creating awesome tools in Ruby.
--&amp;gt;

[translation here]

&amp;lt;!--original
```ruby
# mytool.rb
require &amp;#39;awesome_tool&amp;#39;

awesome &amp;#39;nhk&amp;#39; do |name|
  &amp;#39;You are awesome, #{name}!&amp;#39;
end
```
--&amp;gt;

[translation here]

&amp;lt;!--original
install the gem:
--&amp;gt;

[translation here]

&amp;lt;!--original
    gem install awesome_tool
--&amp;gt;

[translation here]

&amp;lt;!--original
And run with:
--&amp;gt;

[translation here]

&amp;lt;!--original
    awesome nhk &amp;#39;charlie&amp;#39;
--&amp;gt;

[translation here]

&amp;lt;!--original
Turn on the TV, select NHK.
You will see `You are awesome, charlie!` message on the screen.
--&amp;gt;

&amp;lt;script src=&amp;quot;http://code.jquery.com/jquery-1.11.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
$(function() {
  $(&amp;quot;*&amp;quot;).contents().filter(function() {
    return this.nodeType==8 &amp;amp;&amp;amp; this.nodeValue.match(/^original/);
  }).each(function(i, e) {
    var tooltips = e.nodeValue.replace(/^original *[\n\r]|[\n\r]$/g, &amp;#39;&amp;#39;);
    $(this).prev().attr(&amp;#39;title&amp;#39;, tooltips);
  });
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ポイントは次の２点です。&lt;/p&gt;

&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;原文の各センテンスをHTMLコメントタグである&lt;code&gt;&amp;lt;!--original&lt;/code&gt;と&lt;code&gt;--&amp;gt;&lt;/code&gt;で囲み、直前に&lt;code&gt;[translation here]&lt;/code&gt;というマークを挿入&lt;/li&gt;
&lt;li&gt;ドキュメント末尾にこの原文のコメントブロックを、その直前のDOM（訳文が書かれる場所）上でツールチップ表示させるためのJavaScriptコードを挿入&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;なお、version0.0.3以前ではデフォルトでコードブロックをタグで囲まない仕様となっていましたが、すべてを囲む仕様に変更しました。コードブロックを囲まないようにしたいときは&lt;code&gt;--no-code-block&lt;/code&gt;オプションを付けてください。&lt;/p&gt;

&lt;p&gt;また、原文をツールチップ表示ではなく、トグル表示させたいときは&lt;code&gt;--method=toggle&lt;/code&gt;オプションを指定します。&lt;/p&gt;

&lt;h3&gt;翻訳作業&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[translation here]&lt;/code&gt;のマークの箇所に、その直下の原文に対応する訳文を入れます。訳が不要な箇所は原文のコメントブロックを削除します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;## AwesomeTool

AwesomeToolは、Rubyで手早くすごいツールを作るためのDSLです。

&amp;lt;!--original
AwesomeTools is a DSL for quickly creating awesome tools in Ruby.
--&amp;gt;

```ruby
# mytool.rb
require &amp;#39;awesome_tool&amp;#39;

awesome &amp;#39;nhk&amp;#39; do |name|
  &amp;#39;You are awesome, #{name}!&amp;#39;
end
```

Gemをインストールします。

&amp;lt;!--original
install the gem:
--&amp;gt;

    gem install awesome_tool

そして、実行します。

&amp;lt;!--original
And run with:
--&amp;gt;

    awesome nhk &amp;#39;charlie&amp;#39;

テレビを付けて、NHKを選曲します。
`You are awesome, charlie!`というメッセージをスクリーン上で確認できるでしょう。

&amp;lt;!--original
Turn on the TV, select NHK.
You will see `You are awesome, charlie!` message on the screen.
--&amp;gt;

\ コードは省略
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;HTML変換&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;gfm&lt;/code&gt;コマンドを使って翻訳が済んだ&lt;code&gt;README.ja.md&lt;/code&gt;からHTMLファイル(README.ja.html)を生成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% gfm README.ja.md &amp;gt; README.ja.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次の&lt;code&gt;README.ja.html&lt;/code&gt;ファイルが生成されます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;lt;h2&amp;gt;AwesomeTool&amp;lt;/h2&amp;gt;

&amp;lt;p&amp;gt;AwesomeToolは、Rubyで手早くすごいツールを作るためのDSLです。&amp;lt;/p&amp;gt;

&amp;lt;!--original
AwesomeTools is a DSL for quickly creating awesome tools in Ruby.
--&amp;gt;

&amp;lt;pre lang=&amp;quot;ruby&amp;quot;&amp;gt;&amp;lt;code&amp;gt;# mytool.rb
require &amp;amp;#39;awesome_tool&amp;amp;#39;

awesome &amp;amp;#39;nhk&amp;amp;#39; do |name|
  &amp;amp;#39;You are awesome, #{name}!&amp;amp;#39;
end
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Gemをインストールします。&amp;lt;/p&amp;gt;

&amp;lt;!--original
install the gem:
--&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;gem install awesome_tool
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;そして、実行します。&amp;lt;/p&amp;gt;

&amp;lt;!--original
And run with:
--&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;awesome nhk &amp;amp;#39;charlie&amp;amp;#39;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;テレビを付けて、NHKを選曲します。&amp;lt;br&amp;gt;
&amp;lt;code&amp;gt;You are awesome, charlie!&amp;lt;/code&amp;gt;というメッセージをスクリーン上で確認できるでしょう。&amp;lt;/p&amp;gt;

&amp;lt;!--original
Turn on the TV, select NHK.
You will see `You are awesome, charlie!` message on the screen.
--&amp;gt;

&amp;lt;!-- コードは省略 --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これをブラウザで表示すると次のように見えます。各訳文の上にマウスカーソルを置いてみてください。原文が表示されます。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;AwesomeTool&lt;/h2&gt;




&lt;p&gt;AwesomeToolは、Rubyで手早くすごいツールを作るためのDSLです。&lt;/p&gt;




&lt;!--original
AwesomeTools is a DSL for quickly creating awesome tools in Ruby.
--&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;# mytool.rb
require &amp;#39;awesome_tool&amp;#39;

awesome &amp;#39;nhk&amp;#39; do |name|
  &amp;#39;You are awesome, #{name}!&amp;#39;
end
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;Gemをインストールします。&lt;/p&gt;




&lt;!--original
install the gem:
--&gt;




&lt;pre&gt;&lt;code&gt;gem install awesome_tool
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;そして、実行します。&lt;/p&gt;




&lt;!--original
And run with:
--&gt;




&lt;pre&gt;&lt;code&gt;awesome nhk &amp;#39;charlie&amp;#39;
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;テレビを付けて、NHKを選曲します。&lt;br&gt;
&lt;code&gt;You are awesome, charlie!&lt;/code&gt;というメッセージをスクリーン上で確認できるでしょう。&lt;/p&gt;




&lt;!--original
Turn on the TV, select NHK.
You will see `You are awesome, charlie!` message on the screen.
--&gt;




&lt;script src=&quot;http://code.jquery.com/jquery-1.11.0.min.js&quot;&gt;&lt;/script&gt;




&lt;script&gt;
$(function() {
  $(&quot;*&quot;).contents().filter(function() {
    return this.nodeType==8 &amp;&amp; this.nodeValue.match(/^original/);
  }).each(function(i, e) {
    var tips = e.nodeValue.replace(/^original *[\n\r]|[\n\r]$/g, &#39;&#39;);
    $(this).prev().next().attr(&#39;title&#39;, tips);
  });
});
&lt;/script&gt;


&lt;hr /&gt;

&lt;h3&gt;オリジナルドキュメントと翻訳ドキュメントの差分&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;diff&lt;/code&gt;を使って、オリジナルドキュメントと翻訳ドキュメントの差分を取ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% diff -u README.md README.ja.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力です。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;diff&quot;&gt;&lt;span class=&quot;gd&quot;&gt;--- README.md   2014-02-16 10:20:08.000000000 +0900&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+++ README.ja.md   2014-02-16 10:39:13.000000000 +0900&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;@@ -1,6 +1,10 @@&lt;/span&gt;
 ## AwesomeTool
 
&lt;span class=&quot;gi&quot;&gt;+AwesomeToolは、Rubyで手早くすごいツールを作るためのDSLです。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 AwesomeTools is a DSL for quickly creating awesome tools in Ruby.
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
 ```ruby
 # mytool.rb
&lt;span class=&quot;gu&quot;&gt;@@ -11,13 +15,39 @@&lt;/span&gt;
 end
 ```
 
&lt;span class=&quot;gi&quot;&gt;+Gemをインストールします。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 install the gem:
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
     gem install awesome_tool
 
&lt;span class=&quot;gi&quot;&gt;+そして、実行します。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 And run with:
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
     awesome nhk &amp;#39;charlie&amp;#39;
 
&lt;span class=&quot;gi&quot;&gt;+テレビを付けて、NHKを選曲します。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+`You are awesome, charlie!`というメッセージをスクリーン上で確認できるでしょう。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 Turn on the TV, select NHK.
 You will see `You are awesome, charlie!` message on the screen.
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
[コードの差分は省略]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;オリジナルに対し追加操作だけが行われたことが分かります。&lt;/p&gt;

&lt;h3&gt;オリジナルドキュメントの更新&lt;/h3&gt;

&lt;p&gt;AwesomeToolのAPIが変わりオリジナルドキュメントが次のように更新されたとします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;diff&quot;&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/README.md b/README.md&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;index 6872e9a..0481f7e 100644&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;--- a/README.md&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+++ b/README.md&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;@@ -9,6 +9,10 @@ require &amp;#39;awesome_tool&amp;#39;&lt;/span&gt;
 awesome &amp;#39;nhk&amp;#39; do |name|
   &amp;#39;You are awesome, #{name}!&amp;#39;
 end
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+awesome do |name|&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+  call :nhk&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+end&lt;/span&gt;
 ```
 
 install the gem:
&lt;span class=&quot;gu&quot;&gt;@@ -21,3 +25,9 @@ And run with:&lt;/span&gt;
 
 Turn on the TV, select NHK.
 You will see `You are awesome, charlie!` message on the screen.
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+Alternatively, you can say:&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+    awesome &amp;#39;charlie&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+Look at the sky, you will see the message with clouds.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コードの一部改変と機能説明の追記が行われました。&lt;/p&gt;

&lt;h3&gt;翻訳ドキュメントの更新&lt;/h3&gt;

&lt;p&gt;翻訳ドキュメントがオリジナルに追随しているかみるために、更新後のオリジナルと翻訳ドキュメントの差分を取ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% diff -u README.md README.ja.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力です。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;diff&quot;&gt;&lt;span class=&quot;gd&quot;&gt;--- README.md   2014-02-17 18:51:38.000000000 +0900&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+++ README.ja.md   2014-02-16 10:39:13.000000000 +0900&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;@@ -1,6 +1,10 @@&lt;/span&gt;
 ## AwesomeTool
 
&lt;span class=&quot;gi&quot;&gt;+AwesomeToolは、Rubyで手早くすごいツールを作るためのDSLです。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 AwesomeTools is a DSL for quickly creating awesome tools in Ruby.
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
 ```ruby
 # mytool.rb
&lt;span class=&quot;gu&quot;&gt;@@ -9,25 +13,41 @@&lt;/span&gt;
 awesome &amp;#39;nhk&amp;#39; do |name|
   &amp;#39;You are awesome, #{name}!&amp;#39;
 end
&lt;span class=&quot;gd&quot;&gt;-&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;-awesome do |name|&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;-  call :nhk&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;-end&lt;/span&gt;
 ```
 
&lt;span class=&quot;gi&quot;&gt;+Gemをインストールします。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 install the gem:
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
     gem install awesome_tool
 
&lt;span class=&quot;gi&quot;&gt;+そして、実行します。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 And run with:
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
     awesome nhk &amp;#39;charlie&amp;#39;
 
&lt;span class=&quot;gi&quot;&gt;+テレビを付けて、NHKを選曲します。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+`You are awesome, charlie!`というメッセージをスクリーン上で確認できるでしょう。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 Turn on the TV, select NHK.
 You will see `You are awesome, charlie!` message on the screen.
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;gd&quot;&gt;-Alternatively, you can say:&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;-&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;-    awesome &amp;#39;charlie&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;-&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;-Look at the sky, you will see the message with clouds.&lt;/span&gt;
[コードの差分は省略]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;追随していない部分があることが分かりました（赤字部分）。&lt;/p&gt;

&lt;p&gt;それらの箇所を翻訳ドキュメント側にコピーし、対応訳を書きます。結果をdiffで確認します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;diff&quot;&gt;&lt;span class=&quot;gd&quot;&gt;--- README.md   2014-02-17 18:51:38.000000000 +0900&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+++ README.ja.md   2014-02-17 19:02:00.000000000 +0900&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;@@ -1,6 +1,10 @@&lt;/span&gt;
 ## AwesomeTool
 
&lt;span class=&quot;gi&quot;&gt;+AwesomeToolは、Rubyで手早くすごいツールを作るためのDSLです。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 AwesomeTools is a DSL for quickly creating awesome tools in Ruby.
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
 ```ruby
 # mytool.rb
&lt;span class=&quot;gu&quot;&gt;@@ -15,19 +19,50 @@&lt;/span&gt;
 end
 ```
 
&lt;span class=&quot;gi&quot;&gt;+Gemをインストールします。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 install the gem:
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
     gem install awesome_tool
 
&lt;span class=&quot;gi&quot;&gt;+そして、実行します。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 And run with:
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
     awesome nhk &amp;#39;charlie&amp;#39;
 
&lt;span class=&quot;gi&quot;&gt;+テレビを付けて、NHKを選曲します。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+`You are awesome, charlie!`というメッセージをスクリーン上で確認できるでしょう。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 Turn on the TV, select NHK.
 You will see `You are awesome, charlie!` message on the screen.
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;gi&quot;&gt;+代わりに、次のように言ってもいいです。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 Alternatively, you can say:
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
 
     awesome &amp;#39;charlie&amp;#39;
 
&lt;span class=&quot;gi&quot;&gt;+空を見上げれば、雲で作られた先のメッセージが見えるでしょう。&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&amp;lt;!--original&lt;/span&gt;
 Look at the sky, you will see the message with clouds.
&lt;span class=&quot;gi&quot;&gt;+--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
[コードの差分は省略]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;赤字が消え、翻訳ドキュメントがオリジナルに追随していることが分かります。&lt;/p&gt;

&lt;p&gt;更新後の翻訳ドキュメントをWebに表示してみます。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;AwesomeTool&lt;/h2&gt;




&lt;p&gt;AwesomeToolは、Rubyで手早くすごいツールを作るためのDSLです。&lt;/p&gt;




&lt;!--original
AwesomeTools is a DSL for quickly creating awesome tools in Ruby.
--&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;# mytool.rb
require &amp;#39;awesome_tool&amp;#39;

awesome &amp;#39;nhk&amp;#39; do |name|
  &amp;#39;You are awesome, #{name}!&amp;#39;
end

awesome do |name|
  call :nhk
end
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;Gemをインストールします。&lt;/p&gt;




&lt;!--original
install the gem:
--&gt;




&lt;pre&gt;&lt;code&gt;gem install awesome_tool
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;そして、実行します。&lt;/p&gt;




&lt;!--original
And run with:
--&gt;




&lt;pre&gt;&lt;code&gt;awesome nhk &amp;#39;charlie&amp;#39;
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;テレビを付けて、NHKを選曲します。&lt;br&gt;
&lt;code&gt;You are awesome, charlie!&lt;/code&gt;というメッセージをスクリーン上で確認できるでしょう。&lt;/p&gt;




&lt;!--original
Turn on the TV, select NHK.
You will see `You are awesome, charlie!` message on the screen.
--&gt;




&lt;p&gt;代わりに、次のように言ってもいいです。&lt;/p&gt;




&lt;!--original
Alternatively, you can say:
--&gt;




&lt;pre&gt;&lt;code&gt;awesome &amp;#39;charlie&amp;#39;
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;空を見上げれば、雲で作られた先のメッセージが見えるでしょう。&lt;/p&gt;




&lt;!--original
Look at the sky, you will see the message with clouds.
--&gt;


&lt;hr /&gt;

&lt;h3&gt;トグルによる原文の表示&lt;/h3&gt;

&lt;p&gt;トグルで原文を表示する例も示しておきます。&lt;code&gt;--method&lt;/code&gt;オプションに&lt;code&gt;toggle&lt;/code&gt;を渡します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% toggle create -m=toggle README.md &amp;gt; README.ja.md
% gfm README.ja.md &amp;gt; README.ja.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;README.ja.html&lt;/code&gt;をブラウザで表示すると次のように見えます。文末のアスタリスク*をクリックしてみてください。原文がトグル表示されます。&lt;/p&gt;

&lt;h2&gt;AwesomeTool&lt;/h2&gt;




&lt;p&gt;AwesomeToolは、Rubyで手早くすごいツールを作るためのDSLです。&lt;/p&gt;




&lt;!--toggle_original
AwesomeTools is a DSL for quickly creating awesome tools in Ruby.
--&gt;




&lt;pre lang=&quot;ruby&quot;&gt;&lt;code&gt;# mytool.rb
require &amp;#39;awesome_tool&amp;#39;

awesome &amp;#39;nhk&amp;#39; do |name|
  &amp;#39;You are awesome, #{name}!&amp;#39;
end

awesome do |name|
  call :nhk
end
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;Gemをインストールします。&lt;/p&gt;




&lt;!--toggle_original
install the gem:
--&gt;




&lt;pre&gt;&lt;code&gt;gem install awesome_tool
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;そして、実行します。&lt;/p&gt;




&lt;!--toggle_original
And run with:
--&gt;




&lt;pre&gt;&lt;code&gt;awesome nhk &amp;#39;charlie&amp;#39;
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;テレビを付けて、NHKを選曲します。&lt;br&gt;
&lt;code&gt;You are awesome, charlie!&lt;/code&gt;というメッセージをスクリーン上で確認できるでしょう。&lt;/p&gt;




&lt;!--toggle_original
Turn on the TV, select NHK.
You will see `You are awesome, charlie!` message on the screen.
--&gt;




&lt;p&gt;代わりに、次のように言ってもいいです。&lt;/p&gt;




&lt;!--toggle_original
Alternatively, you can say:
--&gt;




&lt;pre&gt;&lt;code&gt;awesome &amp;#39;charlie&amp;#39;
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;空を見上げれば、雲で作られた先のメッセージが見えるでしょう。&lt;/p&gt;




&lt;!--toggle_original
Look at the sky, you will see the message with clouds.
--&gt;




&lt;script&gt;
$(function() {
  $(&quot;*&quot;).contents().filter(function() {
    return this.nodeType==8 &amp;&amp; this.nodeValue.match(/^toggle_original/);
  }).each(function(i, e) {
    var tooltips = e.nodeValue.replace(/^toggle_original *[\n\r]|[\n\r]$/g, &#39;&#39;);
    var link = &quot;&lt;span&gt;&lt;a href=&#39;#&#39; onclick=&#39;javascript:return false;&#39; class=&#39;toggleLink&#39;&gt;&quot; + &quot;*&quot; + &quot;&lt;/a&gt;&lt;/span&gt;&quot;;
    $(this).prev().next().append(link);
    $(this).prev().next().after(&quot;&lt;pre style=&#39;display:none&#39;&gt;&quot;+ tooltips + &quot;&lt;/pre&gt;&quot;);
  });

  $(&#39;.toggleLink&#39;).click(
    function() {
      if ($(this).text()==&quot;*&quot;) {
       $(this).parent().parent().next(&#39;pre&#39;).slideDown(200);
       $(this).text(&quot;hide&quot;);
      } else {
        $(this).parent().parent().next(&#39;pre&#39;).slideUp(200);
        $(this).text(&quot;*&quot;);
      };
    });
});
&lt;/script&gt;


&lt;hr /&gt;

&lt;p&gt;トグルのためのリンクを変更する場合は、&lt;code&gt;--toggle-link-text&lt;/code&gt;オプションに２つの文字列を渡します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% togglate create README.md --toggle-link-text &#39;show&#39; &#39;close&#39; &amp;gt; README.ja.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;説明は以上です。何かご意見・ご要望ありましたら、このブログのコメントまたはgithubのissueに頂けると助かります。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/melborne/togglate&quot; title=&quot;melborne/togglate&quot;&gt;melborne/togglate&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p style=&#39;color:red&#39;&gt;=== Ruby関連電子書籍100円〜で好評発売中！ ===&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M&#39;ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/rack_cover.png&quot; alt=&quot;rack&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_pack8.png&quot; alt=&quot;pack8&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_parallel_cover.png&quot; alt=&quot;ruby_parallel&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>FeedBurnerは遂に死んだのか？</title>
   <link href="http://melborne.github.io/2014/02/12/goodbye-feedburner"/>
   <updated>2014-02-12T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/02/12/goodbye-feedburner</id>
   <content type="html">&lt;p&gt;既に死にかけていたFeedBurnerを去年2月に設置してRSS配信に利用していましたが、今年1月半ば辺りの記事からの配信が滞っていることが、@otahiさんからのツイートで分かりましたorz..&lt;/p&gt;

&lt;p&gt;FeedBurnerは死んだのですか？&lt;/p&gt;

&lt;p&gt;というわけで、FeedBurner経由の配信は停止しました。本ブログの購読者でFeedBurner経由の配信を登録されている方おられましたら、大変にお手数ですが、右上オレンジのRSSアイコンをクリック、または &lt;a href=&quot;http://melborne.github.io/atom.xml&quot;&gt;http://melborne.github.io/atom.xml&lt;/a&gt; を開いてRSSリーダーへの再登録をお願い申し上げますm(__)m&lt;/p&gt;

&lt;p&gt;@otahiさんありがとうございます。&lt;/p&gt;
</content>
 </entry>
 
 
</feed>

