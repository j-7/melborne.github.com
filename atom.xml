<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>hp12c</title>
 <link href="http://melborne.github.io/atom.xml" rel="self"/>
 <link href="http://melborne.github.io"/>
 <updated>2015-02-20T13:55:40+09:00</updated>
 <id>http://melborne.github.io</id>
 <author>
   <name>kyoendo</name>
   <email>postagie@gmail.com</email>
 </author>

 
 <entry>
   <title>Rubyによる暗黙のFizzBuzzの世界</title>
   <link href="http://melborne.github.io/2015/02/19/implicit-fizzbuzz-in-ruby"/>
   <updated>2015-02-19T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2015/02/19/implicit-fizzbuzz-in-ruby</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://qiita.com/supermomonga/items/b8faf7441ada9c310282&quot; title=&quot;Rubyによる不適切なFizzBuzzの世界 - Qiita&quot;&gt;Rubyによる不適切なFizzBuzzの世界 - Qiita&lt;/a&gt;が、FizzBuzzerを刺激するから…。&lt;/p&gt;

&lt;h2 id=&quot;fizzbuzz-with-toproc&quot;&gt;1. FizzBuzz with to_proc&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FizzBuzz&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:FizzBuzz&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Fizz&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Buzz&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, :Fizz, 4, :Buzz, :Fizz, 7, 8, :Fizz, :Buzz, 11, :Fizz, 13, 14, :FizzBuzz, 16, 17, :Fizz, 19, :Buzz, :Fizz, 22, 23, :Fizz, :Buzz, 26, :Fizz, 28, 29, :FizzBuzz, 31, 32, :Fizz, 34, :Buzz, :Fizz, 37, 38, :Fizz, :Buzz, 41, :Fizz, 43, 44, :FizzBuzz, 46, 47, :Fizz, 49, :Buzz, :Fizz, 52, 53, :Fizz, :Buzz, 56, :Fizz, 58, 59, :FizzBuzz, 61, 62, :Fizz, 64, :Buzz, :Fizz, 67, 68, :Fizz, :Buzz, 71, :Fizz, 73, 74, :FizzBuzz, 76, 77, :Fizz, 79, :Buzz, :Fizz, 82, 83, :Fizz, :Buzz, 86, :Fizz, 88, 89, :FizzBuzz, 91, 92, :Fizz, 94, :Buzz, :Fizz, 97, 98, :Fizz, :Buzz]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;fizzbuzz-with-coerce&quot;&gt;2. FizzBuzz with coerce&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;div_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fixnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zero?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FizzBuzz&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;div_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fizz&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;div_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Buzz&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;div_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fizz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Buzz&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, 16, 17, Fizz, 19, Buzz, Fizz, 22, 23, Fizz, Buzz, 26, Fizz, 28, 29, FizzBuzz, 31, 32, Fizz, 34, Buzz, Fizz, 37, 38, Fizz, Buzz, 41, Fizz, 43, 44, FizzBuzz, 46, 47, Fizz, 49, Buzz, Fizz, 52, 53, Fizz, Buzz, 56, Fizz, 58, 59, FizzBuzz, 61, 62, Fizz, 64, Buzz, Fizz, 67, 68, Fizz, Buzz, 71, Fizz, 73, 74, FizzBuzz, 76, 77, Fizz, 79, Buzz, Fizz, 82, 83, Fizz, Buzz, 86, Fizz, 88, 89, FizzBuzz, 91, 92, Fizz, 94, Buzz, Fizz, 97, 98, Fizz, Buzz]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ちょっと挙動がユニークだけど…&lt;/p&gt;

&lt;p&gt;変態度が足りませんでしたm(__)m&lt;/p&gt;

&lt;p&gt;(追記：2015-02-20)　親切な解説を追加しました。&lt;/p&gt;

&lt;h2 id=&quot;fizzbuzz-with-toproc-1&quot;&gt;FizzBuzz with to_procの親切な解説&lt;/h2&gt;

&lt;p&gt;Rubyではメソッドに引数を渡すとき、&lt;code&gt;&amp;amp;&lt;/code&gt;を前置するとそれをProcオブジェクトと理解しメソッドの実体に渡します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# または、&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_proc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hey!&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;do_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;hey!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;を前置してProcオブジェクト以外のものを渡してみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hey!&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;do_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ~&amp;gt; -:12:in `&amp;lt;main&amp;gt;&#39;: wrong argument type String (expected Proc) (TypeError)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Procが期待されているとのエラーが吐かれました。&lt;/p&gt;

&lt;p&gt;しかしRubyではそれを単に拒絶するのではなく、まずは渡されたオブジェクトがProcオブジェクトになり得るかを試す、つまりそのオブジェクトの&lt;code&gt;to_proc&lt;/code&gt;メソッドを暗黙的にコールするのです。&lt;/p&gt;

&lt;p&gt;‘hey!’オブジェクトにto_procを定義して再度試してみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hey!&#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;do_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;hey!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;うまくいきました。&lt;/p&gt;

&lt;p&gt;FizzBuzz with to_procではRubyのこの仕組みを利用しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FizzBuzz.to_proc&lt;/code&gt;の中身は、@supermomongaさんによる&lt;code&gt;case 0&lt;/code&gt;を使わせてもらいました。エレガントです。解説は次の記事を参照して下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/supermomonga/items/b8faf7441ada9c310282&quot; title=&quot;Rubyによる不適切なFizzBuzzの世界 - Qiita&quot;&gt;Rubyによる不適切なFizzBuzzの世界 - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;fizzbuzz-with-coerce-1&quot;&gt;FizzBuzz with coerceの親切な解説&lt;/h2&gt;

&lt;p&gt;Rubyにおいて演算子の多くはメソッド呼び出しです。&lt;/p&gt;

&lt;p&gt;つまりこれらは、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; -1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 30&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以下のシンタックスシュガーです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; -1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 30&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;次のコードは、Rubyにおけるビット二項演算で論理和を求めるものですが、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これは&lt;code&gt;Fixnum#|&lt;/code&gt;として実装されています。&lt;/p&gt;

&lt;p&gt;FizzBuzz with coerceではこの&lt;code&gt;Fixnum#|&lt;/code&gt;を呼んでいます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fizz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Buzz&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;この中でnとFizzBuzzクラスオブジェクトの論理和を求めています。&lt;/p&gt;

&lt;p&gt;通常、&lt;code&gt;Fixnum#|&lt;/code&gt;はその引数としてFixnumが期待されている筈ですが、それ以外を渡すとどうなるかやってみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FizzBuzz&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ~&amp;gt; -:22:in `|&#39;: Class can&#39;t be coerced into Fixnum (TypeError)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ~&amp;gt; 	from -:22:in `&amp;lt;main&amp;gt;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;クラスはFixnumにcoerce（強制型変換）できないとのエラーが吐かれました。&lt;/p&gt;

&lt;p&gt;これでRubyがFizzBuzzクラスオブジェクトをFixnumに型変換、つまり&lt;code&gt;FizzBuzz.coerce&lt;/code&gt;を暗黙的にコールしていることが分かりました。&lt;/p&gt;

&lt;p&gt;これを実装してみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FizzBuzz&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;coerceでは、呼び出し元のオブジェクトを引数に取って、演算子の２つのオペランドが返るようにします。これにより&lt;code&gt;Fixnum#|&lt;/code&gt;はこれらの値で実行されることになります。&lt;/p&gt;

&lt;p&gt;ここでcoerceの最初の返り値に別のオブジェクトを渡すと、&lt;code&gt;Fixnum#|&lt;/code&gt;の代わりにそのオブジェクトの&lt;code&gt;|&lt;/code&gt;メソッドが呼ばれる、つまり&lt;code&gt;a_object#|&lt;/code&gt;が実行されるようになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FizzBuzz.|&lt;/code&gt;を定義して、やってみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FizzBuzz&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; received!&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;3 received!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;FizzBuzz with coerceではこのテクニックを使って、&lt;code&gt;Fixnum#|&lt;/code&gt;の代わりに&lt;code&gt;FizzBuzz.|&lt;/code&gt;が呼ばれるようにしています。&lt;/p&gt;

&lt;p&gt;さて、次にFizzBuzz with coerceにおける&lt;code&gt;FizzBuzz.|&lt;/code&gt;の実装を見てみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FizzBuzz&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fixnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zero?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 5&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; FizzBuzz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;nが１５で割り切れる場合はFizzBuzzクラスが、それ以外の場合はnが返ります。そしてFizzBuzz with coerceではこの値は次の段、つまりFizzとの演算に渡されます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fizz&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Fizz&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fizz&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 5&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fizz&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; FizzBuzz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fizzクラスの実装は除算の基数が３である以外はFizzBuzzと同じです。よって、上の２つの場合は、FizzBuzzクラスと同様に動作し、nが３で割り切れる場合はFizzクラスが、それ以外の場合はnが返ることになります。&lt;/p&gt;

&lt;p&gt;一方、FizzBuzzとFizzの演算では、FizzBuzzクラスの&lt;code&gt;|&lt;/code&gt;メソッドが再度呼ばれることになります（ここがユニークなところです）。そしてその結果としてFizzBuzzクラスが返り、次の段に渡されることになります。&lt;/p&gt;

&lt;p&gt;Buzzクラスでもこれと同様のことが起こり、一旦途中でFizzBuzz系クラスに変換されると、それがフォールスルーして最後まで維持されることになります。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Ruby de Streem</title>
   <link href="http://melborne.github.io/2014/12/15/ruby-de-streem"/>
   <updated>2014-12-15T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/12/15/ruby-de-streem</id>
   <content type="html">
&lt;blockquote&gt;
  &lt;p&gt;のっぴきならない事情で暫くここを離れてたけど&lt;/p&gt;

  &lt;p&gt;戻ってきたらMatzが新言語を作ってた&lt;/p&gt;

  &lt;p&gt;僕がいないうちにRubyは捨てられてしまったの？&lt;/p&gt;

  &lt;p&gt;僕が暫く目を離しているうちに世の中もMatzも変わってしまって&lt;/p&gt;

  &lt;p&gt;もうだれもRubyを愛さなくなってしまったの？&lt;/p&gt;

&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/matz/streem&quot; title=&quot;matz/streem&quot;&gt;matz/streem&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;streem---stream-based-concurrent-scripting-language&quot;&gt;Streem - stream based concurrent scripting language&lt;/h1&gt;

&lt;p&gt;Streem is a concurrent scripting language based on a programming model
similar to shell, with influences from Ruby, Erlang and other
functional programming languages.&lt;/p&gt;

&lt;p&gt;In Streem, a simple &lt;code&gt;cat&lt;/code&gt; program looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;STDIN | STDOUT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And a simple FizzBuzz will look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Fizz&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Buzz&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ruby-de-streem&quot;&gt;Ruby de Streem&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;でも&lt;/p&gt;

  &lt;p&gt;心配いらないよ、Ruby&lt;/p&gt;

  &lt;p&gt;もう僕が戻ってきたんだから&lt;/p&gt;

  &lt;p&gt;僕はここにいるよ&lt;/p&gt;

&lt;/blockquote&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/4516e808dd4784981aef.js?file=streem.rb&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/4516e808dd4784981aef.js?file=example.rb&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;ごめんなさいごめんなさい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;関連記事：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/03/05/filter-in-ruby/&quot; title=&quot;Rubyでパイプライン？&quot;&gt;Rubyでパイプライン？&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Ruby的FizzBuzz</title>
   <link href="http://melborne.github.io/2014/08/10/fizzbuzzruby"/>
   <updated>2014-08-10T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/08/10/fizzbuzzruby</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://qiita.com/tadsan/items/51d39ec7b49a8e8ee7fd&quot; title=&quot;最終鬼畜FizzBuzz大全 - Qiita&quot;&gt;最終鬼畜FizzBuzz大全 - Qiita&lt;/a&gt;に刺激を受けて、&lt;a href=&quot;http://qiita.com/merborne/items/15b4bbdb2bf46d7ad0c0&quot; title=&quot;Ruby的FizzBuzz - Qiita&quot;&gt;Qiita&lt;/a&gt;のほうにポストしてみたんだけど、こちらは解説付きで。&lt;/p&gt;

&lt;h2 id=&quot;rubyfizzbuzz---&quot;&gt;Ruby的FizzBuzz - その１&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FB&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FizzBuzz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Fizz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Buzz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;detect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16 17 Fizz 19 Buzz Fizz 22 23 Fizz Buzz 26 Fizz 28 29 FizzBuzz 31 32 Fizz 34 Buzz Fizz 37 38 Fizz Buzz 41 Fizz 43 44 FizzBuzz 46 47 Fizz 49 Buzz Fizz 52 53 Fizz Buzz 56 Fizz 58 59 FizzBuzz 61 62 Fizz 64 Buzz Fizz 67 68 Fizz Buzz 71 Fizz 73 74 FizzBuzz 76 77 Fizz 79 Buzz Fizz 82 83 Fizz Buzz 86 Fizz 88 89 FizzBuzz 91 92 Fizz 94 Buzz Fizz 97 98 Fizz Buzz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;解説&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;FB.call&lt;/code&gt;の&lt;code&gt;instance_methods(false)&lt;/code&gt;は、FBクラスに定義されたインスタンスメソッド名つまり&lt;code&gt;:FizzBuzz&lt;/code&gt;, &lt;code&gt;:Fizz&lt;/code&gt;, &lt;code&gt;:Buzz&lt;/code&gt;の配列をそれらが定義された並びで返します。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;detect&lt;/code&gt;のブロックでは各メソッドが、callに渡された引数nを引数に呼び出されます。&lt;/li&gt;
  &lt;li&gt;各メソッドでは引数がそれぞれの基数で割り切れるかが判定されますが、&lt;code&gt;detect&lt;/code&gt;では最初にtrueを返したメソッド名が返ることになります。例えばnが15のときは何れのメソッドの返り値もtrueになりますが、最初に評価される&lt;code&gt;:FizzBuzz&lt;/code&gt;が返ります。&lt;/li&gt;
  &lt;li&gt;全メソッドの評価がfalseのときはdetectの返り値はnilになるので、&lt;code&gt;||&lt;/code&gt;の右辺が実行され、結果引数nがそのまま返されることになります。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;アピールポイント&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;文字列ではなくメソッド名に基いて出力の文字列を構成した点。&lt;/li&gt;
  &lt;li&gt;分岐的制御構造を使っていない点。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rubyfizzbuzz----1&quot;&gt;Ruby的FizzBuzz - その２&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FB&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Fizz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Buzz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                           &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16 17 Fizz 19 Buzz Fizz 22 23 Fizz Buzz 26 Fizz 28 29 FizzBuzz 31 32 Fizz 34 Buzz Fizz 37 38 Fizz Buzz 41 Fizz 43 44 FizzBuzz 46 47 Fizz 49 Buzz Fizz 52 53 Fizz Buzz 56 Fizz 58 59 FizzBuzz 61 62 Fizz 64 Buzz Fizz 67 68 Fizz Buzz 71 Fizz 73 74 FizzBuzz 76 77 Fizz 79 Buzz Fizz 82 83 Fizz Buzz 86 Fizz 88 89 FizzBuzz 91 92 Fizz 94 Buzz Fizz 97 98 Fizz Buzz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;解説&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;その１の発展型です。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FB.call&lt;/code&gt;では、&lt;code&gt;detect&lt;/code&gt;に代えて&lt;code&gt;select&lt;/code&gt;を使い、trueを返すメソッドをすべて返すようにしています。例えば、nが15のときは&lt;code&gt;:Fizz&lt;/code&gt;, &lt;code&gt;:Buzz&lt;/code&gt;の両方が返ります。&lt;/li&gt;
  &lt;li&gt;配列内のシンボル値を&lt;code&gt;to_s&lt;/code&gt;した後、&lt;code&gt;inject(:+)&lt;/code&gt;でそれらを連結します。nが3のときは要素が&lt;code&gt;:Fizz&lt;/code&gt;だけなので&lt;code&gt;Fizz&lt;/code&gt;が返りますが、15のときは&lt;code&gt;:Fizz&lt;/code&gt;, &lt;code&gt;:Buzz&lt;/code&gt;が連結されて&lt;code&gt;FizzBuzz&lt;/code&gt;が返ります。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Array#join&lt;/code&gt;を使うという手もありましたが、空配列が&lt;code&gt;&quot;&quot;&lt;/code&gt;（空文字）になってしまうので、あとの処理が面倒なので避けました。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-3&quot;&gt;アピールポイント&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;selectを使い、Fizz, Buzzの２つのメソッドだけで３種類の出力をできるようにした点。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;御社採用、ご検討のほど、よろしくお願い申し上げますm(__)m&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Ruby製サードパーティライブラリgemのトレンドを知るには「BestGems.org」がベスト</title>
   <link href="http://melborne.github.io/2014/08/08/bestgems-is-best-to-meet-new-gems"/>
   <updated>2014-08-08T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/08/08/bestgems-is-best-to-meet-new-gems</id>
   <content type="html">
&lt;h2 id=&quot;section&quot;&gt;─質問１─&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ruby製サードパーティライブラリ、要は&lt;code&gt;gem&lt;/code&gt;で、何が人気なのかってこと、手っ取り早く知りたいんですけど。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;─回答１─&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;RubyGems.org&lt;/code&gt;の&lt;a href=&quot;https://rubygems.org/stats&quot; title=&quot;stats&quot;&gt;statsページ&lt;/a&gt;を見てください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/bestgems01.png&quot; alt=&quot;bestgem noshadow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;─質問２─&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;えっ？これだけ？この辺は万年上位で固定でしょ。もうちょっと俺の知らないバラエティに富んだものに出会いたいんだけど。俺、Rails用ないし。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;─回答２─&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;カテゴリー別なら&lt;code&gt;The Ruby Toolbox&lt;/code&gt;があります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/bestgems02.png&quot; alt=&quot;bestgem noshadow&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.ruby-toolbox.com/categories/Terminal_Coloring&quot; title=&quot;The Ruby Toolbox - Terminal Coloring&quot;&gt;The Ruby Toolbox - Terminal Coloring&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-4&quot;&gt;─質問３─&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;あんた、俺の質問ちゃんと聞いてるの？カテゴリー別なんて言ってないし。それに、ここのカテゴリーってなんか俺的に信用ないんだよね。取りこぼし多いっていうか..。俺のgem出てこないっていうか..。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-5&quot;&gt;─回答３─&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;GitHub&lt;/code&gt;のTrendingでここ最近の人気リポジトリが分かります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/bestgems03.png&quot; alt=&quot;bestgem noshadow&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/trending?l=ruby&amp;amp;since=monthly&quot; title=&quot;Trending Ruby repositories on GitHub this month&quot;&gt;Trending Ruby repositories on GitHub this month&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これをメールで定期的にもらうこともできます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/explore/subscribe&quot; title=&quot;Subscribe to GitHub&#39;s Explore Email&quot;&gt;Subscribe to GitHub’s Explore Email&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ターミナルで見たいならgemがあります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://rochefort.hatenablog.com/entry/2014/06/09/070300&quot; title=&quot;git-trend というrubygemsを作りました - rochefort&#39;s blog&quot;&gt;git-trend というrubygemsを作りました - rochefort’s blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-6&quot;&gt;─質問４─&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;まあ、これはこれでいいんだけどさ。でも俺、確か、&lt;code&gt;gem&lt;/code&gt;って言ったよね、さっき？人気gemの再発見したいんだけど。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-7&quot;&gt;─回答４─&lt;/h2&gt;

&lt;p&gt;@xmisaoさんが作った&lt;code&gt;BestGems.org&lt;/code&gt;があります。約80,000個ある全gemの総合ダウンロードランキングが分かります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/bestgems04.png&quot; alt=&quot;bestgem noshadow&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://bestgems.org/&quot; title=&quot;BestGems -- Ruby Gems Download Ranking&quot;&gt;BestGems – Ruby Gems Download Ranking&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;BestGems.orgはオープンソースでもあります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/xmisao/bestgems.org&quot; title=&quot;xmisao/bestgems.org&quot;&gt;xmisao/bestgems.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-8&quot;&gt;─質問５─&lt;/h2&gt;

&lt;p&gt;ほぅ。じゃあ50番目に人気のあるgemが何かとかわかるの？&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;─回答５─&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/bestgems05.png&quot; alt=&quot;bestgem noshadow&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://bestgems.org/total?page=3&quot; title=&quot;Total&quot;&gt;41-60 of all 79,598 gems&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前日のダウンロード数（日別）のランキングも分かります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://bestgems.org/daily&quot; title=&quot;Daily Download Ranking -- Best Gems&quot;&gt;Daily Download Ranking – Best Gems&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;総合ランキングと日別ランキングの差から最近の人気度を図る&lt;code&gt;Featured&lt;/code&gt;というものもあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/bestgems06.png&quot; alt=&quot;bestgem noshadow&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://bestgems.org/featured&quot; title=&quot;Featured Gems Ranking -- Best Gems&quot;&gt;Featured Gems Ranking – Best Gems&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-10&quot;&gt;─質問６─&lt;/h2&gt;

&lt;p&gt;おー、これいいね。なんか、面白いgem見つけられるかも。&lt;/p&gt;

&lt;p&gt;あれ、そう言えば、日毎のダウンロード数って、&lt;a href=&quot;http://guides.rubygems.org/rubygems-org-api/&quot; title=&quot;RubyGems.org&quot;&gt;RubyGems.orgのAPI&lt;/a&gt;じゃ、取れなかったと思うんだけど。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;─回答６─&lt;/h2&gt;

&lt;p&gt;BestGems.orgにおけるgemの個別ページでは、ダウンロード数やランキングの伸びをグラフで見ることができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/bestgems07.png&quot; alt=&quot;bestgem noshadow&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://bestgems.org/gems/power_assert&quot; title=&quot;power_assert -- BestGems&quot;&gt;power_assert – BestGems&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-12&quot;&gt;─質問７─&lt;/h2&gt;

&lt;p&gt;BestGems.orgは全gemについて日毎のダウンロード数、収集してるんだ。すごいな。そうすると、自分が作ったgemの成長過程をここで見ることもできる、ってわけだ。&lt;/p&gt;

&lt;p&gt;いや、実は、自分の作ったgemのダウンロード数が気になっちゃって、ここのところ寝れなくってさ。勢いで、&lt;code&gt;mygegegems&lt;/code&gt;ってgem作ったんだけど。あー、要はターミナルで自分のgemのダウンロード数見るやつ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/07/14/count-your-gems-in-your-terminal/&quot; title=&quot;自分が公開しているgemの日々のダウンロード数が気になって寝られません。どうしたらいいでしょうか（Yawhoo知恵袋）&quot;&gt;自分が公開しているgemの日々のダウンロード数が気になって寝られません。どうしたらいいでしょうか（Yawhoo知恵袋）&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/mygegegems&quot; title=&quot;mygegegems&quot;&gt;mygegegems&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これ、一応前日からのダウンロード数の伸びが分かるようになってるんだけど、こんな感じで。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/bestgems08.png&quot; alt=&quot;bestgem noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;で、これ、アクセスした日だけダウンロード数をYAMLファイルに記録するんだけど、アクセスしない日もあるしね..。YAMLにどこまでデータ溜めるんだって話もあるし。&lt;/p&gt;

&lt;p&gt;BestGems.orgの収集したデータにアクセスするAPIでもあったら、捗るんだけどな…。&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;─回答７─&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;BestGems API&lt;/code&gt;が公開されています。各gemについて、「総ダウンロード数」、「日別ダウンロード数」、「総合ランキング」および「日別ランキング」の各トレンド、つまりBestGems.org開設からの日毎のデータがJSONで取れます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/xmisao/bestgems.org/wiki/BestGems-API-v1-Specification&quot; title=&quot;BestGems API v1 Specification · xmisao/bestgems.org Wiki&quot;&gt;BestGems API v1 Specification · xmisao/bestgems.org Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-14&quot;&gt;─質問８─&lt;/h2&gt;

&lt;p&gt;えっ？API、あるの&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% curl http://bestgems.org/api/v1/gems/mygegegems/total_downloads.json

[{&quot;date&quot;:&quot;2014-08-07&quot;,&quot;total_downloads&quot;:583},{&quot;date&quot;:&quot;2014-08-06&quot;,&quot;total_downloads&quot;:569},{&quot;date&quot;:&quot;2014-08-05&quot;,&quot;total_downloads&quot;:569},{&quot;date&quot;:&quot;2014-08-04&quot;,&quot;total_downloads&quot;:563},{&quot;date&quot;:&quot;2014-08-03&quot;,&quot;total_downloads&quot;:557},{&quot;date&quot;:&quot;2014-08-02&quot;,&quot;total_downloads&quot;:550},{&quot;date&quot;:&quot;2014-08-01&quot;,&quot;total_downloads&quot;:544},{&quot;date&quot;:&quot;2014-07-31&quot;,&quot;total_downloads&quot;:542},{&quot;date&quot;:&quot;2014-07-30&quot;,&quot;total_downloads&quot;:534},{&quot;date&quot;:&quot;2014-07-29&quot;,&quot;total_downloads&quot;:489},{&quot;date&quot;:&quot;2014-07-28&quot;,&quot;total_downloads&quot;:466},{&quot;date&quot;:&quot;2014-07-27&quot;,&quot;total_downloads&quot;:444},{&quot;date&quot;:&quot;2014-07-26&quot;,&quot;total_downloads&quot;:441},{&quot;date&quot;:&quot;2014-07-25&quot;,&quot;total_downloads&quot;:441},{&quot;date&quot;:&quot;2014-07-24&quot;,&quot;total_downloads&quot;:428},{&quot;date&quot;:&quot;2014-07-23&quot;,&quot;total_downloads&quot;:359},{&quot;date&quot;:&quot;2014-07-22&quot;,&quot;total_downloads&quot;:326},{&quot;date&quot;:&quot;2014-07-21&quot;,&quot;total_downloads&quot;:326},{&quot;date&quot;:&quot;2014-07-20&quot;,&quot;total_downloads&quot;:312},{&quot;date&quot;:&quot;2014-07-19&quot;,&quot;total_downloads&quot;:303},{&quot;date&quot;:&quot;2014-07-18&quot;,&quot;total_downloads&quot;:303},{&quot;date&quot;:&quot;2014-07-17&quot;,&quot;total_downloads&quot;:303},{&quot;date&quot;:&quot;2014-07-16&quot;,&quot;total_downloads&quot;:301},{&quot;date&quot;:&quot;2014-07-15&quot;,&quot;total_downloads&quot;:255},{&quot;date&quot;:&quot;2014-07-14&quot;,&quot;total_downloads&quot;:202},{&quot;date&quot;:&quot;2014-07-13&quot;,&quot;total_downloads&quot;:141},{&quot;date&quot;:&quot;2014-07-12&quot;,&quot;total_downloads&quot;:6}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おー、これはうれしい。&lt;/p&gt;

&lt;p&gt;するってーと、だ。俺としてはこのデータを、Rubyのオブジェクトとして取り込めればいいんだな。まずは、ラッパークライアント書くか。&lt;/p&gt;

&lt;h2 id=&quot;section-15&quot;&gt;─回答８─&lt;/h2&gt;

&lt;p&gt;BestGems.org APIのRubyラッパーライブラリ&lt;code&gt;bestgems&lt;/code&gt;があります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/bestgems&quot; title=&quot;bestgems&quot;&gt;bestgems&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/melborne/bestgems&quot; title=&quot;melborne/bestgems&quot;&gt;melborne/bestgems&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;こう使います。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bestgems&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bestgems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;client&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;total_downloads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {&quot;2014-08-08&quot;=&amp;gt;48484297, &quot;2014-08-07&quot;=&amp;gt;48426620, &quot;2014-08-06&quot;=&amp;gt;48365953, &quot;2014-08-05&quot;=&amp;gt;48305390, &quot;2014-08-04&quot;=&amp;gt;48246069, &quot;2014-08-03&quot;=&amp;gt;48203248, ... }&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;daily_downloads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {&quot;2014-08-08&quot;=&amp;gt;57677, &quot;2014-08-07&quot;=&amp;gt;60667, &quot;2014-08-06&quot;=&amp;gt;60563, &quot;2014-08-05&quot;=&amp;gt;59321, &quot;2014-08-04&quot;=&amp;gt;42821, &quot;2014-08-03&quot;=&amp;gt;30640, ... }&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;total_ranking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {&quot;2014-08-08&quot;=&amp;gt;2, &quot;2014-08-07&quot;=&amp;gt;2, &quot;2014-08-06&quot;=&amp;gt;2, &quot;2014-08-05&quot;=&amp;gt;2, &quot;2014-08-04&quot;=&amp;gt;2, &quot;2014-08-03&quot;=&amp;gt;2, &quot;2014-08-02&quot;=&amp;gt;2, &quot;2014-08-01&quot;=&amp;gt;2, &quot;2014-07-31&quot;=&amp;gt;2, ... }&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;daily_ranking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {&quot;2014-08-08&quot;=&amp;gt;6, &quot;2014-08-07&quot;=&amp;gt;6, &quot;2014-08-06&quot;=&amp;gt;6, &quot;2014-08-05&quot;=&amp;gt;7, &quot;2014-08-04&quot;=&amp;gt;4, &quot;2014-08-03&quot;=&amp;gt;3, &quot;2014-08-02&quot;=&amp;gt;3, &quot;2014-08-01&quot;=&amp;gt;6, &quot;2014-07-31&quot;=&amp;gt;6, ... }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-16&quot;&gt;─質問９─&lt;/h2&gt;

&lt;p&gt;おー、こりゃ助かる。これ、誰が作ったの？&lt;/p&gt;

&lt;h2 id=&quot;section-17&quot;&gt;─回答９─&lt;/h2&gt;

&lt;p&gt;あなた様です&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-18&quot;&gt;─質問１０─&lt;/h2&gt;

&lt;p&gt;そうか、じゃあちょっと信用ならなぃ..。えっ？俺？…そうか、昨日書いたのか…。記憶力落ちたな。あー&lt;a href=&quot;https://github.com/octokit/octokit.rb&quot; title=&quot;octokit/octokit.rb&quot;&gt;octokit.rb&lt;/a&gt;のコード&lt;del&gt;パクリ&lt;/del&gt;ちらちら見ながら、書いてたわ..。&lt;/p&gt;

&lt;p&gt;まあ、それはいいとして、BesGems.orgの話に戻るんだけど、全gemのランキングが分かるっていったよね？そうすると、不人気の、つまり「ぺけ」のほうのgemも分かるってことだよね？「不人気gemベスト５０」とか、ちょっと興味あるな…。それ、見せてみてよ..。&lt;/p&gt;

&lt;h2 id=&quot;section-19&quot;&gt;─回答１０─&lt;/h2&gt;

&lt;p&gt;こちらになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/bestgems09.png&quot; alt=&quot;bestgem noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下から５番目…orz&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(追記：2014-8-9) bestgems gemの仕様変更に伴い記述（コード）を変更しました。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
	&lt;ol&gt;
		&lt;li id=&quot;fn:1&quot;&gt;実のところBestGems.orgのAPIはtwitter上での@xmisaoさんと僕とのやりとりで生まれたのでした。https://twitter.com/merborne/status/488681089586585600 &lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;fn:2&quot;&gt;今日はこれが言いたかった &lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>ターミナルにデジタル式デカ文字を出力する「digi_moji」の紹介</title>
   <link href="http://melborne.github.io/2014/08/04/show-big-words-on-your-terminal-with-digimoji"/>
   <updated>2014-08-04T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/08/04/show-big-words-on-your-terminal-with-digimoji</id>
   <content type="html">
&lt;p&gt;個人的にはターミナル文字の色付けツールである拙作「&lt;a href=&quot;https://rubygems.org/gems/colcolor&quot; title=&quot;colcolor&quot;&gt;colcolor&lt;/a&gt;」を気に入ってまして。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/07/14/yet-another-terminal-color-for-ruby/&quot; title=&quot;Yet Another Terminal Color for Ruby: Colcolorの紹介&quot;&gt;Yet Another Terminal Color for Ruby: Colcolorの紹介&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/colcolor&quot; title=&quot;colcolor&quot;&gt;colcolor&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;colcolor&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Languages: Python Lisp Ruby Perl Haskell Erlang&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:magenta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyclic&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:red_bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:black_magenta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyclic&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji1.png&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このデモ的なものを作って宣伝できないかと考えたわけです。&lt;/p&gt;

&lt;p&gt;それで「&lt;a href=&quot;https://rubygems.org/gems/digi_moji&quot; title=&quot;digi_moji&quot;&gt;digi_moji&lt;/a&gt;」なるツールが生まれました。&lt;/p&gt;

&lt;p&gt;で、ステマをしたのですが…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/08/04/can-you-see-words-on-your-terminal/&quot; target=&quot;_blank&quot;&gt;わかりやすいREADME.mdの書き方がわかりません。どうしたらいいでしょうか（Yawhoo知恵袋） - digi_mojiのステマ &lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://melborne.github.io/2014/08/04/can-you-see-words-on-your-terminal/&quot; class=&quot;http-bookmark&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://melborne.github.io/2014/08/04/can-you-see-words-on-your-terminal/&quot; alt=&quot;error&quot; class=&quot;http-bookmark&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;見事にコケましたorz&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;そんなわけで…。&lt;/p&gt;

&lt;p&gt;ここでちゃんと&lt;code&gt;digi_moji&lt;/code&gt;の紹介記事を書いておくことにします。&lt;/p&gt;

&lt;h2 id=&quot;digimoji&quot;&gt;DigiMojiとは&lt;/h2&gt;

&lt;p&gt;5x7で構成されたデジタル文字をターミナルに表示するためのツールです。裏で先の&lt;code&gt;colcolor&lt;/code&gt;を使っているので文字にANSIカラーによる色付けができます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/digi_moji&quot; title=&quot;digi_moji&quot;&gt;digi_moji&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/melborne/digi_moji&quot; title=&quot;melborne/digi_moji&quot;&gt;melborne/digi_moji&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;gem install digi_moji&lt;/code&gt;すると、&lt;code&gt;digi_moji&lt;/code&gt;というターミナルコマンドが一緒にインストールされて使えるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji help
Commands:
  digi_moji help [COMMAND]  # Describe available commands or one specific command
  digi_moji new WORD        # Print a digital word
  digi_moji time            # Print current time
  digi_moji timer SEC       # Print count down timer

Options:
  -f, [--fg=FG]      # Foreground color
                     # Default: bg_white
  -b, [--bg=BG]      # Background color
  -c, [--cell=CELL]  # Cell character
  -w, [--width=N]    # Character width
                     # Default: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;digimoji-new&quot;&gt;digi_moji newコマンド&lt;/h2&gt;

&lt;p&gt;ターミナル上に単純に文字を出力するには&lt;code&gt;digi_moji new&lt;/code&gt;コマンドを使います。引数として出力したい文字を渡します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji new BIGGER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji2.png&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;スペースを含むときは文字列をクオートしてください。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;new&lt;/code&gt;コマンドにはいくつかのオプションがあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji help new
Usage:
  digi_moji new WORD

Options:
  -f, [--fg=FG]      # Foreground color
                     # Default: bg_white
  -b, [--bg=BG]      # Background color
  -c, [--cell=CELL]  # Cell character
  -w, [--width=N]    # Character width
                     # Default: 2

Print a digital word
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;色を付けてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji new BIGGER --fg=bg_red --bg=bg_blue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji3.png&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;色指定の際の注意点は、&lt;code&gt;--fg&lt;/code&gt;、&lt;code&gt;--bg&lt;/code&gt;ともに、&lt;code&gt;bg_&amp;lt;color&amp;gt;&lt;/code&gt;のように背景色指定を渡すことです。これは文字を構成する各セルがスペース（空文字）で表現されているので、前景色を指定しても色が出ないためです。&lt;/p&gt;

&lt;p&gt;各セルの文字を空文字以外にセットすると前景色が効くようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji new BIGGER --fg=green --cell=B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji4.png&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;前景色が効くようになると、&lt;code&gt;blink&lt;/code&gt;や&lt;code&gt;underscore&lt;/code&gt;などのテキスト属性が使えるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji new BIGGER --fg=green_bold --cell=B --bg=green_blink
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji5.gif&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--fg&lt;/code&gt;、&lt;code&gt;--bg&lt;/code&gt;に渡す引数のフォーマットは&lt;code&gt;colcolor&lt;/code&gt;のそれに倣っていますので、先に示したcolcolorの記事を参考にしてください。&lt;/p&gt;

&lt;p&gt;文字の大きさを調整したい場合は、&lt;code&gt;--width&lt;/code&gt;オプションを使います。デフォルトは&lt;code&gt;2&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji6.png&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;英大文字、英小文字、キーボード上に表記された記号には概ね対応しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji7.png&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;digimoji-time&quot;&gt;digi_moji timeコマンド&lt;/h2&gt;

&lt;p&gt;デジタル文字の代表と言えば、それは「デジタル時計」です。&lt;code&gt;time&lt;/code&gt;コマンドはまさにそのためのコマンドです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji time -f=bg_cyan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji8.gif&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ターミナル上に好きな色のデジタル時計を表示できます。&lt;code&gt;Ctrl+c&lt;/code&gt;で終了します。&lt;/p&gt;

&lt;p&gt;色を工夫すれば、オリジナリティ溢れた時計が作れます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji time -f=cyan  -b=yellow_blink -c=T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji9.gif&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;いや、ちょっと見づらいですか。&lt;/p&gt;

&lt;h2 id=&quot;digimoji-timer&quot;&gt;digi_moji timerコマンド&lt;/h2&gt;

&lt;p&gt;「デジタル時計」があるなら「タイマー」もほしいと思うのが人情です。&lt;code&gt;timer&lt;/code&gt;コマンドは引数で渡した時間（デフォルトで秒）を計測するカウントダウンタイマーを出力します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % digi_moji timer 5 -f=bg_magenta
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji10.gif&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;timer&lt;/code&gt;コマンドには追加のオプションとして、&lt;code&gt;--unit&lt;/code&gt;、&lt;code&gt;--message&lt;/code&gt;、&lt;code&gt;--message-color&lt;/code&gt;があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji help timer
Usage:
  digi_moji timer SEC

Options:
  -m, [--message=MESSAGE]              # Message on time&#39;s up
                                       # Default: TIME&#39;S UP!
  -k, [--message-color=MESSAGE_COLOR]  # Message color
                                       # Default: bg_red
  -u, [--unit=UNIT]                    # Argument unit
                                       # Default: sec
  -f, [--fg=FG]                        # Foreground color
                                       # Default: bg_white
  -b, [--bg=BG]                        # Background color
  -c, [--cell=CELL]                    # Cell character
  -w, [--width=N]                      # Character width
                                       # Default: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--unit&lt;/code&gt;は引数の単位を変えるもので、’min’, ‘hour’が渡せます。&lt;code&gt;--message&lt;/code&gt;は終了メッセージとして”TIME’S UP!”以外を表示できるようにします。&lt;code&gt;--message-color&lt;/code&gt;はそのメッセージの色を指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji timer 3 -u=min -f=bg_green -m=EAT -k=bg_yellow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji11.gif&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Rubyスクリプトからの使い方&lt;/h2&gt;

&lt;p&gt;デジ文字は&lt;code&gt;DigiMoji::String.new&lt;/code&gt;で生成します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;digi_moji&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DigiMoji&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RUBY&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fg&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&#39;bg_red&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji12.png&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;String#to_digimoji&lt;/code&gt;を用意してあるので、このコードは次のように書くこともできます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;digi_moji&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RUBY&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_digimoji&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fg&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&#39;bg_red&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;いまのところインスタンスメソッドは、&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;join&lt;/code&gt;、&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;の結合系メソッドだけです。&lt;code&gt;join&lt;/code&gt;はオプションを渡しやすくするための&lt;code&gt;+&lt;/code&gt;のエイリアスです。&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;はデジ文字を破壊的に結合します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RUBY&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_digimoji&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fg&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&#39;bg_red&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IST&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fg&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&#39;bg_green&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IST&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji13.png&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;各結合系メソッドには、&lt;code&gt;DigiMoji::String&lt;/code&gt;オブジェクトを渡してもいいです。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;特殊文字&lt;/h2&gt;

&lt;p&gt;いくつかの非ASCII文字に特殊文字が割り当てられています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;≤&lt;/code&gt;文字にはARROW_LEFT、&lt;code&gt;≥&lt;/code&gt;文字にはARROW_RIGHT、&lt;code&gt;¬&lt;/code&gt;文字にはARROW_UP、&lt;code&gt;—&lt;/code&gt;文字にはARROW_DOWNが割り当てられています。同様に、&lt;code&gt;÷&lt;/code&gt;文字にはDIVIDE、&lt;code&gt;æ&lt;/code&gt;文字にはBLOCKが割り当てられています。これらの文字は、&lt;code&gt;alt + &amp;lt;key&amp;gt;&lt;/code&gt;のコンビネーションでそれぞれ入力可能です（&lt;code&gt;alt + ,&lt;/code&gt;、&lt;code&gt;alt + .&lt;/code&gt;、&lt;code&gt;alt + L&lt;/code&gt;、&lt;code&gt;alt + ;&lt;/code&gt;、&lt;code&gt;alt + /&lt;/code&gt;、&lt;code&gt;alt + &#39;&lt;/code&gt;）。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;digi_moji&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(≤ ≥ ¬ — ÷ æ)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(red green yellow blue magenta cyan)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_enum&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_digimoji&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fg&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&quot;bg_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji14.png&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;デジ文字のユーザ定義&lt;/h2&gt;

&lt;p&gt;使われていない非ASCII文字を使って、独自のデジ文字を登録することができます。&lt;code&gt;Ω&lt;/code&gt;（alt + z）を登録してみます。&lt;/p&gt;

&lt;p&gt;デジ文字の登録には、&lt;code&gt;DigiMoji::Char.register&lt;/code&gt;を使います。第１引数に登録する文字、第２引数にデジ文字を構成するセルを配列で定義します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;digi_moji&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;DigiMoji&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ω&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(f f f f f
                                f t t t f
                                t f f f t
                                t f f f t
                                t f f f t
                                f t f t f
                                t t f t t)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;18.3Ω&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_digimoji&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fg&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&#39;bg_green&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;コードにあるように、セルの定義は文字&lt;code&gt;t&lt;/code&gt;と&lt;code&gt;f&lt;/code&gt;の１次元配列で行います。&lt;code&gt;t&lt;/code&gt;の箇所が文字の形を構成します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/08/digi_moji15.png&quot; alt=&quot;digi_moji noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上で説明を終わります。まあ、どんな場面で使えるかわかりませんが、&lt;code&gt;digi_moji&lt;/code&gt;をよろしくです！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/digi_moji&quot; title=&quot;digi_moji&quot;&gt;digi_moji&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/melborne/digi_moji&quot; title=&quot;melborne/digi_moji&quot;&gt;melborne/digi_moji&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>わかりやすいREADME.mdの書き方がわかりません。どうしたらいいでしょうか（Yawhoo知恵袋） - digi_mojiのステマ</title>
   <link href="http://melborne.github.io/2014/08/04/can-you-see-words-on-your-terminal"/>
   <updated>2014-08-04T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/08/04/can-you-see-words-on-your-terminal</id>
   <content type="html">
&lt;h2 id=&quot;section&quot;&gt;質問&lt;/h2&gt;

&lt;p&gt;【ID非公開さん】&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GitHubで自作ツールを公開して世界中の人に使ってもらいたいと考えています。でも自分は英語が苦手です。どうしたらいいでしょうか。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ベストアンサーに選ばれた回答&lt;/h2&gt;

&lt;p&gt;【SOTAさん】&lt;/p&gt;

&lt;p&gt;この記事を読んでください。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://deeeet.com/writing/2014/07/31/readme/&quot; title=&quot;わかりやすいREADME.mdを書く SOTA&quot;&gt;わかりやすいREADME.mdを書く SOTA&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;ベストアンサー以外の回答&lt;/h2&gt;

&lt;p&gt;【melborneさん】&lt;/p&gt;

&lt;p&gt;ビジュアルに訴えるツールを作って、README.mdをそのスクショで埋めます。英文は最小限に留めましょう。作ったツールがビジュアルに訴えないもののときは、&lt;a href=&quot;https://rubygems.org/gems/gviz&quot; title=&quot;gviz&quot;&gt;gviz&lt;/a&gt;などのツールを使って説明をビジュアライズしてください。以下にサンプルを示します。&lt;/p&gt;

&lt;h2 id=&quot;readmemd&quot;&gt;README.mdのサンプル&lt;/h2&gt;

&lt;p&gt;以下は、チンピラgem作者の&lt;code&gt;melborne&lt;/code&gt;さんの&lt;code&gt;digi_moji&lt;/code&gt;というツールのREADME.mdです。英語がちょっと怪しいですが、スクショがあることでツールの目的が明確になっています。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/digi_moji&quot; title=&quot;digi_moji&quot;&gt;digi_moji&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/melborne/digi_moji&quot; title=&quot;melborne/digi_moji&quot;&gt;melborne/digi_moji&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;digimoji&quot;&gt;DigiMoji&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/melborne/digi_moji&quot;&gt;&lt;img src=&quot;https://travis-ci.org/melborne/digi_moji.svg&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5x7 digital color words on your terminal.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Add this line to your application’s Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;digi_moji&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or install it yourself as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install digi_moji
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;usage-in-your-terminal&quot;&gt;Usage in your terminal&lt;/h2&gt;

&lt;h3 id=&quot;new-command&quot;&gt;new command&lt;/h3&gt;

&lt;p&gt;Try &lt;code&gt;digi_moji new&lt;/code&gt; command with words:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji new RUBY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/melborne/digi_moji/raw/screenshot/sample1.png&quot; alt=&quot;sample1&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji new RUBY --fg=bg_red --bg=bg_yellow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/melborne/digi_moji/raw/screenshot/sample2.png&quot; alt=&quot;sample2&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% digi_moji new RUBY --fg=red --bg=red_blink --cell=&#39;R&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/melborne/digi_moji/raw/screenshot/sample3.gif&quot; alt=&quot;sample3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;time-command&quot;&gt;time command&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;digi_moji time&lt;/code&gt; outputs current time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/melborne/digi_moji/raw/screenshot/sample4.gif&quot; alt=&quot;sample4&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;timer-command&quot;&gt;timer command&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;digi_moji timer&lt;/code&gt; outputs count down timer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/melborne/digi_moji/raw/screenshot/sample5.gif&quot; alt=&quot;sample5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;digi_moji help&lt;/code&gt; for more info.&lt;/p&gt;

&lt;h2 id=&quot;usage-as-ruby-script&quot;&gt;Usage as ruby script&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;digi_moji&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DigiMoji&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fg&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&#39;bg_green&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bg&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&#39;bg_yellow&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;LLO!&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LP!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fg&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&#39;bg_red&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/melborne/digi_moji/raw/screenshot/sample6.png&quot; alt=&quot;sample6&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Fork it ( https://github.com/[my-github-username]/digi_moji/fork )&lt;/li&gt;
  &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Create a new Pull Request&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;digi_moji&lt;/code&gt;をよろしくね！&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>カラム指向ターミナルカラーライブラリ「colcolor」にcyclicオプションを付けました！</title>
   <link href="http://melborne.github.io/2014/07/28/examples-of-colcolor-cycle-option"/>
   <updated>2014-07-28T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/07/28/examples-of-colcolor-cycle-option</id>
   <content type="html">
&lt;p&gt;先日、カラム指向ターミナルカラーライブラリ「colcolor」というのを公開しまして。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/07/14/yet-another-terminal-color-for-ruby/&quot; title=&quot;Yet Another Terminal Color for Ruby: Colcolorの紹介&quot;&gt;Yet Another Terminal Color for Ruby: Colcolorの紹介&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/colcolor&quot; title=&quot;colcolor&quot;&gt;colcolor&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;colcolorはStringクラスに&lt;code&gt;colco&lt;/code&gt;というメソッドを挿します。colcoでは引数として複数の色名を受け取って単語区切りで文字を彩色します。こんな感じです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;colcolor&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zero?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;__END__
lang year designer
Ruby 1993 Yukihiro Matsumoto
Lisp 1958 John McCarthy
C++ 1983 Bjarne Stroustrup&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ターミナル出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/07/colcolor_cycle1.png&quot; alt=&quot;colcolor noshadow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cyclic&quot;&gt;cyclicオプション&lt;/h2&gt;

&lt;p&gt;で、この度&lt;code&gt;cyclic&lt;/code&gt;オプションをcolcoに渡せるようにしたので、紹介します。&lt;/p&gt;

&lt;p&gt;colcolorでは渡した色数が単語数に対して不足するとき、残りの単語は色付けされないのですが、このcyclicオプションを&lt;code&gt;true&lt;/code&gt;にセットすると、与えられた色を残りの単語に対しても繰り返し適用するようになります。こんな感じです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;colcolor&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
A dynamic, open source programming language
with a focus on simplicity and productivity.
It has an elegant syntax that is natural to
read and easy to write.
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyclic&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ターミナル出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/07/colcolor_cycle2.png&quot; alt=&quot;colcolor noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;赤、緑、青、黄が単語に対して繰り返し適用されている様子がわかります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;regexp&lt;/code&gt;オプションと組み合わせると、少し面白いこともできます。regexpに&lt;code&gt;/./&lt;/code&gt;を渡して色区切りを文字ベースにしてみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;colcolor&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
A dynamic, open source programming language
with a focus on simplicity and productivity.
It has an elegant syntax that is natural to
read and easy to write.
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyclic&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ターミナル出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/07/colcolor_cycle3.png&quot; alt=&quot;colcolor noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こんなこともできます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;colcolor&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%i(bg_red bg_yellow)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rotate!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyclic&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/)
end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ターミナル出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/07/colcolor_cycle4.png&quot; alt=&quot;colcolor noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;colcolor&lt;/code&gt;をどうぞよろしく！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/07/14/yet-another-terminal-color-for-ruby/&quot; title=&quot;Yet Another Terminal Color for Ruby: Colcolorの紹介&quot;&gt;Yet Another Terminal Color for Ruby: Colcolorの紹介&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/colcolor&quot; title=&quot;colcolor&quot;&gt;colcolor&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/melborne/colcolor&quot; title=&quot;melborne/colcolor&quot;&gt;melborne/colcolor&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;(追記：2014-7-30) オプション名を”cycle”から”cyclic”に変更しました（version 0.0.5）。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Yet Another Terminal Color for Ruby: Colcolorの紹介</title>
   <link href="http://melborne.github.io/2014/07/14/yet-another-terminal-color-for-ruby"/>
   <updated>2014-07-14T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/07/14/yet-another-terminal-color-for-ruby</id>
   <content type="html">
&lt;p&gt;巷にはターミナル文字のカラー化を楽にするライブラリが溢れています。僕も以前にその幾つかを紹介した記事を書きました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2010/11/07/Ruby-ANSI/&quot; title=&quot;RubyでANSIカラーシーケンスを学ぼう！&quot;&gt;RubyでANSIカラーシーケンスを学ぼう！&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;にも拘わらずみんな、人の作ったライブラリが自分のテイストに合わないのか、自分用に、しかし他と似たようなものをまた作って、このリストを更に長くしていくという傾向があるようです。&lt;a href=&quot;https://rubygems.org/search?utf8=%E2%9C%93&amp;amp;query=color&quot; title=&quot;RubyGems.org&quot;&gt;RubyGems.org&lt;/a&gt;で&lt;code&gt;color&lt;/code&gt;を検索してみてください。僕が言っていることが冗談ではないということが分かるでしょう。&lt;/p&gt;

&lt;p&gt;これだけ大量のカラー化ライブラリがあるとどれを選ぶべきか皆目わからず、人気どころを２、３試してみてそれらが合わなかったら、他を探すより自分で作ったほうが早い、となるのも頷けます。&lt;/p&gt;

&lt;p&gt;え〜、それで、ちょっと言いづらいのですが…。&lt;/p&gt;

&lt;p&gt;ご多分に漏れず…。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;「Colcolor」というgemを作りましたよ！&amp;gt; まじか。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/colcolor&quot; title=&quot;colcolor&quot;&gt;colcolor&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/melborne/colcolor&quot; title=&quot;melborne/colcolor&quot;&gt;melborne/colcolor&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;colcolor&quot;&gt;Colcolorの特徴&lt;/h2&gt;

&lt;p&gt;殆どのカラーライブラリは、Stringにカラー用のメソッドを挿して、そのメソッドで文字列の前後にエスケープシーケンスを挿入します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Charlie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;\e[31mChalie\e[0m&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;colcolor&lt;/code&gt;もその点は他のライブラリと同じで、Stringに&lt;code&gt;colco&lt;/code&gt;というインスタンスメソッドを追加します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Charlie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;\e[31mChalie\e[0m&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;colcolor&lt;/code&gt;が特徴的なのは、他のライブラリが行指向のものであるのに対して、列（カラム）指向である点です。つまり一行におけるホワイトスペースで区切られたカラムを認識し、それ毎に異なるカラーを適用できるのです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Charlie 21 programmer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cyan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;\e[31mCharlie\e[0m \e[33m21\e[0m \e[36mprogrammer\e[0m&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;例えば、タブ区切りのリストにおいて、そのカラムごとに色を変えたい場合は、次のように簡単にできます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;colcolor&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
Charlie&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;programmer
Bill&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;doctor
Liz&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;student
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/07/colco1.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;背景色を作りたいときは、&lt;code&gt;:bg_green&lt;/code&gt;などとします。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;複数属性の適用&lt;/h2&gt;

&lt;p&gt;一つのカラムに対して、前景色と背景色など複数の属性を適用したい場合は、アンダースコア（&lt;code&gt;_&lt;/code&gt;）で属性をつなぎます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:red_yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue_underline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最初の色が前景色、２つ目以降が背景色になります。出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/07/colco2.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;緑背景に赤文字を点滅させたいときは、&lt;code&gt;:red_green_blink&lt;/code&gt;などとします。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;カスタムカラムパターン&lt;/h2&gt;

&lt;p&gt;デフォルトではホワイトスペースをカラムの区切りと認識して各色を適用しますが、&lt;code&gt;regexp&lt;/code&gt;オプションでこれをカスタマイズできます。&lt;/p&gt;

&lt;p&gt;例えば、リストにスペースで区切られた名前と苗字が含まれていて、そこは連続した背景色にしたい場合、次のようにします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
Charlie Brown&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;programmer
Bill Clinton&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;doctor
Liz Taylor&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;student
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 不適切な例:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bg_green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bg_green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue_underline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# regexpオプションを使った例:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^.*?(?=\t)|\S+/&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 最初のタブの前、または空白以外にマッチ&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bg_green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blue_underline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;出力です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/07/colco3.png&quot; alt=&quot;Alt title noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;良かったら試してみてください。&lt;/p&gt;

&lt;p&gt;以上、Yet Another Terminal Color for Rubyのお話でしたm(__)m&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/colcolor&quot; title=&quot;colcolor&quot;&gt;colcolor&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/melborne/colcolor&quot; title=&quot;melborne/colcolor&quot;&gt;melborne/colcolor&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;(追記：2014-7-28) &lt;/p&gt;

&lt;p&gt;&lt;code&gt;colcolor&lt;/code&gt;にcycleオプションを付けました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/07/28/examples-of-colcolor-cycle-option/&quot; title=&quot;カラム指向ターミナルカラーライブラリ「colcolor」にcycleオプションを付けました！&quot;&gt;カラム指向ターミナルカラーライブラリ「colcolor」にcycleオプションを付けました！&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 
</feed>

