<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>hp12c</title>
 <link href="http://melborne.github.io/atom.xml" rel="self"/>
 <link href="http://melborne.github.io"/>
 <updated>2014-05-13T08:12:53+09:00</updated>
 <id>http://melborne.github.io</id>
 <author>
   <name>kyoendo</name>
   <email>postagie@gmail.com</email>
 </author>

 
 <entry>
   <title>(注意)「Let It Fall」は、アナと雪の女王の挿入歌「Let It Go」と何ら関係ございません！</title>
   <link href="http://melborne.github.io/2014/05/12/letitfall-is-not-letitgo"/>
   <updated>2014-05-12T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/05/12/letitfall-is-not-letitgo</id>
   <content type="html">
&lt;p&gt;5月1日に公開した「&lt;a href=&quot;https://rubygems.org/gems/let_it_fall&quot; title=&quot;let_it_fall&quot;&gt;let_it_fall&lt;/a&gt;」のダウンロード数がこの10日間で1000に達しました。私が今まで公開してきたチンピラGemsの中ではダントツの最速記録です。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://bestgems.org/gems/let_it_fall&quot; title=&quot;let_it_fall -- BestGems&quot;&gt;let_it_fall – BestGems&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/05/let_it_fall01.png&quot; alt=&quot;let_it_fall&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;誰がダウンロードしているのか&lt;/h2&gt;

&lt;p&gt;この原因を考察してみると、一つの予兆に思い当たります。&lt;/p&gt;

&lt;p&gt;私はlet_it_fallを次のブログ記事で公開しました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/05/01/let-it-fall-in-the-mac-terminal/&quot; title=&quot;Macのターミナルで〇〇が降る&quot;&gt;Macのターミナルで〇〇が降る&lt;/a&gt; &lt;a href=&quot;http://melborne.github.io/2014/05/01/let-it-fall-in-the-mac-terminal/&quot; target=&quot;_blank&quot;&gt; &lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://melborne.github.io/2014/05/01/let-it-fall-in-the-mac-terminal/&quot; class=&quot;http-bookmark&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://melborne.github.io/2014/05/01/let-it-fall-in-the-mac-terminal/&quot; alt=&quot;error&quot; class=&quot;http-bookmark&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この記事に対するアクセスはそこそこでしたが、これが上記のダウンロード数を導くほどのものというのはちょっと考えにくいです。&lt;/p&gt;

&lt;p&gt;一方で、私はその前日に次のような記事を書いていました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/04/30/let-it-smile-in-the-terminal/&quot; title=&quot;Macのターミナルで顔が降る&quot;&gt;Macのターミナルで顔が降る&lt;/a&gt; &lt;a href=&quot;http://melborne.github.io/2014/04/30/let-it-smile-in-the-terminal/&quot; target=&quot;_blank&quot;&gt; &lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://melborne.github.io/2014/04/30/let-it-smile-in-the-terminal/&quot; class=&quot;http-bookmark&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://melborne.github.io/2014/04/30/let-it-smile-in-the-terminal/&quot; alt=&quot;error&quot; class=&quot;http-bookmark&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この記事はlet_it_fallのベースとなっているRubyのワンライナーを紹介する記事ですが、ご覧のようにはてブ数は少なく、一見、この記事が影響しているようにも見えません。&lt;/p&gt;

&lt;p&gt;ところが、この記事に対する公開日とその翌日２日間（4/30, 5/1）の実際のアクセス数は次のとおりでした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/05/let_it_fall02.png&quot; alt=&quot;let_it_fall&quot; /&gt;&lt;/p&gt;

&lt;p&gt;私は不思議に思いそのアクセス経路を辿ってみると、果たしてその大半は「&lt;a href=&quot;https://ja-jp.facebook.com/&quot; title=&quot;Facebook&quot;&gt;Facebook&lt;/a&gt;」からの流入であることが判明しました。&lt;/p&gt;

&lt;p&gt;つまり、この記事を読んだ多くのユーザは、普段ここを訪れるギークなまたははてなな人達ではなく、Facebookを住み処とするスーツの人達だったのです&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;！&lt;/p&gt;

&lt;p&gt;確かにそこには彼らの足跡が残されていました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014/05/let_it_fall03.png&quot; alt=&quot;let_it_fall&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このブログの記事に対する「いいね！」数が二桁になることは稀ですから、これは異常事態です。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;私の結論&lt;/h2&gt;

&lt;p&gt;これで、let_it_fall大量ダウンロードの原因がはっきりしました。私の推論はこうです。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;普段ここを訪れないスーツの人達の目が、記事の近くにあった「let_it_fall」という文字に留まり、これを「Let It Go」と空見して、このソフトをダウンロードして実行すれば、松さんかMay Jのあの素晴らしい歌声が聴けると勘違いして、思わずMacのターミナルを開いて&lt;code&gt;gem install let_it_fall&lt;/code&gt;し、さらに&lt;code&gt;let_it_fall face&lt;/code&gt;とか打ってしまい、なんだか訳の分からないものを見させられてオレの貴重な時間を返せと叫ぶも、フリーで無保証なソフト故に法令に従えば作者に文句も言えず泣き寝入っている。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;お詫びに代えて&lt;/h2&gt;

&lt;p&gt;このような事態に、作者である私は大変に心苦しい思いでいるのですが、さりとて皆様の期待通りに&lt;code&gt;let_it_fall&lt;/code&gt;で「Let It Go」を再生することは著作権法上の問題もあり叶いません。&lt;/p&gt;

&lt;p&gt;そこで苦肉の策として、もう色んなモノがありのままに降ってくる、「&lt;code&gt;let_it_fall go&lt;/code&gt;」というコマンドを本ソフトウェアに追加しましたので(version 0.2.0)、これを持って皆様のご理解を賜り謝罪に変えさせて頂きたいと存じますm(__)m&lt;/p&gt;

&lt;h2 id=&quot;letitfall-go&quot;&gt;let_it_fall goの使い方&lt;/h2&gt;

&lt;p&gt;Macのターミナルを開いて&lt;code&gt;gem install let_it_fall&lt;/code&gt;した上で、次のコマンドを打ちます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% let_it_fall go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな風になります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://gifzo.net/BQ3nYS0gg5S.gif&quot; alt=&quot;let_it_fall&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://gifzo.net/BQ3nYS0gg5S&quot; title=&quot;BQ3nYS0gg5S.gif - Gifzo&quot;&gt;BQ3nYS0gg5S.gif - Gifzo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;終了は&lt;code&gt;Ctrl-C&lt;/code&gt;です。&lt;/p&gt;

&lt;h2 id=&quot;letitfall&quot;&gt;let_it_fallの他のコマンド&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;let_it_fall&lt;/code&gt;には&lt;code&gt;go&lt;/code&gt;コマンドの他にも大量のコマンドがあります。おそらくその数はRubygem史上最多です。&lt;code&gt;let_it_fall&lt;/code&gt;とだけ打つと使えるコマンドがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% let_it_fall
% Commands:
  let_it_fall MARK             # Let any of following MARKs fall

    alien alphabet angel animal apple arrow bee beer
    beers beginner bikini cactus cake christmas cocktail cookie
    cross cyclone dancer dingbat dolphin downarrow ear earth
    eyes face food fuji gem ghost helicopter hocho
    japan juice kanji kiss latin liberty lollipop love
    m money moon mouth naruto nose octopus oden
    oreilly paw perl pistol pizza please poo pushpin
    python smoking snow snowman soccer sorry sparkle sushi
    thunder time toilet tongue tower uparrow wavy wine

  let_it_fall matrix [MARK]   # Let it matrix!
  let_it_fall rand            # Let something fall randomly
  let_it_fall go              # Let them Go!
  let_it_fall code CODE       # Let specific character fall by unicode(s) ex. code 0x2660
  let_it_fall help [COMMAND]  # Describe available commands or one specific command
  let_it_fall version         # Show LetItFall version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;お仕事に疲れたら&lt;code&gt;let_if_fall beer&lt;/code&gt;、お腹が空いたなら&lt;code&gt;let_if_fall food&lt;/code&gt;、愛が必要なら&lt;code&gt;let_if_fall love&lt;/code&gt;、Pythonistaなら&lt;code&gt;let_if_fall python&lt;/code&gt;、金平糖が好きなら&lt;code&gt;let_if_fall snow&lt;/code&gt;、誰かに殺意を抱いたのなら&lt;code&gt;let_it_fall hocho&lt;/code&gt;、ディズニーよりVFXなSF映画が好みなら&lt;code&gt;let_it_fall matrix&lt;/code&gt;などとしてください。&lt;/p&gt;

&lt;p&gt;追加コマンドのご要望は、&lt;a href=&quot;https://twitter.com/merborne&quot; title=&quot;merborne&quot;&gt;merborne on Twitter&lt;/a&gt;または&lt;a href=&quot;https://github.com/melborne/let_it_fall&quot; title=&quot;melborne/let_it_fall&quot;&gt;github issueまたはプルリク&lt;/a&gt;で随時受け付けています。またテストが一行もない（！）ので、それが書ける方も募集しています。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;お詫びに代えて　その２&lt;/h2&gt;

&lt;p&gt;もしあなたがRubyistで、あなたにとって最高の「Let It Go」が聴きたいのなら、次の記事を開いてください。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/05/10/let-it-go-for-rubyists/&quot; title=&quot;Let It Go for Rubyists&quot;&gt;Let It Go for Rubyists&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;なお、この記事の半分はフィクションです。&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/let_it_fall&quot; title=&quot;let_it_fall&quot;&gt;let_it_fall | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/melborne/let_it_fall&quot; title=&quot;melborne/let_it_fall&quot;&gt;melborne/let_it_fall&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;関連記事：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/04/30/let-it-smile-in-the-terminal/&quot; title=&quot;Macのターミナルで顔が降る&quot;&gt;Macのターミナルで顔が降る&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/05/01/let-it-fall-in-the-mac-terminal/&quot; title=&quot;Macのターミナルで〇〇が降る&quot;&gt;Macのターミナルで〇〇が降る&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/05/07/let-it-matrix-in-the-mac-terminal/&quot; title=&quot;Macのターミナルでマトリックス?&quot;&gt;Macのターミナルでマトリックス?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;footnotes&quot;&gt;
	&lt;ol&gt;
		&lt;li id=&quot;fn:1&quot;&gt;物語化のため誇張してます。実際はdeeeet.comからのアクセスが最大でした。&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Let It Go for Rubyists</title>
   <link href="http://melborne.github.io/2014/05/10/let-it-go-for-rubyists"/>
   <updated>2014-05-10T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/05/10/let-it-go-for-rubyists</id>
   <content type="html">
&lt;p&gt;「&lt;a href=&quot;http://www.railsconf.com/&quot; title=&quot;RailsConf 2014 - April 22-25 in Chicago, IL&quot;&gt;RailsConf 2014&lt;/a&gt;」からのワンシーンです。素敵だなあ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.confreaks.com/videos/3461-railsconf-let-me-code&quot; title=&quot;Let Me Code - Liana Leahy - RailsConf 2014&quot;&gt;Let Me Code - Liana Leahy - RailsConf 2014&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;http://www.youtube.com/embed/kRUS8Zvg3sg?color=white&amp;amp;theme=light&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;彼女はRailsエンジニアで、かつてはプロの歌い手さんだったようです。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://twitter.com/lleahy&quot; title=&quot;Liana Leahy (lleahy) on Twitter&quot;&gt;Liana Leahy (lleahy) on Twitter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;感動したので歌詞の日本語訳をしてみました。雰囲気が伝わればと。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(追記：2014-5-13) 対訳版を追加しました。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;let-me-code-lyrics-&quot;&gt;Let Me Code Lyrics 対訳版&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;PCスクリーンが　白く光る夜
The screen glows white on my laptop tonight  (Let Me Code)
The snow glows white on the mountain tonight (Let It Go)

RSpecは　グリーンにならない
And my rspec won&#39;t go green
Not a footprint to be seen.

私は一人ぼっちで　コーディングしている
I&#39;m coding in isolation,
A kingdom of isolation,

だから　私のプルリクは行儀が悪いの
So my PRs are obscene
and it looks like I&#39;m the Queen

疑心暗鬼が叫んでる　内なる渦巻く嵐のように
My doubts are howling like this swirling storm inside
The wind is howling like this swirling storm inside

もう　抑えることができないの
Couldn&#39;t keep it in;
Couldn&#39;t keep it in;

神様は　私が頑張ったこと知っている
Heaven knows I&#39;ve tried
Heaven knows I&#39;ve tried


誰も入れてはだめ
Don&#39;t let them in,
Don&#39;t let them in,

誰に見せてもだめ
don&#39;t let them see
don&#39;t let them see

私のGithubレポは　私を落ち込ませる
my github repos are mortifying me
Be the good girl you always have to be

隠さなくちゃ　感情さえも
Conceal, don&#39;t feel,
Conceal, don&#39;t feel,

知られちゃだめ
don&#39;t let them know
don&#39;t let them know


でも　もうみんな知っているの！
Well now they know
Well now they know


ありのままに　コードを書けばいいの
Let me code, let me code
Let it go, let it go

もう　隠すことなんてできない
Can&#39;t hold it back anymore
Can&#39;t hold it back anymore

ありのままに　コードを書けばいいの
Let me code, let me code
Let it go, let it go

私はRails4.0.4と　戯れていたいの
I want to play with rails 4.0.4
Turn away and slam the door

彼らが言うことなんて　もう気にしない
I don&#39;t care
what they&#39;re going to say
I don&#39;t care
what they&#39;re going to say

モヒカンには　言わせておくわ
Let the nerds rage on.
Let the storm rage on.


そうよ　荒らしなんて
気にしたことなかったんだから！
The trolls never bothered me anyway
The cold never bothered me anyway


笑っちゃうわ　離れてみれば
It&#39;s funny how some distance
It&#39;s funny how some distance

すべてが小さく見えるの
Makes everything seem small
Makes everything seem small

自信喪失症候群が
And the impostor syndrome
And the fears that once controlled me

もう私を苦しめることはないわ
Can&#39;t get to me at all
Can&#39;t get to me at all


私に何ができるか　試す時がきたの
It&#39;s time to see what I can do
It&#39;s time to see what I can do

限界に挑んで　それを超えるのよ
To test the limits and break through
To test the limits and break through

私には正しいとか　間違ってるとか
Sandiの教えとかも　いらないのよ
No right, no wrong, Sandi&#39;s rules for me,
No right, no wrong, no rules for me,

私は　自由なの！
I&#39;m free!
I&#39;m free!


ありのままに　コードを書けばいいの
Let me code, let me code
Let it go, let it go

Matzが私の好みなの
Matz is my favorite guy
I am one with the wind and sky

ありのままに　コードを書けばいいの
Let me code, let me code
Let it go, let it go

DHHに私の嘆きは見せないわ
DHH will never see me cry
You&#39;ll never see me cry

ここが私の居場所
Here I stand
Here I stand

そしてこれからもそう
And here I&#39;ll stay
And here I&#39;ll stay

モヒカンは言ってなさいよ
Let the nerds rage on
Let the storm rage on

私のSQLクエリは　見つけたデータをフェッチする
My SQL queries fetching data that it found
My power flurries through the air into the ground

Rubyを使って 一面の凍ったフラクタルを描くの
I&#39;m using ruby to draw frozen fractals all around
My soul is spiraling in frozen fractals all around

そして想いは 氷の矢のように確かなものになるの
And one thought&#39;s solidifying like an icy blast
And one thought crystallizes like an icy blast

もう戻らないわ　過去は過ぎ去ったのよ
I&#39;m never going back, the past is in the past
I&#39;m never going back, the past is in the past


ありのままに　コードを書けばいいの
Let me code, let me code
Let it go, let it go

立ち上がるときよ　日が昇るように
When I&#39;ll rise like the break of dawn
And I&#39;ll rise like the break of dawn

ありのままに　コードを書けばいいの
Let me code, let me code
Let it go, let it go

完璧な女子なんていない
That perfect girl is gone
That perfect girl is gone

私はここにいる
Here I stand
Here I stand

作ったばかりのアプリと共に
With the apps I&#39;ve made
In the light of day

モヒカンには　言わせておけばいいわ
Let the nerds rage on
Let the storm rage on


そうよ　荒らしなんて
気にしたことなかったんだから！
The trolls never bothered me anyway!
The cold never bothered me anyway!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;let-me-code-&quot;&gt;Let Me Code 歌詞&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;PCスクリーンが　白く光る夜
RSpecは　グリーンにならない
私は一人ぼっちで　コーディングしている
だから　私のプルリクは行儀が悪いの
疑心暗鬼が叫んでる　内なる渦巻く嵐のように
もう　抑えることができないの
神様は　私が頑張ったこと知っている

誰も入れてはだめ
誰に見せてもだめ
私のGithubレポは　私を落ち込ませる
隠さなくちゃ　感情さえも
知られちゃだめ
でも　もうみんな知っているの！

ありのままに　コードを書けばいいの
もう　隠すことなんてできない
ありのままに　コードを書けばいいの
私はRails4.0.4と　戯れていたいの
彼らが言うことなんて　もう気にしない
モヒカンには　言わせておくわ

そうよ　荒らしなんて
気にしたことなかったんだから！

笑っちゃうわ　離れてみれば
すべてが小さく見えるの
自信喪失症候群が
もう私を苦しめることはないわ

私に何ができるか　試す時がきたの
限界に挑んで　それを超えるのよ
私には正しいとか　間違ってるとか
Sandiの教えとかも　いらないのよ
私は　自由なの！

ありのままに　コードを書けばいいの
Matzが私の好みなの
ありのままに　コードを書けばいいの
DHHに私の嘆きは見せないわ
ここが私の居場所
そしてこれからもそう
モヒカンは言ってなさいよ

私のSQLクエリは　見つけたデータをフェッチする
Rubyを使って 一面の凍ったフラクタルを描くの
そして想いは 氷の矢のように確かなものになるの
もう戻らないわ　過去は過ぎ去ったのよ

ありのままに　コードを書けばいいの
立ち上がるときよ　日が昇るように
ありのままに　コードを書けばいいの
完璧な女子なんていない
私はここにいる
作ったばかりのアプリと共に
モヒカンには　言わせておけばいいわ

そうよ　荒らしなんて
気にしたことなかったんだから！
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;let-me-code-lyrics&quot;&gt;Let Me Code Lyrics&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://blogs.law.harvard.edu/lianaleahy/2014/04/25/let-me-code-lyrics/&quot; title=&quot;» Let Me Code Lyrics Geek Mama&quot;&gt;» Let Me Code Lyrics Geek Mama&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;The screen glows white on my laptop tonight
And my rspec won’t go green
I’m coding in isolation,
So my PRs are obscene
My doubts are howling like this swirling storm inside
Couldn’t keep it in;
Heaven knows I’ve tried

Don’t let them in,
don’t let them see
my github repos are mortifying me
Conceal, don’t feel,
don’t let them know
Well now they know

Let me code, let me code
Can’t hold it back anymore
Let me code, let me code
I want to play with rails 4.0.4
I don’t care
what they’re going to say
Let the nerds rage on.

The trolls never bothered me anyway

It’s funny how some distance
Makes everything seem small
And the impostor syndrome
Can’t get to me at all

It’s time to see what I can do
To test the limits and break through
No right, no wrong, Sandi’s rules for me,
I’m free!

Let me code, let me code
Matz is my favorite guy
Let me code, let me code
DHH will never see me cry
Here I stand
And here I’ll stay
Let the nerds rage on

My SQL queries fetching data that it found
I’m using ruby to draw frozen fractals all around
And one thought’s solidifying like an icy blast
I’m never going back, the past is in the past

Let me code, let me code
When I’ll rise like the break of dawn
Let me code, let me code
That perfect girl is gone
Here I stand
With the apps I’ve made
Let the nerds rage on

The trolls never bothered me anyway!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;let-it-go-original&quot;&gt;Let It Go (Original)&lt;/h2&gt;

&lt;p&gt;Let Me Codeの歌詞はオリジナルLet It Goのパロディになっているので、オリジナルも載せておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The snow glows white on the mountain tonight
Not a footprint to be seen.
A kingdom of isolation,
and it looks like I&#39;m the Queen
The wind is howling like this swirling storm inside
Couldn&#39;t keep it in;
Heaven knows I&#39;ve tried

Don&#39;t let them in,
don&#39;t let them see
Be the good girl you always have to be
Conceal, don&#39;t feel,
don&#39;t let them know
Well now they know

Let it go, let it go
Can&#39;t hold it back anymore

Let it go, let it go
Turn away and slam the door
I don&#39;t care
what they&#39;re going to say
Let the storm rage on.
The cold never bothered me anyway

It&#39;s funny how some distance
Makes everything seem small
And the fears that once controlled me
Can&#39;t get to me at all

It&#39;s time to see what I can do
To test the limits and break through
No right, no wrong, no rules for me,
I&#39;m free!

Let it go, let it go
I am one with the wind and sky
Let it go, let it go
You&#39;ll never see me cry
Here I stand
And here I&#39;ll stay
Let the storm rage on

My power flurries through the air into the ground
My soul is spiraling in frozen fractals all around
And one thought crystallizes like an icy blast
I&#39;m never going back, the past is in the past

Let it go, let it go
And I&#39;ll rise like the break of dawn
Let it go, let it go
That perfect girl is gone
Here I stand
In the light of day
Let the storm rage on

The cold never bothered me anyway!
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;併せて、「&lt;a href=&quot;https://rubygems.org/gems/let_it_fall&quot; title=&quot;let_it_fall&quot;&gt;let_it_fall&lt;/a&gt;」もよろしくね！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/05/12/letitfall-is-not-letitgo/&quot; title=&quot;(注意)「Let It Fall」は、アナと雪の女王の挿入歌「Let It Go」と何ら関係ございません！&quot;&gt;(注意)「Let It Fall」は、アナと雪の女王の挿入歌「Let It Go」と何ら関係ございません！&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/05/01/let-it-fall-in-the-mac-terminal/&quot; title=&quot;Macのターミナルで〇〇が降る&quot;&gt;Macのターミナルで〇〇が降る&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;日本語訳参考:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://caffe.takat33.com/2014/03/let-it-go-idina-menzel.html&quot; title=&quot;Let it Go - Idina Menzel 歌詞の和訳とちょっとした解説 \| 洋楽カフェ&quot;&gt;Let it Go - Idina Menzel 歌詞の和訳とちょっとした解説 | 洋楽カフェ&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Macのターミナルでマトリックス?</title>
   <link href="http://melborne.github.io/2014/05/07/let-it-matrix-in-the-mac-terminal"/>
   <updated>2014-05-07T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/05/07/let-it-matrix-in-the-mac-terminal</id>
   <content type="html">
&lt;h2 id=&quot;matrix-&quot;&gt;matrix コマンド&lt;/h2&gt;

&lt;p&gt;好評（？）につき「&lt;a href=&quot;https://rubygems.org/gems/let_it_fall&quot; title=&quot;let_it_fall&quot;&gt;let_it_fall&lt;/a&gt;」をアップデートして、Macのターミナルでマトリックスもできるようにしてみました（version 0.1.0~）。まあ、ちょっと出来損ないですけど ;-(&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lat_it_fall matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://gifzo.net/YN0nVcXwJJ.gif&quot; alt=&quot;matrix noshadow&quot; /&gt;
&lt;a href=&quot;http://gifzo.net/YN0nVcXwJJ&quot; title=&quot;YN0nVcXwJJ.gif - Gifzo&quot;&gt;YN0nVcXwJJ.gif - Gifzo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;matrix&lt;/code&gt;に任意のコマンドを渡すとその絵でマトリックスします。ものによっては色の指定もできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lat_it_fall matrix kanji -c=34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://gifzo.net/Xb823CepFK.gif&quot; alt=&quot;matrix noshadow&quot; /&gt;
&lt;a href=&quot;http://gifzo.net/Xb823CepFK&quot; title=&quot;Xb823CepFK.gif - Gifzo&quot;&gt;Xb823CepFK.gif - Gifzo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;絵の切り替え&lt;/h2&gt;

&lt;p&gt;基本コマンドの方も少し改良しまして、動作中に「&lt;code&gt;リターンキー&lt;/code&gt;」を押すごとに、落ちる絵を切り替えられるようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lat_it_fall poo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://gifzo.net/BEgvpqr47nj.gif&quot; alt=&quot;poo noshadow&quot; /&gt;
&lt;a href=&quot;http://gifzo.net/BEgvpqr47nj&quot; title=&quot;BEgvpqr47nj.gif - Gifzo&quot;&gt;BEgvpqr47nj.gif - Gifzo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;現時点でコマンドは60（！）くらいあって、たぶんrubygemsで最多コマンド数を誇るんじゃないでしょうかw&lt;/p&gt;

&lt;p&gt;辛いことがあったときに、どうぞ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/let_it_fall&quot; title=&quot;let_it_fall&quot;&gt;let_it_fall&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/melborne/let_it_fall&quot; title=&quot;melborne/let_it_fall&quot;&gt;melborne/let_it_fall&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;関連記事：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/05/01/let-it-fall-in-the-mac-terminal/&quot; title=&quot;Macのターミナルで〇〇が降る&quot;&gt;Macのターミナルで〇〇が降る&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Macのターミナルで〇〇が降る</title>
   <link href="http://melborne.github.io/2014/05/01/let-it-fall-in-the-mac-terminal"/>
   <updated>2014-05-01T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/05/01/let-it-fall-in-the-mac-terminal</id>
   <content type="html">
&lt;p&gt;(追記:2014-5-6) let_it_fallをバージョンアップしました(version0.1.2)。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/05/06/let-it-matrix-in-the-mac-terminal/&quot; title=&quot;Macのターミナルでマトリックス?&quot;&gt;Macのターミナルでマトリックス?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;取り急ぎ、「Macのターミナルで〇〇が降る」をgem化しましたので、お知らせ致します。&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/let_it_fall&quot; title=&quot;let_it_fall \| RubyGems.org \| your community gem host&quot;&gt;let_it_fall | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/melborne/let_it_fall&quot; title=&quot;melborne/let_it_fall&quot;&gt;melborne/let_it_fall&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;使い方&lt;/h2&gt;

&lt;p&gt;Macのターミナルを開いて、&lt;code&gt;gem install let_it_fall&lt;/code&gt;と打ってインストールします。&lt;/p&gt;

&lt;p&gt;インストールができたら次のように打ちます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ let_it_fall beer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;終了は&lt;code&gt;Ctrl-c&lt;/code&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ let_it_fall money
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかすると幸せになれるかもしれません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ let_it_fall help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で使えるコマンドが表示されます。お腹が空いたら&lt;code&gt;food&lt;/code&gt;してください。&lt;code&gt;perl&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt;はありますが、残念ながら&lt;code&gt;ruby&lt;/code&gt;はありません。代わりに&lt;code&gt;gem&lt;/code&gt;してください。個人的には&lt;code&gt;moon&lt;/code&gt;, &lt;code&gt;kanji&lt;/code&gt;が好きです。&lt;/p&gt;

&lt;p&gt;任意の&lt;strong&gt;何か&lt;/strong&gt;を降らせたいときは&lt;code&gt;rand&lt;/code&gt;してください(version0.0.3~)。&lt;/p&gt;

&lt;p&gt;スピード調整用のオプション&lt;code&gt;--speed&lt;/code&gt;があります（ex -s=3）。レンジは0.1〜10くらいでしょうか。&lt;/p&gt;

&lt;h2 id=&quot;letitfall-code&quot;&gt;let_it_fall code&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;let_it_fall code&lt;/code&gt;というコマンドだけが特殊で、これは0xで始まるunicodeを引数に取ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ let_it_fall code 0x2660
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;複数のunicodeを取ることができ、さらに&lt;code&gt;--range&lt;/code&gt;オプションで範囲指定もできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ let_it_fall code 0x2660 0x2666 -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のサイトでunicodeと対応キャラクタの一覧（一部）が確認できます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://apps.timwhitlock.info/emoji/tables/unicode&quot; title=&quot;Emoji unicode characters for use on the web&quot;&gt;Emoji unicode characters for use on the web&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;辛いことがあったときに、どうぞ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;関連記事：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://osxdaily.com/2013/12/06/snow-terminal-mac-os-x-command/&quot; title=&quot;Let it Snow in the Terminal of Mac OS X with This Command&quot;&gt;Let it Snow in the Terminal of Mac OS X with This Command&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2013/12/13/translate-let-it-snow-in-the-terminal/&quot; title=&quot;「Macのターミナルで雪が降る」をカラー化した。翻訳した。&quot;&gt;「Macのターミナルで雪が降る」をカラー化した。翻訳した。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/04/30/let-it-smile-in-the-terminal/&quot; title=&quot;Macのターミナルで顔が降る&quot;&gt;Macのターミナルで顔が降る&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://deeeet.com/writing/2014/04/30/beer-on-terminal/&quot; title=&quot;Macのターミナルでビールが降る SOTA&quot;&gt;Macのターミナルでビールが降る  SOTA&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;(追記:2014-5-2) &lt;code&gt;rand&lt;/code&gt;コマンドについて追記しました。&lt;/p&gt;

&lt;hr /&gt;

&lt;p style=&quot;color:red&quot;&gt;=== Ruby関連電子書籍100円〜で好評発売中！ ===&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M’ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_pack8.png&quot; alt=&quot;pack8&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_parallel_cover.png&quot; alt=&quot;ruby_parallel&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Macのターミナルで月が...</title>
   <link href="http://melborne.github.io/2014/04/30/let-it-wax_and_wane_moon-in-the-terminal"/>
   <updated>2014-04-30T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/04/30/let-it-wax_and_wane_moon-in-the-terminal</id>
   <content type="html">
&lt;p&gt;満ちる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &#39;trap(:INT){print&quot;\e[?25h\e[0;0H&quot;;exit(0)};x,y=[`tput lines`,`tput cols`].map{|n|n.to_i/2};print&quot;\e[?25l&quot;;(0x1F311..0x1F315).cycle{|w|print&quot;\e[2J\e[#{x};#{y}H&quot;,w.chr(&quot;utf-8&quot;);sleep(0.3)}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://gifzo.net/daisOE631e.gif&quot; alt=&quot;moon noshadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gifzo.net/daisOE631e&quot; title=&quot;daisOE631e.gif - Gifzo&quot;&gt;daisOE631e.gif - Gifzo&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;参考記事：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/04/29/emoji-with-ruby-oneliner/&quot; title=&quot;Rubyのワンライナーで顔文字すると...&quot;&gt;Macのターミナルで顔が変わると…&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2014/04/30/let-it-smile-in-the-terminal/&quot; title=&quot;Macのターミナルで顔が降る&quot;&gt;Macのターミナルで顔が降る&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Macのターミナルで顔が降る</title>
   <link href="http://melborne.github.io/2014/04/30/let-it-smile-in-the-terminal"/>
   <updated>2014-04-30T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/04/30/let-it-smile-in-the-terminal</id>
   <content type="html">
&lt;p&gt;(追記:2014-5-1) 本機能をgem化しました。詳しくは以下の記事で。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/05/01/let-it-fall-in-the-mac-terminal/&quot; title=&quot;Macのターミナルで〇〇が降る&quot;&gt;Macのターミナルで〇〇が降る&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;辛いことがあったときに、どうぞ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &#39;C=`stty size`.scan(/\d+/)[1].to_i;S=[*0x1F600..0x1F640];a={};puts &quot;\033[2J&quot;;loop{a[rand(C)]=0;a.each{|x,o|;a[x]+=1;print &quot;\033[#{o};#{x}H \033[#{a[x]};#{x}H#{S.sample.chr(&quot;utf-8&quot;)} \033[0;0H&quot;};$stdout.flush;sleep 0.2}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://gifzo.net/1KtIS9iinH.gif&quot; alt=&quot;smiley rain noshadow&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://gifzo.net/1KtIS9iinH&quot; title=&quot;1KtIS9iinH.gif - Gifzo&quot;&gt;1KtIS9iinH.gif - Gifzo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;参考記事：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://osxdaily.com/2013/12/06/snow-terminal-mac-os-x-command/&quot; title=&quot;Let it Snow in the Terminal of Mac OS X with This Command&quot;&gt;Let it Snow in the Terminal of Mac OS X with This Command&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2013/12/13/translate-let-it-snow-in-the-terminal/&quot; title=&quot;「Macのターミナルで雪が降る」をカラー化した。翻訳した。&quot;&gt;「Macのターミナルで雪が降る」をカラー化した。翻訳した。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/04/29/emoji-with-ruby-oneliner/&quot; title=&quot;Rubyのワンライナーで顔文字すると...&quot;&gt;Macのターミナルで顔が変わると…&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;(追記：2014-4-30) スクリプトの間違いを修正しました。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Macのターミナルで顔が変わると...</title>
   <link href="http://melborne.github.io/2014/04/29/emoji-with-ruby-oneliner"/>
   <updated>2014-04-29T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/04/29/emoji-with-ruby-oneliner</id>
   <content type="html">
&lt;p&gt;かわいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &#39;trap(:INT){print&quot;\e[?25h\e[0;0H&quot;;exit(0)};x,y=[`tput lines`,`tput cols`].map{|n|n.to_i/2};print&quot;\e[?25l&quot;;(0x1F600..0x1F640).cycle{|w|print&quot;\e[2J\e[#{x};#{y}H&quot;,w.chr(&quot;utf-8&quot;);sleep(0.3)}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://gifzo.net/7N6JmQxbDL.gif&quot; alt=&quot;emoji noshadow&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://gifzo.net/7N6JmQxbDL&quot; title=&quot;7N6JmQxbDL.gif - Gifzo&quot;&gt;7N6JmQxbDL.gif - Gifzo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;関連記事：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2014/03/01/spritz-with-ruby-oneliner/&quot; title=&quot;「単語が目に飛び込んできてすごい速度で文章を..」ってやつをRubyでやると...&quot;&gt;「単語が目に飛び込んできてすごい速度で文章を..」ってやつをRubyでやると…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2014/03/01/spritz-with-ruby-oneliner-2/&quot; title=&quot;「単語が目に飛び込んできてすごい速度で文章を..」ってやつをRubyで..を改良すると...&quot;&gt;「単語が目に飛び込んできてすごい速度で文章を..」ってやつをRubyで..を改良すると…&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://gigazine.net/news/20140228-spritz/&quot; title=&quot;単語が目に飛び込んできてすごい速度で文章を読めるようになる「Spritz」 - GIGAZINE&quot;&gt;単語が目に飛び込んできてすごい速度で文章を読めるようになる「Spritz」 - GIGAZINE&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(追記: 2014-4-30) &lt;/p&gt;

&lt;p&gt;翌日に書いた「&lt;a href=&quot;/2014/04/30/let-it-smile-in-the-terminal/&quot; title=&quot;Macのターミナルで顔が降る&quot;&gt;Macのターミナルで顔が降る&lt;/a&gt;」の評判が異常に良いので、便乗できないかとタイトルを&lt;strong&gt;改ざん&lt;/strong&gt;しました:-)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Procを制する者がRubyを制す（嘘）</title>
   <link href="http://melborne.github.io/2014/04/28/proc-is-the-path-to-understand-ruby"/>
   <updated>2014-04-28T00:00:00+09:00</updated>
   <id>http://melborne.github.io/2014/04/28/proc-is-the-path-to-understand-ruby</id>
   <content type="html">
&lt;p&gt;RubyのProcの説明は巷に溢れているから今更感があるけどここ数回Procを使ったネタを書いていたらProcがかわいくなっちゃってもっとみんなにもProcのこと知ってもらいたいという欲求が生まれてきたからProcについての基本的なことを僕なりのやり方でここに書くよ。長いよ。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Rubyの関数（メソッド）&lt;/h2&gt;

&lt;p&gt;Rubyにおいて関数（メソッド）はファーストクラス（オブジェクト）ではありません。つまり文字列や数字や配列などの他のオブジェクトとは異なって、Rubyではそれを直接変数に代入したり、他の関数に渡したりすることはできません。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# squareメソッドを変数sqに代入してみる&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ~&amp;gt; -:1:in `square&#39;: wrong number of arguments (0 for 1) (ArgumentError)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ~&amp;gt; 	from -:5:in `&amp;lt;main&amp;gt;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Rubyではメソッドの呼び出しには括弧を省略できるので、代入時にsquareと書いた時点でこれが引数なしのメソッド呼び出しだと評価されてしまうのです。&lt;/p&gt;

&lt;p&gt;事情は引数渡しのときもおなじです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# squareメソッドを引数として渡してみる&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ~&amp;gt; -:1:in `square&#39;: wrong number of arguments (0 for 1) (ArgumentError)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ~&amp;gt; 	from -:9:in `&amp;lt;main&amp;gt;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;でも、がっかりする必要はありません。Rubyにはこれをファーストクラス化する手段、つまりメソッドをオブジェクトとしてラップする手段が代わりにあります。それがMethodオブジェクトです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object#method&lt;/code&gt;にメソッド名を渡せばMethodオブジェクトが生成できます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# squareメソッドをオブジェクト化して変数sqに代入&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;Method: Object#square&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;しかし注意点があります。これを通常のメソッドのように呼ぶことはできないのです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 括弧で引数を渡して呼んでみる&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ~&amp;gt; -:7:in `&amp;lt;main&amp;gt;&#39;: undefined method `sq&#39; for main:Object (NoMethodError)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;このオブジェクトにラップされたメソッドを実行するつまりその評価を開始させるにはMethod#callを呼ぶ必要があります。メソッドに引数がある場合はcallにそれを渡します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 9&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;このことを、「メソッドをMethodオブジェクトでラップすると、それがcallされるまで&lt;strong&gt;評価を遅延できる&lt;/strong&gt;」と見ることもできます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#call&lt;/code&gt;にはメソッド呼び出しの括弧に似た見た目の複数のエイリアスがあります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 9&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ruby-1&quot;&gt;Rubyのブロック&lt;/h2&gt;

&lt;p&gt;さて、Rubyにはご存知「ブロック」という構文があります。ブロックはdo … endまたは{ … }で囲まれた手続きの塊です。先にRubyではメソッド引数にメソッドを直接渡すことはできないと書きましたが、このブロックをメソッドに付することは特別にできるようになっています。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;メソッド定義における&lt;code&gt;&amp;amp;&lt;/code&gt;に注目してください。仮引数（ここではfun）に&amp;amp;を前置すると、メソッドはこの仮引数を介してブロックを受け取れるようになります。&lt;/p&gt;

&lt;p&gt;しかしRubyでは&lt;code&gt;yield&lt;/code&gt;というキーワードを使った次のような書き方が許容されていて、こちらのほうが広く使われています。しかしその意味は同じです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;つまり&lt;code&gt;&amp;amp; + call == yield&lt;/code&gt;です。&lt;/p&gt;

&lt;h2 id=&quot;proc&quot;&gt;Procオブジェクト&lt;/h2&gt;

&lt;p&gt;Rubyのブロックは、メソッド同様、ファーストクラスではありません。従ってメソッドに付する以外にそれが独立してRuby空間内に存在することはできないのです。しかし、メソッドがMethodオブジェクトによってファーストクラス化できるのと同様、Rubyではブロックもファーストクラス化することができます。それがProcオブジェクト（手続きオブジェクト）です。&lt;/p&gt;

&lt;p&gt;ブロックをProcオブジェクトにするには&lt;code&gt;lambda&lt;/code&gt;, &lt;code&gt;proc&lt;/code&gt;, &lt;code&gt;Proc.new&lt;/code&gt;, &lt;code&gt;-&amp;gt;&lt;/code&gt;の何れかを使います。何でこんなにあるのかわかりませんが。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;Proc:0x007f89a1852960@-:13 (lambda)&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;Proc:0x007f89a18526b8@-:14&amp;gt;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;Proc:0x007f89a1852438@-:15&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;Proc:0x007f89a1852190@-:16 (lambda)&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;挙動に若干の違いがありますがそれは瑣末な問題です。&lt;code&gt;-&amp;gt;&lt;/code&gt;だけ引数の引き渡し方が異なります。よく使われるのは&lt;code&gt;lambda&lt;/code&gt;ですが個人的には簡潔な&lt;code&gt;-&amp;gt;&lt;/code&gt;をよく使います。&lt;/p&gt;

&lt;p&gt;このようにブロックをProcオブジェクトでラップすれば、Methodオブジェクトの場合と同じように変数に代入したり、メソッドに引数として渡したりすることができるようになります。そして&lt;code&gt;#call&lt;/code&gt;メソッドを呼ぶことでそのブロックが実行される点もMethodオブジェクトと同じです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 9&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Procオブジェクトは、Methodオブジェクトと異なり、それ自体には名前がないのでこれを&lt;strong&gt;無名関数&lt;/strong&gt;と呼んでもいいでしょう。Procオブジェクトをメソッドの引数に直接引き渡すことで、無名であることがよりはっきりします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;&amp;amp;（アンパサンド）の謎&lt;/h2&gt;

&lt;p&gt;さて、ここでこの例を先のメソッドにブロックを付する例と比較してみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;メソッド定義における違いに注目してください。違いはメソッド引数における&lt;code&gt;&amp;amp;&lt;/code&gt;だけです。そしてこの差異から、「メソッドに付けられたブロックは、&amp;amp;仮引数に渡されるとここでProcオブジェクトに変換されているのではないか」という推測が生まれます。確かめて見ましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; Proc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ビンゴでした。つまりこの２つの式は等価で、&lt;code&gt;&amp;amp;&lt;/code&gt;はブロックをProcオブジェクトに変換するMagic word（呪文）だったのです。&lt;/p&gt;

&lt;p&gt;では、ブロック以外のものをこの呪文にかけたらどうなるでしょうか。試しに数字の&lt;code&gt;3&lt;/code&gt;を渡してみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ~&amp;gt; -:22:in `&amp;lt;main&amp;gt;&#39;: wrong argument type Fixnum (expected Proc) (TypeError)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;引数としてProcが期待されているとのエラーメッセージが吐かれました。しかしこれで終わらないのがRubyです。Rubyは&amp;amp;に渡されたものがブロックであろうと何であろうと、そのProcオブジェクトへの変換をまずは試みる、つまりそのオブジェクトを&lt;code&gt;to_proc&lt;/code&gt;してみるのです。&lt;/p&gt;

&lt;p&gt;Fixnum#to_procを定義して、結果を見てみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fixnum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 81&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fixnum#to_procに累乗演算をラップしたProcオブジェクトを返すようにしたところ、見事にそれが呼ばれて81という出力が得られました。&lt;/p&gt;

&lt;p&gt;因みにMethodオブジェクトには&lt;code&gt;to_proc&lt;/code&gt;メソッドが定義されている（文字通りMethodオブジェクトをProcオブジェクトに変換するメソッド）ので、&amp;amp;にMethodオブジェクトを渡すこともできます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;symboltoproc&quot;&gt;Symbol#to_proc&lt;/h2&gt;

&lt;p&gt;Rubyではメソッドにブロックを付する代わりに、&lt;code&gt;&amp;amp; + Symbolオブジェクト&lt;/code&gt;を引数として渡すテクニックが広く使われています。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;sx&quot;&gt;%w(charlie liz george)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;Charlie&quot;, &quot;Liz&quot;, &quot;George&quot;]&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;prime&quot;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:prime?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これらは次のショートカットです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;sx&quot;&gt;%w(charlie liz george)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capitalize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;Charlie&quot;, &quot;Liz&quot;, &quot;George&quot;]&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prime?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;なぜこのようなことができるのでしょうか。ここまでの説明が正しいのなら、次のような推測ができるはずです。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;&amp;amp;にSymbolオブジェクトが渡されたので、RubyはこれをProcオブジェクトに変換することを試みる。そのためにSymbol#to_procを呼ぶ。&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;そしてSymbol#to_procは、ブロック引数に順次渡されるオブジェクト（ここでは’charlie’などのStringオブジェクト）に対し、&amp;amp;に渡されたSymbolオブジェクト（ここでは:capitalize）をメソッドとして呼ぶような実装がなされている。&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;では、確かめてみましょう。pryのshow-sourceを叩いてCRubyの実装を見てみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;pry(main)&amp;gt; &lt;/span&gt;show-source Symbol#to_proc

From: string.c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C Method&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Owner: Symbol
Visibility: public
Number of lines: 29

static VALUE
sym_to_proc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;VALUE sym&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    static VALUE sym_proc_cache &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Qfalse;
    enum &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;SYM_PROC_CACHE_SIZE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 67&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;;
    VALUE proc;
    long id, index;
    VALUE &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;aryp;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;!sym_proc_cache&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        sym_proc_cache &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; rb_ary_tmp_new&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SYM_PROC_CACHE_SIZE &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
        rb_gc_register_mark_object&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sym_proc_cache&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
        rb_ary_store&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sym_proc_cache, SYM_PROC_CACHE_SIZE&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;2 - 1, Qnil&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    id &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SYM2ID&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sym&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
    index &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id % SYM_PROC_CACHE_SIZE&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; 1;

    aryp = RARRAY_PTR(sym_proc_cache);
    if (aryp[index] == sym) {
        return aryp[index + 1];
    }
    else {
        proc = rb_proc_new(sym_call, (VALUE)id);
        aryp[index] = sym;
        aryp[index + 1] = proc;
        return proc;
    }
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;えー、残念ながら僕はCは読めないので、こういうときはRubiniusに頼ります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/rubinius/rubinius/blob/master/kernel/common/symbol.rb&quot; title=&quot;rubinius/kernel/common/symbol.rb at master · rubinius/rubinius&quot;&gt;rubinius/kernel/common/symbol.rb at master · rubinius/rubinius&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Symbol&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;no receiver given&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;__send__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Procの第１引数をオブジェクトとし、&lt;code&gt;self&lt;/code&gt;をメソッドとして呼んでいるのが分かります&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ではこのコードをもう少し簡単にして&lt;code&gt;String#to_proc&lt;/code&gt;を定義し、それが機能するかみてみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;sx&quot;&gt;%w(charlie liz george)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;capitalize&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;Charlie&quot;, &quot;Liz&quot;, &quot;George&quot;]&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;prime&quot;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;prime?&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;いいですね。&lt;/p&gt;

&lt;p&gt;Symbol#to_procを明示的に呼び出すことは普通ありませんが、このユニークなメソッドを使って次のようなこともできます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 256&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ruby&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ist&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;rubyist&quot;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;:grep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;hello&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;world&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ruby&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/ll/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;hello&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;proc-&quot;&gt;Procの特徴その１: クロージャ&lt;/h2&gt;

&lt;p&gt;Procオブジェクトはクロージャという性質を持っています。その点がメソッドと異なります。つまりそれは手続きブロックをその環境とともに閉じ込めます。言い換えればメソッドではその中の世界と外の世界は断絶していますが、Procオブジェクトでは中の世界は外の世界の影響を受けます。&lt;/p&gt;

&lt;p&gt;次の例を見てください。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;sx&quot;&gt;%w(a b c)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;クラスXにおいてeachイテレータとdefine_methodを使ってインスタンスメソッドa, b, cを定義しています。何れのメソッドもnを１インクリメントする実装です。一方でeachの外側にはローカル変数nが定義され2が代入されています。これを実行すると以下のような結果になります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 7&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 9&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ローカル変数nがすべてのメソッド（さらには生成されたすべてのオブジェクト）で共有されていることが分かります。次にこれらメソッド定義の後でnに別の値を代入した例を見てみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;sx&quot;&gt;%w(a b c)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 11&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 12&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 13&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 14&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 15&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 16&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 17&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 18&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;変化がありました。つまりこれらメソッドはその周囲環境（コンテキスト）によって影響を受けるということです。ここでの例でメソッド内の変数nはeachとdefine_methodにおける二重のブロックを超えてその周囲の影響を受けていることになります。&lt;/p&gt;

&lt;h2 id=&quot;proc--1&quot;&gt;Procの特徴その２: カリー化&lt;/h2&gt;

&lt;p&gt;Procオブジェクトはカリー化することができます。カリー化というのは、複数の引数を取るようなProcオブジェクトがある場合に、それをその一部の引数だけを受けとれるようなものに変えることを言います。そしてカリー化されたProcオブジェクトに一部の引数だけを渡すことを部分適用と言います。例を見たほうがいいでしょう。&lt;/p&gt;

&lt;p&gt;まずは、文字列に３種類の接尾語&lt;code&gt;ist&lt;/code&gt;, &lt;code&gt;er&lt;/code&gt;, &lt;code&gt;ian&lt;/code&gt;を付ける３つのメソッドを考えます。こんな感じでしょうか。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;join_ist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ist&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;join_er&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;er&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;join_ian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ian&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これはDRY原則に反しますから共通の機能を一つのメソッドに括りだします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;join_ist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ist&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;join_er&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;er&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;join_ian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ian&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これを複数の文字に適用してみましょう。各メソッドをMethodオブジェクト化してmapに渡します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;sx&quot;&gt;%w(real social ruby)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:join_ist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;realist&quot;, &quot;socialist&quot;, &quot;rubyist&quot;]&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;%w(sell climb haskell)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:join_er&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;seller&quot;, &quot;climber&quot;, &quot;haskeller&quot;]&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;%w(music physic Janis)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:join_ian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;musician&quot;, &quot;physician&quot;, &quot;Janisian&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;おなじことをProcのカリー化を使って書いてみます。カリー化には&lt;code&gt;Proc#curry&lt;/code&gt;を呼びます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;curry&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Procオブジェクトをカリー化する&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# カリー化されたProcオブジェクトに一部の引数を部分適用する。&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# これにより残りの引数を受けるProcオブジェクトが生成される。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ist&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;Proc:0x007fdf011ce1b0 (lambda)&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sx&quot;&gt;%w(real social ruby)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ist&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;realist&quot;, &quot;socialist&quot;, &quot;rubyist&quot;]&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;%w(sell climb haskell)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;er&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;seller&quot;, &quot;climber&quot;, &quot;haskeller&quot;]&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;%w(music physic Janis)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ian&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;musician&quot;, &quot;physician&quot;, &quot;Janisian&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;カリー化を使うとすべての引数を同時に渡す必要がなくなり自由度が高まります。&lt;/p&gt;

&lt;h2 id=&quot;proc-proc&quot;&gt;Procの特徴その３: Proc#===&lt;/h2&gt;

&lt;p&gt;Proc#callのエイリアスとして&lt;code&gt;Proc#===&lt;/code&gt;が定義されています。これによってcase式のwhen節にProcオブジェクトが渡されると、そこで比較オブジェクトを引数に取ってブロックが評価されることになります。例を見てみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;is_escape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;is_back&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_escape&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:escape&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_back&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:unknown&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; escape&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Proc#===の導入によりより複雑な評価式をwhen節で使えるようになりました。しかもProcに明示的に引数を引き渡す必要がないので見た目がエレガントです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Procオブジェクトに関する僕からの説明は以上です。この記事があなたのProcオブジェクトの理解の助けになれば幸いです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;関連記事：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/2014/04/20/extend-ampersand-magic-with-methop/&quot; title=&quot;落ちていくRubyistのためのMethopオブジェクト&quot;&gt;落ちていくRubyistのためのMethopオブジェクト&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2014/04/26/yet-another-proc-composer-in-ruby/&quot; title=&quot;RubyにおけるYet Another関数合成&quot;&gt;RubyにおけるYet Another関数合成&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2008/09/17/Ruby-Symbol-to_proc/&quot; title=&quot;RubyのSymbol#to_procを考えた人になってみる&quot;&gt;RubyのSymbol#to_procを考えた人になってみる&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;(追記：2014-4-29) 一部記述を修正しました。&lt;/p&gt;

&lt;p&gt;(追記：2014-5-5) コードの間違いを修正しました。&lt;/p&gt;

&lt;hr /&gt;

&lt;p style=&quot;color:red&quot;&gt;=== Ruby関連電子書籍100円〜で好評発売中！ ===&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot; title=&quot;M&#39;ELBORNE BOOKS&quot;&gt;M’ELBORNE BOOKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_pack8.png&quot; alt=&quot;pack8&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/rack_cover.png&quot; alt=&quot;rack&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/books/&quot;&gt;
  &lt;img src=&quot;/assets/images/books/ruby_parallel_cover.png&quot; alt=&quot;ruby_parallel&quot; style=&quot;width:200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
	&lt;ol&gt;
		&lt;li id=&quot;fn:1&quot;&gt;ちなみにこのコードではselfを直接ブロック内に渡していませんがその理由がRubiniusのソースには書いてあります。 &lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;

</content>
 </entry>
 
 
</feed>

