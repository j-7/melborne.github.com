---
layout: post
title: Rubyでビックリ階乗を解こう!
tagline: 人間の実働時間を最適化する
date: 2011-12-05
comments: true
categories:
tags: [ruby]
---

「ビックリ階乗(Exclamatory Factorial)」って知ってますか？

ええ、知るわけないです。なぜならいま僕が、次のツイートの解に命名したばかりの言葉だからです{% fn_ref 1 %}。

![image](http://img.f.hatena.ne.jp/images/fotolife/k/keyesberry/20111205/20111205222834.png)


なかなか意味深なツイートですが、自分が先生だったらこの解答に◯を付けざるを得ないでしょう。答えにビックリマークを付ける人はいませんからね!

さて、プログラムする身としては文系理系両者の反応よりも、このような「ビックリ階乗」がどれくらい奇跡的なものなのかが気になります。つまりa - (b / c) の解(先の例では24)と、(a - b) / c の解の階乗(4!)とが一致する組み合わせは果たしてどれくらいあるのでしょうか。

数学的に書くとこういうことです。
 
> f1 = a - (b / c)
> f2 = (a - b) / c
> 
> f1 == f2!

そんな思いは当然僕だけではありませんでした{% fn_ref 2 %}。

[「40 - 32 / 2 = 4!」 - エンジニアのソフトウェア的愛情](http://d.hatena.ne.jp/E_Mattsan/20111124/1322145039)

このブログより1000以下の数字で、15組のビックリ階乗があることがわかっています。ここで1000までの数を考えたときa b c の組み合わせ数は、10億通り([tex:1000^3])にもなりますからその確率は..
 
> 15 / 10,0000,0000 = 0.000000015

ビックリ階乗は奇跡的な組み合わせなんですね!

しかしそれにしても10億通りの組み合わせとなると、まじめにそのすべてを試してみると当然にその実行時間が問題になります。先のブログでは試行錯誤して最初のプログラムから、1800倍の高速化を実現して0.1秒以下で答えがでます。手元でRuby版も試して見ましたが0.037秒でした。ステキすぎます!

で、これ以上僕のできることは何も無いのですが、コードの実行時間というものを完全に無視してコードの読み易さつまり、人間の実働時間の最適化という一点に焦点を合わせてRubyでコードを書いてみようと思います^ ^;

さて、ビックリ階乗の数式をもう一度確認します。
 
> f1 = a - (b / c)
> f2 = (a - b) / c
> 
> f1 == f2!


これをRubyの式に置き換えます。
{% highlight ruby %}
f1 = ->a,b,c{  a - b  / c }
f2 = ->a,b,c{ (a - b) / c }
a, b, c = 40, 32, 2
f1[a,b,c] == factorial(f2[a,b,c]) # => true
{% endhighlight %}
メソッドでもいいですが、ここでは一行で済むProcを使います。

このコードは一見よさそうですが、一部に問題があります。
{% highlight ruby %}
10 / 3 # => 3
{% endhighlight %}
そうです、Rubyでは整数同士の除算は余りを無視してしまいます。

しかしこの問題は`require 'mathn'`することで解決します。
{% highlight ruby %}
require 'mathn'
10 / 3 # => (10/3)
{% endhighlight %}

次にfactorialメソッドってのがダサいですね。こうしましょう。
{% highlight ruby %}
class Integer
  def !
    (1..self).inject(:*)
  end
end
4.! # => 24
{% endhighlight %}

{% highlight ruby %}
require 'mathn'
f1 = ->a,b,c{  a - b  / c }
f2 = ->a,b,c{ (a - b) / c }
a, b, c = 40, 32, 2
f1[a,b,c] == f2[a,b,c].! # => true
{% endhighlight %}
良くなりましたね!

次にa b c についての10億の組み合わせを作ります。
{% highlight ruby %}
set = [*2..1000].repeated_permutation(3) # => #<Enumerator: [2, 3, 4..]:repeated_permutation(3)>
{% endhighlight %}

そこから先の条件に見合うものだけ、セレクトします。
{% highlight ruby %}
selected = set.select { |abc| f1[*abc] == f2[*abc].! }
{% endhighlight %}

結果をプリントします。
{% highlight ruby %}
pp = ->abc{
  print "(%i - %i) / %i = %i\n"         % [*abc, f2[*abc]]
  print " %i - %i  / %i = %i! = %i\n\n" % [*abc, f2[*abc], f1[*abc]]
}
selected.each { |abc| pp[abc] }
{% endhighlight %}

さあこれらを組み合わせて!
{% highlight ruby %}
require "mathn"
class Integer
  def !
    (1..self).inject(:*)
  end
end
f1 = ->a,b,c{  a - b  / c }
f2 = ->a,b,c{ (a - b) / c }
pp = ->abc{
  print "(%i - %i) / %i = %i\n"         % [*abc, f2[*abc]]
  print " %i - %i  / %i = %i! = %i\n\n" % [*abc, f2[*abc], f1[*abc]]
}
[*2..1000].repeated_permutation(3)
          .select { |abc| f1[*abc] == f2[*abc].! }
          .each { |abc| pp[abc] }
{% endhighlight %}

完成です! exclamation.rbで保存して実行してみましょう!いきなり1000もなんですから、まずは[*2..100]から..
{% highlight bash %}
% time ruby exclamation.rb
(25 - 5) / 5 = 4
 25 - 5  / 5 = 4! = 24
(30 - 18) / 3 = 4
 30 - 18  / 3 = 4! = 24
(40 - 32) / 2 = 4
 40 - 32  / 2 = 4! = 24
ruby exclamation.rb  3.25s user 0.03s system 99% cpu 3.287 total
{% endhighlight %}
おおっ、良い感じじゃないですか!

では1000で..
{% highlight ruby %}
% time ruby exclamation.rb

  ...

  ...

  ...

{% endhighlight %}
全く反応ありません^ ^;

仕方が無いので、require 'mathn' はやめて、`a <= b, (b % c) != 0, ((a - b) % c) != 0`の条件だけ入れて足切りします。
{% highlight ruby %}
[*2..1000].repeated_permutation(3)
          .select { |a,b,c|
            next if a <= b || (b % c) != 0 || ((a - b) % c) != 0
            f1[a,b,c] == f2[a,b,c].!
           }
          .each { |abc| pp[abc] }
{% endhighlight %}

いざ!
{% highlight bash %}
% time ruby exclamation.rb

  ...

  ...

{% endhighlight %}

ちょっとトイレ行ってきます..

{% highlight bash %}
% time ruby exclamation.rb

  ...

  ...

{% endhighlight %}

お茶飲んできます..

でましたよ!
{% highlight ruby %}
(25 - 5) / 5 = 4
 25 - 5  / 5 = 4! = 24
(30 - 18) / 3 = 4
 30 - 18  / 3 = 4! = 24
(40 - 32) / 2 = 4
 40 - 32  / 2 = 4! = 24
(138 - 108) / 6 = 5
 138 - 108  / 6 = 5! = 120
(230 - 220) / 2 = 5
 230 - 220  / 2 = 5! = 120
(721 - 103) / 103 = 6
 721 - 103  / 103 = 6! = 720
(728 - 416) / 52 = 6
 728 - 416  / 52 = 6! = 720
(731 - 473) / 43 = 6
 731 - 473  / 43 = 6! = 720
(735 - 525) / 35 = 6
 735 - 525  / 35 = 6! = 720
(748 - 616) / 22 = 6
 748 - 616  / 22 = 6! = 720
(756 - 648) / 18 = 6
 756 - 648  / 18 = 6! = 720
(765 - 675) / 15 = 6
 765 - 675  / 15 = 6! = 720
(816 - 768) / 8 = 6
 816 - 768  / 8 = 6! = 720
(833 - 791) / 7 = 6
 833 - 791  / 7 = 6! = 720
(952 - 928) / 4 = 6
 952 - 928  / 4 = 6! = 720
ruby exclamation.rb  349.56s user 0.72s system 99% cpu 5:51.87 total
{% endhighlight %}

6分!!!

使い捨てプログラムとしては許容できる範囲...
判断は各人にお任せします..

