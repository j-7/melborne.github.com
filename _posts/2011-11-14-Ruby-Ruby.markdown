---
layout: post
title: 秋だ!Rubyを学ぼう! ～Rubyを知るための２６ポスト
date: 2011-11-14
comments: true
categories:
---


このブログはプログラミング言語Ruby関連
のポストが大半を占めていて
それらは僕自身がRubyについて
学んだことをベースに書かれています

その一部には
これからRubyを学ぶ人や学び始めたばかりの人が
Rubyを知るための助けになる内容が含まれてると思います
またブログを書く上で自分は
他にないユニークな視点でといつも心掛けているので
ここで
他では得られなかった気づきを得られるかもしれません
手前味噌ですけど.. :)

そんなわけで..

このブログから
Ruby初学者～中級者向けの投稿２６本を選んで
簡単な説明を付けて一覧できるようにしてみました
少し古い投稿も含まれていますが
Rubyを学ぶ上で
これらの記事があなたの参考になったとしたら
そんなにうれしいことはありません

###Rubyの言語仕様に関するもの
１．[1から始めるRuby(2011-07-27)](http://d.hatena.ne.jp/keyesberry/20110727/p1)[link](http://d.hatena.ne.jp/keyesberry/20110727/p1:bookmark)
> 
> Rubyは純粋なオブジェクト指向プログラミング言語です
> 「純粋な」というのがRubyのミソで
> オブジェクト指向機構を持った他のプログラミング言語とは
> この純粋性で一線を画しています
> この記事はこの点に焦点を当てて
> Rubyのオブジェクト指向機構について説明しています
> ただシリーズ物として書き始めたのですが
> 第３回で止まったままです..


２．[ + (足す)から始めるRuby(2011-08-10)](http://d.hatena.ne.jp/keyesberry/20110810/p1)[link](http://d.hatena.ne.jp/keyesberry/20110810/p1:bookmark)
> 
> Rubyの演算子のほとんどは
> オブジェクトに対するメソッド呼び出しです
> つまりRubyではオブジェクト指向の純粋性を守りながら
> 多くの演算子を実装しています
> この記事はこのことを通してRubyの特徴を
> 「1から始めるRuby」に倣って解説しています


３．[Rubyチュートリアル ～英文小説の最頻出ワードを見つけよう!(全17回)(2009-04-07)](http://d.hatena.ne.jp/keyesberry/20090407/p1)[link](http://d.hatena.ne.jp/keyesberry/20090407/p1:bookmark)
> 
> この記事は英文小説から
> 最頻出ワードを抽出するプログラムの作成を通して
> Rubyを学ぶチュートリアル・シリーズになっています
> 小説風の仮想設定から始まって
> 最初にRubyの特徴を解説し
> 続いてプログラムの改良を
> 延々と続けていくチュートリアルです
> いつも途中で投げ出してる僕が
> 全17回最後まで書き上げられためずらしい記事です ^^;


４．[Rubyのクラスはオブジェクトの母、モジュールはベビーシッター(2008-08-16)](http://d.hatena.ne.jp/keyesberry/20080816/p1)[link](http://d.hatena.ne.jp/keyesberry/20080816/p1:bookmark)
> 
> Rubyの世界の三大要素といったら
> クラス　モジュール　オブジェクトを差します
> これらを理解せずにRubyを理解することはできません
> この記事はこの三大要素の関係性についてまとめています


５．[RubyのObjectクラスは過去を再定義するタイムマシンだ！(2008-09-27)](http://d.hatena.ne.jp/keyesberry/20080927/p1)[link](http://d.hatena.ne.jp/keyesberry/20080927/p1:bookmark)
> 
> RubyのクラスツリーのルートはObjectクラスです{% fn_ref 1 %}
> この記事はObjectクラスとそこにインクルードされる
> Kernelモジュールについて説明しています


６．[RubyのModuleクラスはすべてのモジュールの母であり同時にすべてのクラスの父である！(2008-09-30)](http://d.hatena.ne.jp/keyesberry/20080930/p1)[link](http://d.hatena.ne.jp/keyesberry/20080930/p1:bookmark)
> 
> ModuleクラスはRubyにおける最重要クラスの１つで
> これはモジュールの生成クラスであると共に
> Classクラスのスーパークラスでもあります
> この記事はそのModuleクラスについて説明しています


７．[Rubyのブロックはメソッドに対するメソッドのMix-inだ！(2008-08-09)](http://d.hatena.ne.jp/keyesberry/20080809/p1)[link](http://d.hatena.ne.jp/keyesberry/20080809/p1:bookmark)
> 
> Rubyのブロックはメソッドに
> コードの塊を渡すことができる仕組みです
> この記事はブロックおよび
> そのパワーについて解説しています


８．[Rubyのブロック(クロージャ)はローカル変数をインスタンス変数に変えるマジックだ！(2009-08-26)](http://d.hatena.ne.jp/keyesberry/20090826/p1)[link](http://d.hatena.ne.jp/keyesberry/20090826/p1:bookmark)
> 
> Rubyのブロックはクロージャつまり
> それが作られた環境を
> そこに閉じ込めることができます
> この記事はそのような
> ブロックのスコープについて説明しています


９．[Rubyのyieldは羊の皮を被ったevalだ！(2008-08-12)](http://d.hatena.ne.jp/keyesberry/20080812/p1)[link](http://d.hatena.ne.jp/keyesberry/20080812/p1:bookmark)
> 
> Rubyのブロックはパワフルですが
> この記事はevalとの対比でそのパワーを説明しています


１０．[Rubyのオブジェクトは生物なんかじゃない、トップレベルこそが生物なんだ！(2008-09-05)](http://d.hatena.ne.jp/keyesberry/20080905/p1)[link](http://d.hatena.ne.jp/keyesberry/20080905/p1:bookmark)
> 
> Rubyのトップレベルでは
> オブジェクト指向のルールに従わない
> 手続き指向のプログラミングが実現できます
> この記事はその環境を構築している
> トップレベルの不思議について書いています


１１．[メソッドが見つからないならRubyに作ってもらえばいいよ！ - If method_missing, define_method by Ruby -(2008-10-22)](http://d.hatena.ne.jp/keyesberry/20081022/p1)[link](http://d.hatena.ne.jp/keyesberry/20081022/p1:bookmark)
> 
> Rubyではメタプログラミングというのが１つの
> 重要なプログラミングの手法です
> この記事では通常のメソッド定義の方法に始まって
> define_method method_missingを使った
> 動的なメソッド定義の方法までを解説しています


１２．[Rubyのシンボルは文字列の皮を被った整数だ！(2008-08-02)](http://d.hatena.ne.jp/keyesberry/20080802/p1)[link](http://d.hatena.ne.jp/keyesberry/20080802/p1:bookmark)
> 
> Rubyにはあまり他の言語には見られない
> シンボルというオブジェクトがあります
> この記事は文字列と数字との比較から
> シンボルが何であるかを解説しています


１３．[RubyのSymbol#to_procを考えた人になってみる(2008-09-17)](http://d.hatena.ne.jp/keyesberry/20080917/p1)[link](http://d.hatena.ne.jp/keyesberry/20080917/p1:bookmark)
> 
> Rubyでは例えば配列の合計値を求めるのに
> [1,2,3,4,5].inject { |m,i| m + i } #=> 15
> とする代わりに
> [1,2,3,4,5].inject(&:+) #=> 15
> と書けますが{% fn_ref 2 %}
> それはSymbol#to_procのお陰です
> この記事ではその仕組を解説しています


１４．[Rubyのモジュール関数を理解しよう！(2010-11-05)](http://d.hatena.ne.jp/keyesberry/20101105/p1)[link](http://d.hatena.ne.jp/keyesberry/20101105/p1:bookmark)
> 
> RubyにはMath.sqrtのような
> モジュール・メソッドとしても
> また関数的にも呼び出される
> モジュール関数というものがあります
> この記事はその実装に挑戦しています


１５．[RubyのProcオブジェクトはキューティーハニーだ!(2009-09-01)](http://d.hatena.ne.jp/keyesberry/20090901/p1)[link](http://d.hatena.ne.jp/keyesberry/20090901/p1:bookmark)
> 
> Rubyでは手続きをProcという
> オブジェクトに封入できます
> この記事はProcオブジェクトの
> 多様性について解説しています


１６．[高階関数はコードをユーザフレンドリーにする(2009-02-16)](http://d.hatena.ne.jp/keyesberry/20090216/p1)[link](http://d.hatena.ne.jp/keyesberry/20090216/p1:bookmark)
> 
> 関数を引数に取ったり
> 関数を返したりする関数のことを高階関数と呼びます
> この記事はRubyでブロックを使わずに
> 高階関数を実現する方法を解説しています


１７．[Rubyを使って「なぜ関数プログラミングは重要か」を解読しよう！(2011-01-24)](http://d.hatena.ne.jp/keyesberry/20110124/p1)[link](http://d.hatena.ne.jp/keyesberry/20110124/p1:bookmark)
> 
> Rubyはオブジェクト指向プログラミング言語ですが
> 関数プログラミングを実現できる構造を備えています
> この記事は「なぜ関数プログラミングは重要か」という
> 有名な論文をベースにRubyで関数プログラミングを実現する
> 手法について解説しています
> 残念ながらこのシリーズも3回で力尽きてます..


１８．[知って得する21のRubyのトリビアな記法 ~ 21 Trivia Notations you should know in Ruby(2011-06-22)](http://d.hatena.ne.jp/keyesberry/20110622/p1)[link](http://d.hatena.ne.jp/keyesberry/20110622/p1:bookmark)
> 
> Rubyには他の言語に劣らず
> ちょっとトリビアだけど知ってると便利な記法
> というのが結構あります
> この記事はそれを21個ピックアップして解説しています


１９．[IRB　それはRubyistの魔法のランプ(2010-11-16)](http://d.hatena.ne.jp/keyesberry/20101116/p1)[link](http://d.hatena.ne.jp/keyesberry/20101116/p1:bookmark)
> 
> Rubyにおける対話的実行環境はirbといいます
> irbがなければRubyの魅力が半減するほど
> 重要なツールです
> この記事はirbの使い方とそのカスタマイズ
> および拡張方法について解説しています


###Rubyを使った問題解決に関するもの
以下はRubyの言語仕様に関する記事ではなく
Rubyを使って問題を解く手法に関する記事です

２０．[Ruby、同じことの繰り返しは君に任せるよ ～ 再帰でハノイの塔を解こう！～(2008-07-08)](http://d.hatena.ne.jp/keyesberry/20080708/p1)[link](http://d.hatena.ne.jp/keyesberry/20080708/p1:bookmark)
> 
> この記事は再帰およびRubyで
> 再帰を使ってハノイの塔を解く方法を解説しています


２１．[Rubyで文字列検索アルゴリズムを表現しよう!(2010-10-17)](http://d.hatena.ne.jp/keyesberry/20101017/p1)[link](http://d.hatena.ne.jp/keyesberry/20101017/p1:bookmark)
> 
> 文字列検索の代表的なアルゴリズムには
> 力まかせ検索　ボイヤー-ムーア検索
> クヌース-モリス-プラット検索　N-gramインデックス検索
> ラビン-カープ検索などがあります
> この記事はこれらのアルゴリズムをRubyで実装して
> 比較解説しています


２２．[Rubyでソート・アルゴリズムを表現しよう!(2010-10-12)](http://d.hatena.ne.jp/keyesberry/20101012/p1)[link](http://d.hatena.ne.jp/keyesberry/20101012/p1:bookmark)
> 
> ソートの代表的なアルゴリズムには
> 挿入ソート　選択ソート　バブルソート
> クイックソート　マージソートなどがあります
> この記事はこれらのアルゴリズムをRubyで実装して
> 比較解説しています
> この記事ではRubyの簡潔さがよく現れていると思います


２３．[Rubyで論理プログラミングしようよ!(2011-08-31)](http://d.hatena.ne.jp/keyesberry/20110831/p1)[link](http://d.hatena.ne.jp/keyesberry/20110831/p1:bookmark)
> 
> この記事では
> 複数の選択的な条件から回答を導き出すような
> 論理問題をRubyで解く方法を解説しています


２４．[((Rubyで) 書く (Lisp) インタプリタ)(2010-11-10)](http://d.hatena.ne.jp/keyesberry/20101110/p1)[link](http://d.hatena.ne.jp/keyesberry/20101110/p1:bookmark)
> 
> 100行ほどのPythonコードで
> Schemeインタプリタを実装したPeter Norvigさんの
> 「((Pythonで) 書く (Lisp) インタプリタ)」
> という記事があります
> この記事ではこれをRubyで実装して
> Python版と比較解説しています


２５．[Rubyでスペル修正プログラムを書こう！(2009-03-26)](http://d.hatena.ne.jp/keyesberry/20090326/p1)[link](http://d.hatena.ne.jp/keyesberry/20090326/p1:bookmark)
> 
> Pythonを使ったPeter Norvigさんの
> 「スペル修正プログラムはどう書くか」という記事があります
> この記事はこれをRubyで実装したものを解説しています


２６．[irbから学ぶRubyの並列処理 ~ forkからWebSocketまで(2011-09-29)](http://d.hatena.ne.jp/keyesberry/20110929/p1)[link](http://d.hatena.ne.jp/keyesberry/20110929/p1:bookmark)
> 
> Rubyで並列処理をするには幾つかの方法があります
> この記事ではそれらを順次解説しています


これで26本の解説は終わりです
これらの他にもこのブログには
Rubyに関する記事が多数ありますから
興味を持ったら読んでもらえたらうれしいです
{% footnotes %}
   {% fn 1.9以降正確にはBasicObject %}
   {% fn 1.9では[1,2,3,4,5].inject(:+)とも書ける %}
{% endfootnotes %}
